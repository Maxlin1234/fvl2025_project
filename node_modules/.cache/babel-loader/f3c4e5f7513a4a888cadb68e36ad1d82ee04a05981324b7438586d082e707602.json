{"ast":null,"code":"import * as THREE from 'three';\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = this.$el;\n    const loader = new THREE.TextureLoader();\n    loader.load(require('@/assets/2025banner.jpg'), texture => {\n      initScene(texture);\n    });\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `;\n    const fragmentShader = `\n      varying vec2 vUv;\n      uniform sampler2D u_texture;\n      uniform vec2 u_mouse;\n      uniform vec2 u_prevMouse;\n      uniform float u_aberrationIntensity;\n\n      void main() {\n        vec2 gridUV = floor(vUv * vec2(20.0)) / vec2(20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0 / 20.0);\n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        vec2 pixelToMouse = centerOfPixel - u_mouse;\n        float dist = length(pixelToMouse);\n        float strength = smoothstep(0.2, 0.0, dist);\n        vec2 uvOffset = strength * -mouseDirection * 2.5;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 r = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.0, 0.0));\n        vec4 g = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.02, 0.0));\n        vec4 b = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(r.r, g.g, b.b, 1.0);\n      }\n    `;\n    let scene, camera, renderer, plane, sphere;\n    const mouse = new THREE.Vector2(0.2, 0.2);\n    const prevMouse = new THREE.Vector2(0.5, 0.5);\n    let aberration = 0;\n\n    // 用UV來大致指定最大圓的位置，可視需要微調\n    const circleUVX = 0.50; // 0~1 左右\n    const circleUVY = 0.52; // 0~1 上下(0底 1頂)\n    let planeWidth = 1,\n      planeHeight = 1;\n    let baseSphereRadius = 0.2; // 之後會依視窗比例換算\n\n    function initScene(texture) {\n      // renderer\n      renderer = new THREE.WebGLRenderer({\n        alpha: true,\n        antialias: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.domElement.style.position = 'absolute';\n      renderer.domElement.style.inset = '0';\n      container.appendChild(renderer.domElement);\n\n      // scene & camera\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10);\n      camera.position.z = 1;\n      const uniforms = {\n        u_texture: {\n          value: texture\n        },\n        u_mouse: {\n          value: mouse.clone()\n        },\n        u_prevMouse: {\n          value: prevMouse.clone()\n        },\n        u_aberrationIntensity: {\n          value: 0.0\n        }\n      };\n\n      // 根據FOV求出z=0平面可視寬高，讓plane正好鋪滿\n      const fov = camera.fov * Math.PI / 180;\n      planeHeight = 2 * Math.tan(fov / 2) * camera.position.z;\n      planeWidth = planeHeight * camera.aspect;\n      const geometry = new THREE.PlaneGeometry(planeWidth, planeHeight);\n      const material = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader,\n        fragmentShader\n      });\n      plane = new THREE.Mesh(geometry, material);\n      scene.add(plane);\n\n      // 加入可自轉球體(置於plane前方一點點)\n      addRotatingSphere();\n\n      // 監聽\n      animate();\n      window.addEventListener('resize', onResize);\n      container.addEventListener('mousemove', onMouseMove);\n    }\n    function addRotatingSphere() {\n      // 基於目前plane尺寸，估算球半徑(占螢高的某比例)\n      baseSphereRadius = planeHeight * 0.24; // 放大一點\n      const sphereGeo = new THREE.SphereGeometry(baseSphereRadius, 64, 64);\n      const sphereMat = new THREE.MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 0.35,\n        metalness: 0.15\n      });\n      sphere = new THREE.Mesh(sphereGeo, sphereMat);\n\n      // 打光 -> 亮粉色\n      const ambient = new THREE.AmbientLight(0xff66ff, 0.9);\n      const dir = new THREE.DirectionalLight(0xff66ff, 1.6);\n      dir.position.set(1, 1, 1);\n      scene.add(ambient, dir);\n\n      // 依UV定位到plane上的對應世界座標\n      const target = uvToWorld(circleUVX, circleUVY);\n      sphere.position.set(target.x, target.y, 0.05); // 往鏡頭方向一點，蓋過plane\n      scene.add(sphere);\n    }\n    function uvToWorld(u, v) {\n      // plane置中，x: [-planeWidth/2, +planeWidth/2]；y同理\n      const x = (u - 0.5) * planeWidth;\n      const y = (v - 0.5) * planeHeight;\n      return new THREE.Vector3(x, y, 0);\n    }\n    function onMouseMove(e) {\n      const rect = container.getBoundingClientRect();\n      prevMouse.copy(mouse);\n      mouse.x = (e.clientX - rect.left) / rect.width;\n      mouse.y = 1 - (e.clientY - rect.top) / rect.height;\n      aberration = 1.0;\n    }\n    function onResize() {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n\n      // 重新計算plane可視寬高、縮放以維持鋪滿\n      const fov = camera.fov * Math.PI / 180;\n      const newHeight = 2 * Math.tan(fov / 2) * camera.position.z;\n      const newWidth = newHeight * camera.aspect;\n      const scaleX = newWidth / planeWidth;\n      const scaleY = newHeight / planeHeight;\n      plane.scale.set(scaleX, scaleY, 1);\n\n      // 更新參考尺寸\n      planeWidth = newWidth;\n      planeHeight = newHeight;\n\n      // 重新定位與調整球大小\n      if (sphere) {\n        const target = uvToWorld(circleUVX, circleUVY);\n        sphere.position.set(target.x, target.y, 0.05);\n        const newRadius = planeHeight * 0.24; // 放大一致\n        const scaleR = newRadius / baseSphereRadius;\n        sphere.scale.set(scaleR, scaleR, scaleR);\n      }\n    }\n    function animate() {\n      requestAnimationFrame(animate);\n      if (plane) {\n        plane.material.uniforms.u_mouse.value.copy(mouse);\n        plane.material.uniforms.u_prevMouse.value.copy(prevMouse);\n        aberration = Math.max(0.0, aberration - 0.005);\n        plane.material.uniforms.u_aberrationIntensity.value = aberration;\n      }\n      if (sphere) {\n        sphere.rotation.y += 0.01;\n        sphere.rotation.x += 0.003;\n      }\n      renderer.render(scene, camera);\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","container","$el","loader","TextureLoader","load","require","texture","initScene","vertexShader","fragmentShader","scene","camera","renderer","plane","sphere","mouse","Vector2","prevMouse","aberration","circleUVX","circleUVY","planeWidth","planeHeight","baseSphereRadius","WebGLRenderer","alpha","antialias","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","domElement","style","position","inset","appendChild","Scene","PerspectiveCamera","z","uniforms","u_texture","value","u_mouse","clone","u_prevMouse","u_aberrationIntensity","fov","Math","PI","tan","aspect","geometry","PlaneGeometry","material","ShaderMaterial","Mesh","add","addRotatingSphere","animate","addEventListener","onResize","onMouseMove","sphereGeo","SphereGeometry","sphereMat","MeshStandardMaterial","color","roughness","metalness","ambient","AmbientLight","dir","DirectionalLight","set","target","uvToWorld","x","y","u","v","Vector3","e","rect","getBoundingClientRect","copy","clientX","left","width","clientY","top","height","updateProjectionMatrix","newHeight","newWidth","scaleX","scaleY","scale","newRadius","scaleR","requestAnimationFrame","max","rotation","render"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = this.$el;\n\n    const loader = new THREE.TextureLoader();\n    loader.load(require('@/assets/2025banner.jpg'), (texture) => {\n      initScene(texture);\n    });\n\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `;\n\n    const fragmentShader = `\n      varying vec2 vUv;\n      uniform sampler2D u_texture;\n      uniform vec2 u_mouse;\n      uniform vec2 u_prevMouse;\n      uniform float u_aberrationIntensity;\n\n      void main() {\n        vec2 gridUV = floor(vUv * vec2(20.0)) / vec2(20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0 / 20.0);\n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        vec2 pixelToMouse = centerOfPixel - u_mouse;\n        float dist = length(pixelToMouse);\n        float strength = smoothstep(0.2, 0.0, dist);\n        vec2 uvOffset = strength * -mouseDirection * 2.5;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 r = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.0, 0.0));\n        vec4 g = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.02, 0.0));\n        vec4 b = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(r.r, g.g, b.b, 1.0);\n      }\n    `;\n\n    let scene, camera, renderer, plane, sphere;\n    const mouse = new THREE.Vector2(0.2, 0.2);\n    const prevMouse = new THREE.Vector2(0.5, 0.5);\n    let aberration = 0;\n\n    // 用UV來大致指定最大圓的位置，可視需要微調\n    const circleUVX = 0.50; // 0~1 左右\n    const circleUVY = 0.52; // 0~1 上下(0底 1頂)\n    let planeWidth = 1, planeHeight = 1;\n    let baseSphereRadius = 0.2; // 之後會依視窗比例換算\n\n    function initScene(texture) {\n      // renderer\n      renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.domElement.style.position = 'absolute';\n      renderer.domElement.style.inset = '0';\n      container.appendChild(renderer.domElement);\n\n      // scene & camera\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10);\n      camera.position.z = 1;\n\n      const uniforms = {\n        u_texture: { value: texture },\n        u_mouse: { value: mouse.clone() },\n        u_prevMouse: { value: prevMouse.clone() },\n        u_aberrationIntensity: { value: 0.0 }\n      };\n\n      // 根據FOV求出z=0平面可視寬高，讓plane正好鋪滿\n      const fov = (camera.fov * Math.PI) / 180;\n      planeHeight = 2 * Math.tan(fov / 2) * camera.position.z;\n      planeWidth = planeHeight * camera.aspect;\n\n      const geometry = new THREE.PlaneGeometry(planeWidth, planeHeight);\n      const material = new THREE.ShaderMaterial({ uniforms, vertexShader, fragmentShader });\n      plane = new THREE.Mesh(geometry, material);\n      scene.add(plane);\n\n      // 加入可自轉球體(置於plane前方一點點)\n      addRotatingSphere();\n\n      // 監聽\n      animate();\n      window.addEventListener('resize', onResize);\n      container.addEventListener('mousemove', onMouseMove);\n    }\n\n    function addRotatingSphere() {\n      // 基於目前plane尺寸，估算球半徑(占螢高的某比例)\n      baseSphereRadius = planeHeight * 0.24; // 放大一點\n      const sphereGeo = new THREE.SphereGeometry(baseSphereRadius, 64, 64);\n      const sphereMat = new THREE.MeshStandardMaterial({ color: 0xffffff, roughness: 0.35, metalness: 0.15 });\n      sphere = new THREE.Mesh(sphereGeo, sphereMat);\n\n      // 打光 -> 亮粉色\n      const ambient = new THREE.AmbientLight(0xff66ff, 0.9);\n      const dir = new THREE.DirectionalLight(0xff66ff, 1.6);\n      dir.position.set(1, 1, 1);\n      scene.add(ambient, dir);\n\n      // 依UV定位到plane上的對應世界座標\n      const target = uvToWorld(circleUVX, circleUVY);\n      sphere.position.set(target.x, target.y, 0.05); // 往鏡頭方向一點，蓋過plane\n      scene.add(sphere);\n    }\n\n    function uvToWorld(u, v) {\n      // plane置中，x: [-planeWidth/2, +planeWidth/2]；y同理\n      const x = (u - 0.5) * planeWidth;\n      const y = (v - 0.5) * planeHeight;\n      return new THREE.Vector3(x, y, 0);\n    }\n\n    function onMouseMove(e) {\n      const rect = container.getBoundingClientRect();\n      prevMouse.copy(mouse);\n      mouse.x = (e.clientX - rect.left) / rect.width;\n      mouse.y = 1 - (e.clientY - rect.top) / rect.height;\n      aberration = 1.0;\n    }\n\n    function onResize() {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n\n      // 重新計算plane可視寬高、縮放以維持鋪滿\n      const fov = (camera.fov * Math.PI) / 180;\n      const newHeight = 2 * Math.tan(fov / 2) * camera.position.z;\n      const newWidth = newHeight * camera.aspect;\n\n      const scaleX = newWidth / planeWidth;\n      const scaleY = newHeight / planeHeight;\n      plane.scale.set(scaleX, scaleY, 1);\n\n      // 更新參考尺寸\n      planeWidth = newWidth;\n      planeHeight = newHeight;\n\n      // 重新定位與調整球大小\n      if (sphere) {\n        const target = uvToWorld(circleUVX, circleUVY);\n        sphere.position.set(target.x, target.y, 0.05);\n        const newRadius = planeHeight * 0.24; // 放大一致\n        const scaleR = newRadius / baseSphereRadius;\n        sphere.scale.set(scaleR, scaleR, scaleR);\n      }\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      if (plane) {\n        plane.material.uniforms.u_mouse.value.copy(mouse);\n        plane.material.uniforms.u_prevMouse.value.copy(prevMouse);\n        aberration = Math.max(0.0, aberration - 0.005);\n        plane.material.uniforms.u_aberrationIntensity.value = aberration;\n      }\n\n      if (sphere) {\n        sphere.rotation.y += 0.01;\n        sphere.rotation.x += 0.003;\n      }\n\n      renderer.render(scene, camera);\n    }\n  }\n};\n</script>\n\n<style>\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n}\n\n@media (max-width:768px){\n  #imageContainer {\n    height: 100svh; /* 避免手機瀏覽器 UI 影響顯示高度 */\n  }\n}\n\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  pointer-events: none;\n  position: absolute;\n  display: block;\n  inset: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}