{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { isScalar, isCollection } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\n/**\n * Verify that the input string is a valid anchor.\n *\n * Will throw on errors.\n */\nfunction anchorIsValid(anchor) {\n  if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n    const sa = JSON.stringify(anchor);\n    const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n    throw new Error(msg);\n  }\n  return true;\n}\nfunction anchorNames(root) {\n  const anchors = new Set();\n  visit(root, {\n    Value(_key, node) {\n      if (node.anchor) anchors.add(node.anchor);\n    }\n  });\n  return anchors;\n}\n/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */\nfunction findNewAnchor(prefix, exclude) {\n  for (let i = 1; true; ++i) {\n    const name = `${prefix}${i}`;\n    if (!exclude.has(name)) return name;\n  }\n}\nfunction createNodeAnchors(doc, prefix) {\n  const aliasObjects = [];\n  const sourceObjects = new Map();\n  let prevAnchors = null;\n  return {\n    onAnchor: source => {\n      aliasObjects.push(source);\n      prevAnchors ?? (prevAnchors = anchorNames(doc));\n      const anchor = findNewAnchor(prefix, prevAnchors);\n      prevAnchors.add(anchor);\n      return anchor;\n    },\n    /**\n     * With circular references, the source node is only resolved after all\n     * of its child nodes are. This is why anchors are set only after all of\n     * the nodes have been created.\n     */\n    setAnchors: () => {\n      for (const source of aliasObjects) {\n        const ref = sourceObjects.get(source);\n        if (typeof ref === 'object' && ref.anchor && (isScalar(ref.node) || isCollection(ref.node))) {\n          ref.node.anchor = ref.anchor;\n        } else {\n          const error = new Error('Failed to resolve repeated object (this should not happen)');\n          error.source = source;\n          throw error;\n        }\n      }\n    },\n    sourceObjects\n  };\n}\nexport { anchorIsValid, anchorNames, createNodeAnchors, findNewAnchor };","map":{"version":3,"names":["isScalar","isCollection","visit","anchorIsValid","anchor","test","sa","JSON","stringify","msg","Error","anchorNames","root","anchors","Set","Value","_key","node","add","findNewAnchor","prefix","exclude","i","name","has","createNodeAnchors","doc","aliasObjects","sourceObjects","Map","prevAnchors","onAnchor","source","push","setAnchors","ref","get","error"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/doc/anchors.js"],"sourcesContent":["import { isScalar, isCollection } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\n/**\n * Verify that the input string is a valid anchor.\n *\n * Will throw on errors.\n */\nfunction anchorIsValid(anchor) {\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n        const sa = JSON.stringify(anchor);\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n        throw new Error(msg);\n    }\n    return true;\n}\nfunction anchorNames(root) {\n    const anchors = new Set();\n    visit(root, {\n        Value(_key, node) {\n            if (node.anchor)\n                anchors.add(node.anchor);\n        }\n    });\n    return anchors;\n}\n/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */\nfunction findNewAnchor(prefix, exclude) {\n    for (let i = 1; true; ++i) {\n        const name = `${prefix}${i}`;\n        if (!exclude.has(name))\n            return name;\n    }\n}\nfunction createNodeAnchors(doc, prefix) {\n    const aliasObjects = [];\n    const sourceObjects = new Map();\n    let prevAnchors = null;\n    return {\n        onAnchor: (source) => {\n            aliasObjects.push(source);\n            prevAnchors ?? (prevAnchors = anchorNames(doc));\n            const anchor = findNewAnchor(prefix, prevAnchors);\n            prevAnchors.add(anchor);\n            return anchor;\n        },\n        /**\n         * With circular references, the source node is only resolved after all\n         * of its child nodes are. This is why anchors are set only after all of\n         * the nodes have been created.\n         */\n        setAnchors: () => {\n            for (const source of aliasObjects) {\n                const ref = sourceObjects.get(source);\n                if (typeof ref === 'object' &&\n                    ref.anchor &&\n                    (isScalar(ref.node) || isCollection(ref.node))) {\n                    ref.node.anchor = ref.anchor;\n                }\n                else {\n                    const error = new Error('Failed to resolve repeated object (this should not happen)');\n                    error.source = source;\n                    throw error;\n                }\n            }\n        },\n        sourceObjects\n    };\n}\n\nexport { anchorIsValid, anchorNames, createNodeAnchors, findNewAnchor };\n"],"mappings":";;;;;;;;AAAA,SAASA,QAAQ,EAAEC,YAAY,QAAQ,sBAAsB;AAC7D,SAASC,KAAK,QAAQ,aAAa;;AAEnC;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,MAAM,EAAE;EAC3B,IAAI,qBAAqB,CAACC,IAAI,CAACD,MAAM,CAAC,EAAE;IACpC,MAAME,EAAE,GAAGC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC;IACjC,MAAMK,GAAG,GAAG,6DAA6DH,EAAE,EAAE;IAC7E,MAAM,IAAII,KAAK,CAACD,GAAG,CAAC;EACxB;EACA,OAAO,IAAI;AACf;AACA,SAASE,WAAWA,CAACC,IAAI,EAAE;EACvB,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzBZ,KAAK,CAACU,IAAI,EAAE;IACRG,KAAKA,CAACC,IAAI,EAAEC,IAAI,EAAE;MACd,IAAIA,IAAI,CAACb,MAAM,EACXS,OAAO,CAACK,GAAG,CAACD,IAAI,CAACb,MAAM,CAAC;IAChC;EACJ,CAAC,CAAC;EACF,OAAOS,OAAO;AAClB;AACA;AACA,SAASM,aAAaA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,EAAEA,CAAC,EAAE;IACvB,MAAMC,IAAI,GAAG,GAAGH,MAAM,GAAGE,CAAC,EAAE;IAC5B,IAAI,CAACD,OAAO,CAACG,GAAG,CAACD,IAAI,CAAC,EAClB,OAAOA,IAAI;EACnB;AACJ;AACA,SAASE,iBAAiBA,CAACC,GAAG,EAAEN,MAAM,EAAE;EACpC,MAAMO,YAAY,GAAG,EAAE;EACvB,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC/B,IAAIC,WAAW,GAAG,IAAI;EACtB,OAAO;IACHC,QAAQ,EAAGC,MAAM,IAAK;MAClBL,YAAY,CAACM,IAAI,CAACD,MAAM,CAAC;MACzBF,WAAW,KAAKA,WAAW,GAAGnB,WAAW,CAACe,GAAG,CAAC,CAAC;MAC/C,MAAMtB,MAAM,GAAGe,aAAa,CAACC,MAAM,EAAEU,WAAW,CAAC;MACjDA,WAAW,CAACZ,GAAG,CAACd,MAAM,CAAC;MACvB,OAAOA,MAAM;IACjB,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ8B,UAAU,EAAEA,CAAA,KAAM;MACd,KAAK,MAAMF,MAAM,IAAIL,YAAY,EAAE;QAC/B,MAAMQ,GAAG,GAAGP,aAAa,CAACQ,GAAG,CAACJ,MAAM,CAAC;QACrC,IAAI,OAAOG,GAAG,KAAK,QAAQ,IACvBA,GAAG,CAAC/B,MAAM,KACTJ,QAAQ,CAACmC,GAAG,CAAClB,IAAI,CAAC,IAAIhB,YAAY,CAACkC,GAAG,CAAClB,IAAI,CAAC,CAAC,EAAE;UAChDkB,GAAG,CAAClB,IAAI,CAACb,MAAM,GAAG+B,GAAG,CAAC/B,MAAM;QAChC,CAAC,MACI;UACD,MAAMiC,KAAK,GAAG,IAAI3B,KAAK,CAAC,4DAA4D,CAAC;UACrF2B,KAAK,CAACL,MAAM,GAAGA,MAAM;UACrB,MAAMK,KAAK;QACf;MACJ;IACJ,CAAC;IACDT;EACJ,CAAC;AACL;AAEA,SAASzB,aAAa,EAAEQ,WAAW,EAAEc,iBAAiB,EAAEN,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}