{"ast":null,"code":"import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../assets/2025banner.jpg';\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    id: \"imageContainer\"\n  }, null, -1 /* CACHED */)), _cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    class: \"mobileBanner\",\n    style: {\n      \"height\": \"100vh\",\n      \"width\": \"100vw\"\n    }\n  }, [_createElementVNode(\"img\", {\n    src: _imports_0\n  })], -1 /* CACHED */))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_imports_0","_createElementVNode","id","class","style","src"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n  </div>\n  <div class=\"mobileBanner\" style=\"height: 100vh;width: 100vw;\">\n    <img src=\"../assets/2025banner.jpg\">\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n// import BannerParticles from './BannerParticles.vue';\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = this.$el;\n\n    const loader = new THREE.TextureLoader();\n    loader.load(require('@/assets/2025banner.jpg'), (texture) => {\n      initScene(texture);\n    });\n\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `;\n\n    const fragmentShader = `\n      varying vec2 vUv;\n      uniform sampler2D u_texture;\n      uniform vec2 u_mouse;\n      uniform vec2 u_prevMouse;\n      uniform float u_aberrationIntensity;\n\n      void main() {\n        vec2 gridUV = floor(vUv * vec2(20.0)) / vec2(20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0 / 20.0);\n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        vec2 pixelToMouse = centerOfPixel - u_mouse;\n        float dist = length(pixelToMouse);\n        float strength = smoothstep(0.2, 0.0, dist);\n        vec2 uvOffset = strength * -mouseDirection * 2.5;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 r = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.0, 0.0));\n        vec4 g = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.02, 0.0));\n        vec4 b = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(r.r, g.g, b.b, 1.0);\n        \n      }\n    `;\n\n    let scene, camera, renderer, plane;\n    const mouse = new THREE.Vector2(0.2, 0.2);\n    const prevMouse = new THREE.Vector2(0.5, 0.5);\n    let aberration = 0;\n\n    function initScene(texture) {\n      // renderer\n      renderer = new THREE.WebGLRenderer({ alpha: true });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.domElement.style.position = 'absolute';\n      renderer.domElement.style.inset = '0';\n      container.appendChild(renderer.domElement);\n\n      // scene & camera\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10);\n      camera.position.z = 1;\n\n      const uniforms = {\n        u_texture: { value: texture },\n        u_mouse: { value: mouse.clone() },\n        u_prevMouse: { value: prevMouse.clone() },\n        u_aberrationIntensity: { value: 0.0 }\n      };\n      const fov = (camera.fov * Math.PI) / 180;\n      const height = 2 * Math.tan(fov / 2) * camera.position.z;\n      const width = height * camera.aspect;\n      const geometry = new THREE.PlaneGeometry(width, height);\n\n\n      \n      const material = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader,\n        fragmentShader\n      });\n\n      \n\n      plane = new THREE.Mesh(geometry, material);\n      scene.add(plane);\n\n      animate();\n      window.addEventListener('resize', onResize);\n      container.addEventListener('mousemove', onMouseMove);\n    }\n\n\n    function onMouseMove(e) {\n      const rect = container.getBoundingClientRect();\n      prevMouse.copy(mouse);\n      mouse.x = (e.clientX - rect.left) / rect.width;\n      mouse.y = 1 - (e.clientY - rect.top) / rect.height;\n      aberration = 1.0;\n    }\n\n    function onResize() {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      plane.material.uniforms.u_mouse.value.copy(mouse);\n      plane.material.uniforms.u_prevMouse.value.copy(prevMouse);\n      aberration = Math.max(0.0, aberration - 0.005);\n      plane.material.uniforms.u_aberrationIntensity.value = aberration;\n\n      renderer.render(scene, camera);\n    }\n    \n\n  }\n};\n</script>\n\n<style>\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n}\n\n@media (max-width:768px){\n  #imageContainer {\n    height: 100vh; /* 避免手機瀏覽器 UI 影響顯示高度 */\n    width: 100vw;\n    overflow: hidden;\n    display: none;\n  }\n}\n\n\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  pointer-events: none;\n  position: absolute;\n  display: block;\n  inset: 0;\n}\n\n</style>\n"],"mappings":";OAISA,UAA8B;;uFAHrCC,mBAAA,CACM;IADDC,EAAE,EAAC;EAAgB,4B,0BAExBD,mBAAA,CAEM;IAFDE,KAAK,EAAC,cAAc;IAACC,KAAmC,EAAnC;MAAA;MAAA;IAAA;MACxBH,mBAAA,CAAoC;IAA/BI,GAA8B,EAA9BL;EAA8B,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}