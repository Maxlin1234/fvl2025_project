{"ast":null,"code":"import * as THREE from 'three';\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = this.$el;\n    const loader = new THREE.TextureLoader();\n    loader.load(require('@/assets/2025banner.jpg'), texture => {\n      initScene(texture);\n    });\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `;\n    const fragmentShader = `\n      varying vec2 vUv;\n      uniform sampler2D u_texture;\n      uniform vec2 u_mouse;\n      uniform vec2 u_prevMouse;\n      uniform float u_aberrationIntensity;\n\n      void main() {\n        vec2 gridUV = floor(vUv * vec2(60.0)) / vec2(60.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0 / 20.0);\n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        vec2 pixelToMouse = centerOfPixel - u_mouse;\n        float dist = length(pixelToMouse);\n        float strength = smoothstep(0.4, 0.0, dist);\n        vec2 uvOffset = strength * -mouseDirection * 0.8;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 r = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.00, 0.0));\n        vec4 g = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n        vec4 b = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(r.r, g.g, b.b, 1.0);\n      }\n    `;\n    let scene, camera, renderer, plane;\n    const mouse = new THREE.Vector2(0.2, 0.2);\n    const prevMouse = new THREE.Vector2(0.5, 0.5);\n    let aberration = 0;\n    function initScene(texture) {\n      // renderer\n      renderer = new THREE.WebGLRenderer({\n        alpha: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.domElement.style.position = 'absolute';\n      renderer.domElement.style.inset = '0';\n      container.appendChild(renderer.domElement);\n\n      // scene & camera\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10);\n      camera.position.z = 1;\n      const uniforms = {\n        u_texture: {\n          value: texture\n        },\n        u_mouse: {\n          value: mouse.clone()\n        },\n        u_prevMouse: {\n          value: prevMouse.clone()\n        },\n        u_aberrationIntensity: {\n          value: 0.0\n        }\n      };\n      const fov = camera.fov * Math.PI / 180;\n      const height = 2 * Math.tan(fov / 2) * camera.position.z;\n      const width = height * camera.aspect;\n      const geometry = new THREE.PlaneGeometry(width, height);\n      const material = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader,\n        fragmentShader\n      });\n      plane = new THREE.Mesh(geometry, material);\n      scene.add(plane);\n      animate();\n      window.addEventListener('resize', onResize);\n      container.addEventListener('mousemove', onMouseMove);\n    }\n    function handleTouchStart(e) {\n      isInteracting = true;\n      updateTouch(e);\n    }\n    function handleTouchMove(e) {\n      if (!isInteracting) return;\n      updateTouch(e);\n    }\n    function handleTouchEnd(e) {\n      isInteracting = false;\n    }\n    function updateTouch(e) {\n      const touch = e.touches[0];\n      const rect = container.getBoundingClientRect();\n      prevMouse.copy(mouse);\n      mouse.x = (touch.clientX - rect.left) / rect.width;\n      mouse.y = 1 - (touch.clientY - rect.top) / rect.height;\n      aberration = 1.0;\n    }\n    function onMouseMove(e) {\n      const rect = container.getBoundingClientRect();\n      prevMouse.copy(mouse);\n      mouse.x = (e.clientX - rect.left) / rect.width;\n      mouse.y = 1 - (e.clientY - rect.top) / rect.height;\n      aberration = 1.0;\n    }\n    function onResize() {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    }\n    function animate() {\n      requestAnimationFrame(animate);\n      plane.material.uniforms.u_mouse.value.copy(mouse);\n      plane.material.uniforms.u_prevMouse.value.copy(prevMouse);\n      aberration = Math.max(0.0, aberration - 0.005);\n      plane.material.uniforms.u_aberrationIntensity.value = aberration;\n      renderer.render(scene, camera);\n    }\n    if (isTouchDevice) {\n      container.addEventListener('touchstart', handleTouchStart);\n      container.addEventListener('touchmove', handleTouchMove);\n      container.addEventListener('touchend', handleTouchEnd);\n    } else {\n      container.addEventListener('mousemove', onMouseMove);\n      container.addEventListener('mouseenter', onMouseEnter);\n      container.addEventListener('mouseleave', onMouseLeave);\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","container","$el","loader","TextureLoader","load","require","texture","initScene","vertexShader","fragmentShader","scene","camera","renderer","plane","mouse","Vector2","prevMouse","aberration","WebGLRenderer","alpha","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","domElement","style","position","inset","appendChild","Scene","PerspectiveCamera","z","uniforms","u_texture","value","u_mouse","clone","u_prevMouse","u_aberrationIntensity","fov","Math","PI","height","tan","width","aspect","geometry","PlaneGeometry","material","ShaderMaterial","Mesh","add","animate","addEventListener","onResize","onMouseMove","handleTouchStart","e","isInteracting","updateTouch","handleTouchMove","handleTouchEnd","touch","touches","rect","getBoundingClientRect","copy","x","clientX","left","y","clientY","top","updateProjectionMatrix","requestAnimationFrame","max","render","isTouchDevice","onMouseEnter","onMouseLeave"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = this.$el;\n\n    const loader = new THREE.TextureLoader();\n    loader.load(require('@/assets/2025banner.jpg'), (texture) => {\n      initScene(texture);\n    });\n\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `;\n\n    const fragmentShader = `\n      varying vec2 vUv;\n      uniform sampler2D u_texture;\n      uniform vec2 u_mouse;\n      uniform vec2 u_prevMouse;\n      uniform float u_aberrationIntensity;\n\n      void main() {\n        vec2 gridUV = floor(vUv * vec2(60.0)) / vec2(60.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0 / 20.0);\n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        vec2 pixelToMouse = centerOfPixel - u_mouse;\n        float dist = length(pixelToMouse);\n        float strength = smoothstep(0.4, 0.0, dist);\n        vec2 uvOffset = strength * -mouseDirection * 0.8;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 r = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.00, 0.0));\n        vec4 g = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n        vec4 b = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(r.r, g.g, b.b, 1.0);\n      }\n    `;\n\n    let scene, camera, renderer, plane;\n    const mouse = new THREE.Vector2(0.2, 0.2);\n    const prevMouse = new THREE.Vector2(0.5, 0.5);\n    let aberration = 0;\n\n    function initScene(texture) {\n      // renderer\n      renderer = new THREE.WebGLRenderer({ alpha: true });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.domElement.style.position = 'absolute';\n      renderer.domElement.style.inset = '0';\n      container.appendChild(renderer.domElement);\n\n      // scene & camera\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10);\n      camera.position.z = 1;\n\n      const uniforms = {\n        u_texture: { value: texture },\n        u_mouse: { value: mouse.clone() },\n        u_prevMouse: { value: prevMouse.clone() },\n        u_aberrationIntensity: { value: 0.0 }\n      };\n\n      const fov = (camera.fov * Math.PI) / 180;\n      const height = 2 * Math.tan(fov / 2) * camera.position.z;\n      const width = height * camera.aspect;\n      const geometry = new THREE.PlaneGeometry(width, height);\n      const material = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader,\n        fragmentShader\n      });\n\n      plane = new THREE.Mesh(geometry, material);\n      scene.add(plane);\n\n      animate();\n      window.addEventListener('resize', onResize);\n      container.addEventListener('mousemove', onMouseMove);\n    }\n\n    function handleTouchStart(e) {\n  isInteracting = true;\n  updateTouch(e);\n}\n\nfunction handleTouchMove(e) {\n  if (!isInteracting) return;\n  updateTouch(e);\n}\n\nfunction handleTouchEnd(e) {\n  isInteracting = false;\n}\n\nfunction updateTouch(e) {\n  const touch = e.touches[0];\n  const rect = container.getBoundingClientRect();\n  prevMouse.copy(mouse);\n  mouse.x = (touch.clientX - rect.left) / rect.width;\n  mouse.y = 1 - (touch.clientY - rect.top) / rect.height;\n  aberration = 1.0;\n}\n\n\n    function onMouseMove(e) {\n      const rect = container.getBoundingClientRect();\n      prevMouse.copy(mouse);\n      mouse.x = (e.clientX - rect.left) / rect.width;\n      mouse.y = 1 - (e.clientY - rect.top) / rect.height;\n      aberration = 1.0;\n    }\n\n    function onResize() {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      plane.material.uniforms.u_mouse.value.copy(mouse);\n      plane.material.uniforms.u_prevMouse.value.copy(prevMouse);\n      aberration = Math.max(0.0, aberration - 0.005);\n      plane.material.uniforms.u_aberrationIntensity.value = aberration;\n\n      renderer.render(scene, camera);\n    }\n    if (isTouchDevice) {\n  container.addEventListener('touchstart', handleTouchStart);\n  container.addEventListener('touchmove', handleTouchMove);\n  container.addEventListener('touchend', handleTouchEnd);\n} else {\n  container.addEventListener('mousemove', onMouseMove);\n  container.addEventListener('mouseenter', onMouseEnter);\n  container.addEventListener('mouseleave', onMouseLeave);\n}\n\n\n  }\n  \n};\n</script>\n\n<style>\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n}\n\ncanvas {\n  z-index: 2;\n  pointer-events: none;\n  position: absolute;\n  inset: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}