{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"imageContainer\"\n};\nconst _hoisted_2 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"img\", {\n    id: \"myImage\",\n    src: require('../assets/2025banner.jpg')\n  }, null, 8 /* PROPS */, _hoisted_2)]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createElementVNode","src","require"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n    <img id=\"myImage\" :src=\"require('../assets/2025banner.jpg')\" />\n\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n// import bannerImg from '../assets/2025banner.jpg';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const renderer = new THREE.WebGLRenderer({ alpha: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.inset = '0';\n    renderer.domElement.style.zIndex = '2';\n    document.getElementById('imageContainer').appendChild(renderer.domElement);\n\n    const vertexShader = `\n  varying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\nconst fragmentShader = `\n  uniform sampler2D uTexture;\n  varying vec2 vUv;\n\n  void main() {\n    gl_FragColor = texture2D(uTexture, vUv);\n  }\n`;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 5;\n\n    // 計算滿版平面尺寸\n    const fov = camera.fov * (Math.PI / 180);\n    const height = 2 * Math.tan(fov / 2) * camera.position.z;\n    const width = height * camera.aspect;\n\n    const geometry = new THREE.PlaneGeometry(width, height);\n\n    // 載入圖片\n    const texture = new THREE.TextureLoader().load(bannerImg);\n\n    const material = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      uniforms: {\n        uTexture: { value: texture }\n      },\n      transparent: true\n    });\n\n    const plane = new THREE.Mesh(geometry, material);\n    scene.add(plane);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n};\n</script>\n\n<style>\n\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n}\n\ncanvas {\n  display: block;\n  z-index: 2;\n  pointer-events: none;\n}\n</style>"],"mappings":";;EACOA,EAAE,EAAC;AAAgB;;;uBAAxBC,mBAAA,CAGM,OAHNC,UAGM,GAFJC,mBAAA,CAA+D;IAA1DH,EAAE,EAAC,SAAS;IAAEI,GAAG,EAAEC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}