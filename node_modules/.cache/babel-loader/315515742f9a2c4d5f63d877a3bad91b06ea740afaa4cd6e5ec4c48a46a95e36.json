{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Scalar } from '../nodes/Scalar.js';\nfunction resolveBlockScalar(ctx, scalar, onError) {\n  const start = scalar.offset;\n  const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);\n  if (!header) return {\n    value: '',\n    type: null,\n    comment: '',\n    range: [start, start, start]\n  };\n  const type = header.mode === '>' ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;\n  const lines = scalar.source ? splitLines(scalar.source) : [];\n  // determine the end of content & start of chomping\n  let chompStart = lines.length;\n  for (let i = lines.length - 1; i >= 0; --i) {\n    const content = lines[i][1];\n    if (content === '' || content === '\\r') chompStart = i;else break;\n  }\n  // shortcut for empty contents\n  if (chompStart === 0) {\n    const value = header.chomp === '+' && lines.length > 0 ? '\\n'.repeat(Math.max(1, lines.length - 1)) : '';\n    let end = start + header.length;\n    if (scalar.source) end += scalar.source.length;\n    return {\n      value,\n      type,\n      comment: header.comment,\n      range: [start, end, end]\n    };\n  }\n  // find the indentation level to trim from start\n  let trimIndent = scalar.indent + header.indent;\n  let offset = scalar.offset + header.length;\n  let contentStart = 0;\n  for (let i = 0; i < chompStart; ++i) {\n    const [indent, content] = lines[i];\n    if (content === '' || content === '\\r') {\n      if (header.indent === 0 && indent.length > trimIndent) trimIndent = indent.length;\n    } else {\n      if (indent.length < trimIndent) {\n        const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';\n        onError(offset + indent.length, 'MISSING_CHAR', message);\n      }\n      if (header.indent === 0) trimIndent = indent.length;\n      contentStart = i;\n      if (trimIndent === 0 && !ctx.atRoot) {\n        const message = 'Block scalar values in collections must be indented';\n        onError(offset, 'BAD_INDENT', message);\n      }\n      break;\n    }\n    offset += indent.length + content.length + 1;\n  }\n  // include trailing more-indented empty lines in content\n  for (let i = lines.length - 1; i >= chompStart; --i) {\n    if (lines[i][0].length > trimIndent) chompStart = i + 1;\n  }\n  let value = '';\n  let sep = '';\n  let prevMoreIndented = false;\n  // leading whitespace is kept intact\n  for (let i = 0; i < contentStart; ++i) value += lines[i][0].slice(trimIndent) + '\\n';\n  for (let i = contentStart; i < chompStart; ++i) {\n    let [indent, content] = lines[i];\n    offset += indent.length + content.length + 1;\n    const crlf = content[content.length - 1] === '\\r';\n    if (crlf) content = content.slice(0, -1);\n    /* istanbul ignore if already caught in lexer */\n    if (content && indent.length < trimIndent) {\n      const src = header.indent ? 'explicit indentation indicator' : 'first line';\n      const message = `Block scalar lines must not be less indented than their ${src}`;\n      onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);\n      indent = '';\n    }\n    if (type === Scalar.BLOCK_LITERAL) {\n      value += sep + indent.slice(trimIndent) + content;\n      sep = '\\n';\n    } else if (indent.length > trimIndent || content[0] === '\\t') {\n      // more-indented content within a folded block\n      if (sep === ' ') sep = '\\n';else if (!prevMoreIndented && sep === '\\n') sep = '\\n\\n';\n      value += sep + indent.slice(trimIndent) + content;\n      sep = '\\n';\n      prevMoreIndented = true;\n    } else if (content === '') {\n      // empty line\n      if (sep === '\\n') value += '\\n';else sep = '\\n';\n    } else {\n      value += sep + content;\n      sep = ' ';\n      prevMoreIndented = false;\n    }\n  }\n  switch (header.chomp) {\n    case '-':\n      break;\n    case '+':\n      for (let i = chompStart; i < lines.length; ++i) value += '\\n' + lines[i][0].slice(trimIndent);\n      if (value[value.length - 1] !== '\\n') value += '\\n';\n      break;\n    default:\n      value += '\\n';\n  }\n  const end = start + header.length + scalar.source.length;\n  return {\n    value,\n    type,\n    comment: header.comment,\n    range: [start, end, end]\n  };\n}\nfunction parseBlockScalarHeader({\n  offset,\n  props\n}, strict, onError) {\n  /* istanbul ignore if should not happen */\n  if (props[0].type !== 'block-scalar-header') {\n    onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');\n    return null;\n  }\n  const {\n    source\n  } = props[0];\n  const mode = source[0];\n  let indent = 0;\n  let chomp = '';\n  let error = -1;\n  for (let i = 1; i < source.length; ++i) {\n    const ch = source[i];\n    if (!chomp && (ch === '-' || ch === '+')) chomp = ch;else {\n      const n = Number(ch);\n      if (!indent && n) indent = n;else if (error === -1) error = offset + i;\n    }\n  }\n  if (error !== -1) onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);\n  let hasSpace = false;\n  let comment = '';\n  let length = source.length;\n  for (let i = 1; i < props.length; ++i) {\n    const token = props[i];\n    switch (token.type) {\n      case 'space':\n        hasSpace = true;\n      // fallthrough\n      case 'newline':\n        length += token.source.length;\n        break;\n      case 'comment':\n        if (strict && !hasSpace) {\n          const message = 'Comments must be separated from other tokens by white space characters';\n          onError(token, 'MISSING_CHAR', message);\n        }\n        length += token.source.length;\n        comment = token.source.substring(1);\n        break;\n      case 'error':\n        onError(token, 'UNEXPECTED_TOKEN', token.message);\n        length += token.source.length;\n        break;\n      /* istanbul ignore next should not happen */\n      default:\n        {\n          const message = `Unexpected token in block scalar header: ${token.type}`;\n          onError(token, 'UNEXPECTED_TOKEN', message);\n          const ts = token.source;\n          if (ts && typeof ts === 'string') length += ts.length;\n        }\n    }\n  }\n  return {\n    mode,\n    indent,\n    chomp,\n    comment,\n    length\n  };\n}\n/** @returns Array of lines split up as `[indent, content]` */\nfunction splitLines(source) {\n  const split = source.split(/\\n( *)/);\n  const first = split[0];\n  const m = first.match(/^( *)/);\n  const line0 = m?.[1] ? [m[1], first.slice(m[1].length)] : ['', first];\n  const lines = [line0];\n  for (let i = 1; i < split.length; i += 2) lines.push([split[i], split[i + 1]]);\n  return lines;\n}\nexport { resolveBlockScalar };","map":{"version":3,"names":["Scalar","resolveBlockScalar","ctx","scalar","onError","start","offset","header","parseBlockScalarHeader","options","strict","value","type","comment","range","mode","BLOCK_FOLDED","BLOCK_LITERAL","lines","source","splitLines","chompStart","length","i","content","chomp","repeat","Math","max","end","trimIndent","indent","contentStart","message","atRoot","sep","prevMoreIndented","slice","crlf","src","props","error","ch","n","Number","hasSpace","token","substring","ts","split","first","m","match","line0","push"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/compose/resolve-block-scalar.js"],"sourcesContent":["import { Scalar } from '../nodes/Scalar.js';\n\nfunction resolveBlockScalar(ctx, scalar, onError) {\n    const start = scalar.offset;\n    const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);\n    if (!header)\n        return { value: '', type: null, comment: '', range: [start, start, start] };\n    const type = header.mode === '>' ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;\n    const lines = scalar.source ? splitLines(scalar.source) : [];\n    // determine the end of content & start of chomping\n    let chompStart = lines.length;\n    for (let i = lines.length - 1; i >= 0; --i) {\n        const content = lines[i][1];\n        if (content === '' || content === '\\r')\n            chompStart = i;\n        else\n            break;\n    }\n    // shortcut for empty contents\n    if (chompStart === 0) {\n        const value = header.chomp === '+' && lines.length > 0\n            ? '\\n'.repeat(Math.max(1, lines.length - 1))\n            : '';\n        let end = start + header.length;\n        if (scalar.source)\n            end += scalar.source.length;\n        return { value, type, comment: header.comment, range: [start, end, end] };\n    }\n    // find the indentation level to trim from start\n    let trimIndent = scalar.indent + header.indent;\n    let offset = scalar.offset + header.length;\n    let contentStart = 0;\n    for (let i = 0; i < chompStart; ++i) {\n        const [indent, content] = lines[i];\n        if (content === '' || content === '\\r') {\n            if (header.indent === 0 && indent.length > trimIndent)\n                trimIndent = indent.length;\n        }\n        else {\n            if (indent.length < trimIndent) {\n                const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';\n                onError(offset + indent.length, 'MISSING_CHAR', message);\n            }\n            if (header.indent === 0)\n                trimIndent = indent.length;\n            contentStart = i;\n            if (trimIndent === 0 && !ctx.atRoot) {\n                const message = 'Block scalar values in collections must be indented';\n                onError(offset, 'BAD_INDENT', message);\n            }\n            break;\n        }\n        offset += indent.length + content.length + 1;\n    }\n    // include trailing more-indented empty lines in content\n    for (let i = lines.length - 1; i >= chompStart; --i) {\n        if (lines[i][0].length > trimIndent)\n            chompStart = i + 1;\n    }\n    let value = '';\n    let sep = '';\n    let prevMoreIndented = false;\n    // leading whitespace is kept intact\n    for (let i = 0; i < contentStart; ++i)\n        value += lines[i][0].slice(trimIndent) + '\\n';\n    for (let i = contentStart; i < chompStart; ++i) {\n        let [indent, content] = lines[i];\n        offset += indent.length + content.length + 1;\n        const crlf = content[content.length - 1] === '\\r';\n        if (crlf)\n            content = content.slice(0, -1);\n        /* istanbul ignore if already caught in lexer */\n        if (content && indent.length < trimIndent) {\n            const src = header.indent\n                ? 'explicit indentation indicator'\n                : 'first line';\n            const message = `Block scalar lines must not be less indented than their ${src}`;\n            onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);\n            indent = '';\n        }\n        if (type === Scalar.BLOCK_LITERAL) {\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n        }\n        else if (indent.length > trimIndent || content[0] === '\\t') {\n            // more-indented content within a folded block\n            if (sep === ' ')\n                sep = '\\n';\n            else if (!prevMoreIndented && sep === '\\n')\n                sep = '\\n\\n';\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n            prevMoreIndented = true;\n        }\n        else if (content === '') {\n            // empty line\n            if (sep === '\\n')\n                value += '\\n';\n            else\n                sep = '\\n';\n        }\n        else {\n            value += sep + content;\n            sep = ' ';\n            prevMoreIndented = false;\n        }\n    }\n    switch (header.chomp) {\n        case '-':\n            break;\n        case '+':\n            for (let i = chompStart; i < lines.length; ++i)\n                value += '\\n' + lines[i][0].slice(trimIndent);\n            if (value[value.length - 1] !== '\\n')\n                value += '\\n';\n            break;\n        default:\n            value += '\\n';\n    }\n    const end = start + header.length + scalar.source.length;\n    return { value, type, comment: header.comment, range: [start, end, end] };\n}\nfunction parseBlockScalarHeader({ offset, props }, strict, onError) {\n    /* istanbul ignore if should not happen */\n    if (props[0].type !== 'block-scalar-header') {\n        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');\n        return null;\n    }\n    const { source } = props[0];\n    const mode = source[0];\n    let indent = 0;\n    let chomp = '';\n    let error = -1;\n    for (let i = 1; i < source.length; ++i) {\n        const ch = source[i];\n        if (!chomp && (ch === '-' || ch === '+'))\n            chomp = ch;\n        else {\n            const n = Number(ch);\n            if (!indent && n)\n                indent = n;\n            else if (error === -1)\n                error = offset + i;\n        }\n    }\n    if (error !== -1)\n        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);\n    let hasSpace = false;\n    let comment = '';\n    let length = source.length;\n    for (let i = 1; i < props.length; ++i) {\n        const token = props[i];\n        switch (token.type) {\n            case 'space':\n                hasSpace = true;\n            // fallthrough\n            case 'newline':\n                length += token.source.length;\n                break;\n            case 'comment':\n                if (strict && !hasSpace) {\n                    const message = 'Comments must be separated from other tokens by white space characters';\n                    onError(token, 'MISSING_CHAR', message);\n                }\n                length += token.source.length;\n                comment = token.source.substring(1);\n                break;\n            case 'error':\n                onError(token, 'UNEXPECTED_TOKEN', token.message);\n                length += token.source.length;\n                break;\n            /* istanbul ignore next should not happen */\n            default: {\n                const message = `Unexpected token in block scalar header: ${token.type}`;\n                onError(token, 'UNEXPECTED_TOKEN', message);\n                const ts = token.source;\n                if (ts && typeof ts === 'string')\n                    length += ts.length;\n            }\n        }\n    }\n    return { mode, indent, chomp, comment, length };\n}\n/** @returns Array of lines split up as `[indent, content]` */\nfunction splitLines(source) {\n    const split = source.split(/\\n( *)/);\n    const first = split[0];\n    const m = first.match(/^( *)/);\n    const line0 = m?.[1]\n        ? [m[1], first.slice(m[1].length)]\n        : ['', first];\n    const lines = [line0];\n    for (let i = 1; i < split.length; i += 2)\n        lines.push([split[i], split[i + 1]]);\n    return lines;\n}\n\nexport { resolveBlockScalar };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}