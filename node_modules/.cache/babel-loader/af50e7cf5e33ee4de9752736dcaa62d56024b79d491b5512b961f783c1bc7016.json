{"ast":null,"code":"require(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.flat-map.js\");\nconst {\n  existsSync\n} = require('node:fs');\nconst path = require('node:path');\nconst {\n  platform,\n  arch,\n  report\n} = require('node:process');\nconst isMusl = () => !report.getReport().header.glibcVersionRuntime;\nconst bindingsByPlatformAndArch = {\n  android: {\n    arm: {\n      base: 'android-arm-eabi'\n    },\n    arm64: {\n      base: 'android-arm64'\n    }\n  },\n  darwin: {\n    arm64: {\n      base: 'darwin-arm64'\n    },\n    x64: {\n      base: 'darwin-x64'\n    }\n  },\n  freebsd: {\n    arm64: {\n      base: 'freebsd-arm64'\n    },\n    x64: {\n      base: 'freebsd-x64'\n    }\n  },\n  linux: {\n    arm: {\n      base: 'linux-arm-gnueabihf',\n      musl: 'linux-arm-musleabihf'\n    },\n    arm64: {\n      base: 'linux-arm64-gnu',\n      musl: 'linux-arm64-musl'\n    },\n    loong64: {\n      base: 'linux-loongarch64-gnu',\n      musl: null\n    },\n    ppc64: {\n      base: 'linux-ppc64-gnu',\n      musl: null\n    },\n    riscv64: {\n      base: 'linux-riscv64-gnu',\n      musl: 'linux-riscv64-musl'\n    },\n    s390x: {\n      base: 'linux-s390x-gnu',\n      musl: null\n    },\n    x64: {\n      base: 'linux-x64-gnu',\n      musl: 'linux-x64-musl'\n    }\n  },\n  win32: {\n    arm64: {\n      base: 'win32-arm64-msvc'\n    },\n    ia32: {\n      base: 'win32-ia32-msvc'\n    },\n    x64: {\n      base: 'win32-x64-msvc'\n    }\n  }\n};\nconst msvcLinkFilenameByArch = {\n  arm64: 'vc_redist.arm64.exe',\n  ia32: 'vc_redist.x86.exe',\n  x64: 'vc_redist.x64.exe'\n};\nconst packageBase = getPackageBase();\nconst localName = `./rollup.${packageBase}.node`;\nconst requireWithFriendlyError = id => {\n  try {\n    return require(id);\n  } catch (error) {\n    if (platform === 'win32' && error instanceof Error && error.code === 'ERR_DLOPEN_FAILED' && error.message.includes('The specified module could not be found')) {\n      const msvcDownloadLink = `https://aka.ms/vs/17/release/${msvcLinkFilenameByArch[arch]}`;\n      throw new Error(`Failed to load module ${id}. ` + 'Required DLL was not found. ' + 'This error usually happens when Microsoft Visual C++ Redistributable is not installed. ' + `You can download it from ${msvcDownloadLink}`, {\n        cause: error\n      });\n    }\n    throw new Error(`Cannot find module ${id}. ` + `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` + 'Please try `npm i` again after removing both package-lock.json and node_modules directory.', {\n      cause: error\n    });\n  }\n};\nconst {\n  parse,\n  parseAsync,\n  xxhashBase64Url,\n  xxhashBase36,\n  xxhashBase16\n} = requireWithFriendlyError(existsSync(path.join(__dirname, localName)) ? localName : `@rollup/rollup-${packageBase}`);\nfunction getPackageBase() {\n  const imported = bindingsByPlatformAndArch[platform]?.[arch];\n  if (!imported) {\n    throwUnsupportedError(false);\n  }\n  if ('musl' in imported && isMusl()) {\n    return imported.musl || throwUnsupportedError(true);\n  }\n  return imported.base;\n}\nfunction throwUnsupportedError(isMusl) {\n  throw new Error(`Your current platform \"${platform}${isMusl ? ' (musl)' : ''}\" and architecture \"${arch}\" combination is not yet supported by the native Rollup build. Please use the WASM build \"@rollup/wasm-node\" instead.\n\nThe following platform-architecture combinations are supported:\n${Object.entries(bindingsByPlatformAndArch).flatMap(([platformName, architectures]) => Object.entries(architectures).flatMap(([architectureName, {\n    musl\n  }]) => {\n    const name = `${platformName}-${architectureName}`;\n    return musl ? [name, `${name} (musl)`] : [name];\n  })).join('\\n')}\n\nIf this is important to you, please consider supporting Rollup to make a native build for your platform and architecture available.`);\n}\nmodule.exports.parse = parse;\nmodule.exports.parseAsync = parseAsync;\nmodule.exports.xxhashBase64Url = xxhashBase64Url;\nmodule.exports.xxhashBase36 = xxhashBase36;\nmodule.exports.xxhashBase16 = xxhashBase16;","map":{"version":3,"names":["existsSync","require","path","platform","arch","report","isMusl","getReport","header","glibcVersionRuntime","bindingsByPlatformAndArch","android","arm","base","arm64","darwin","x64","freebsd","linux","musl","loong64","ppc64","riscv64","s390x","win32","ia32","msvcLinkFilenameByArch","packageBase","getPackageBase","localName","requireWithFriendlyError","id","error","Error","code","message","includes","msvcDownloadLink","cause","parse","parseAsync","xxhashBase64Url","xxhashBase36","xxhashBase16","join","__dirname","imported","throwUnsupportedError","Object","entries","flatMap","platformName","architectures","architectureName","name","module","exports"],"sources":["/Users/linhankuan/fvl2025/node_modules/rollup/dist/native.js"],"sourcesContent":["const { existsSync } = require('node:fs');\nconst path = require('node:path');\nconst { platform, arch, report } = require('node:process');\n\nconst isMusl = () => !report.getReport().header.glibcVersionRuntime;\n\nconst bindingsByPlatformAndArch = {\n\tandroid: {\n\t\tarm: { base: 'android-arm-eabi' },\n\t\tarm64: { base: 'android-arm64' }\n\t},\n\tdarwin: {\n\t\tarm64: { base: 'darwin-arm64' },\n\t\tx64: { base: 'darwin-x64' }\n\t},\n\tfreebsd: {\n\t\tarm64: { base: 'freebsd-arm64' },\n\t\tx64: { base: 'freebsd-x64' }\n\t},\n\tlinux: {\n\t\tarm: { base: 'linux-arm-gnueabihf', musl: 'linux-arm-musleabihf' },\n\t\tarm64: { base: 'linux-arm64-gnu', musl: 'linux-arm64-musl' },\n\t\tloong64: { base: 'linux-loongarch64-gnu', musl: null },\n\t\tppc64: { base: 'linux-ppc64-gnu', musl: null },\n\t\triscv64: { base: 'linux-riscv64-gnu', musl: 'linux-riscv64-musl' },\n\t\ts390x: { base: 'linux-s390x-gnu', musl: null },\n\t\tx64: { base: 'linux-x64-gnu', musl: 'linux-x64-musl' }\n\t},\n\twin32: {\n\t\tarm64: { base: 'win32-arm64-msvc' },\n\t\tia32: { base: 'win32-ia32-msvc' },\n\t\tx64: { base: 'win32-x64-msvc' }\n\t}\n};\n\nconst msvcLinkFilenameByArch = {\n\tarm64: 'vc_redist.arm64.exe',\n\tia32: 'vc_redist.x86.exe',\n\tx64: 'vc_redist.x64.exe'\n};\n\nconst packageBase = getPackageBase();\nconst localName = `./rollup.${packageBase}.node`;\nconst requireWithFriendlyError = id => {\n\ttry {\n\t\treturn require(id);\n\t} catch (error) {\n\t\tif (\n\t\t\tplatform === 'win32' &&\n\t\t\terror instanceof Error &&\n\t\t\terror.code === 'ERR_DLOPEN_FAILED' &&\n\t\t\terror.message.includes('The specified module could not be found')\n\t\t) {\n\t\t\tconst msvcDownloadLink = `https://aka.ms/vs/17/release/${msvcLinkFilenameByArch[arch]}`;\n\t\t\tthrow new Error(\n\t\t\t\t`Failed to load module ${id}. ` +\n\t\t\t\t\t'Required DLL was not found. ' +\n\t\t\t\t\t'This error usually happens when Microsoft Visual C++ Redistributable is not installed. ' +\n\t\t\t\t\t`You can download it from ${msvcDownloadLink}`,\n\t\t\t\t{ cause: error }\n\t\t\t);\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`Cannot find module ${id}. ` +\n\t\t\t\t`npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` +\n\t\t\t\t'Please try `npm i` again after removing both package-lock.json and node_modules directory.',\n\t\t\t{ cause: error }\n\t\t);\n\t}\n};\n\nconst { parse, parseAsync, xxhashBase64Url, xxhashBase36, xxhashBase16 } = requireWithFriendlyError(\n\texistsSync(path.join(__dirname, localName)) ? localName : `@rollup/rollup-${packageBase}`\n);\n\nfunction getPackageBase() {\n\tconst imported = bindingsByPlatformAndArch[platform]?.[arch];\n\tif (!imported) {\n\t\tthrowUnsupportedError(false);\n\t}\n\tif ('musl' in imported && isMusl()) {\n\t\treturn imported.musl || throwUnsupportedError(true);\n\t}\n\treturn imported.base;\n}\n\nfunction throwUnsupportedError(isMusl) {\n\tthrow new Error(\n\t\t`Your current platform \"${platform}${isMusl ? ' (musl)' : ''}\" and architecture \"${arch}\" combination is not yet supported by the native Rollup build. Please use the WASM build \"@rollup/wasm-node\" instead.\n\nThe following platform-architecture combinations are supported:\n${Object.entries(bindingsByPlatformAndArch)\n\t.flatMap(([platformName, architectures]) =>\n\t\tObject.entries(architectures).flatMap(([architectureName, { musl }]) => {\n\t\t\tconst name = `${platformName}-${architectureName}`;\n\t\t\treturn musl ? [name, `${name} (musl)`] : [name];\n\t\t})\n\t)\n\t.join('\\n')}\n\nIf this is important to you, please consider supporting Rollup to make a native build for your platform and architecture available.`\n\t);\n}\n\nmodule.exports.parse = parse;\nmodule.exports.parseAsync = parseAsync;\nmodule.exports.xxhashBase64Url = xxhashBase64Url;\nmodule.exports.xxhashBase36 = xxhashBase36;\nmodule.exports.xxhashBase16 = xxhashBase16;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}