{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"work-detail\"\n};\nconst _hoisted_2 = {\n  class: \"work-hero\"\n};\nconst _hoisted_3 = [\"src\"];\nconst _hoisted_4 = {\n  class: \"work-content\"\n};\nconst _hoisted_5 = {\n  class: \"work-title\"\n};\nconst _hoisted_6 = {\n  class: \"work-meta\"\n};\nconst _hoisted_7 = {\n  class: \"work-description\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"work-detail loading\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $setup.work ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"img\", {\n    src: $setup.coverUrl,\n    alt: \"cover\"\n  }, null, 8 /* PROPS */, _hoisted_3)]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h1\", _hoisted_5, _toDisplayString($setup.isEnglish ? $setup.work?.work_en?.title : $setup.work?.work_zh?.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"span\", null, _toDisplayString($setup.isEnglish ? 'Artist' : '藝術家') + \"：\" + _toDisplayString($setup.isEnglish ? $setup.work?.work_en?.artist : $setup.work?.work_zh?.artist), 1 /* TEXT */)]), _createCommentVNode(\" <div class=\\\"work-description\\\">{{ descriptionText }}</div> \"), _createElementVNode(\"div\", _hoisted_7, _toDisplayString($setup.work.groups.groups_zh), 1 /* TEXT */)])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, \"Loading...\"));\n}","map":{"version":3,"names":["class","$setup","work","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","src","coverUrl","alt","_hoisted_4","_hoisted_5","_toDisplayString","isEnglish","work_en","title","work_zh","_hoisted_6","artist","_createCommentVNode","_hoisted_7","groups","groups_zh","_hoisted_8"],"sources":["/Users/linhankuan/fvl2025/src/views/PortfolioDetil.vue"],"sourcesContent":["<!-- src/views/PortfolioDetil.vue -->\n<template>\n  <div class=\"work-detail\" v-if=\"work\">\n    <div class=\"work-hero\">\n      <img :src=\"coverUrl\" alt=\"cover\" />\n    </div>\n    <div class=\"work-content\">\n      <h1 class=\"work-title\">{{ isEnglish ? work?.work_en?.title : work?.work_zh?.title }}</h1>\n      <div class=\"work-meta\">\n        <span>{{ isEnglish ? 'Artist' : '藝術家' }}：{{ isEnglish ? work?.work_en?.artist : work?.work_zh?.artist }}</span>\n      </div>\n      <!-- <div class=\"work-description\">{{ descriptionText }}</div> -->\n      <div class=\"work-description\">{{ work.groups.groups_zh }}</div>\n    </div>\n  </div>\n  <div v-else class=\"work-detail loading\">Loading...</div>\n</template>\n\n<script>\nimport { useRoute } from 'vue-router';\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'PortfolioDetil',\n  setup() {\n    const route = useRoute();\n    const id = route.params.id;\n\n    const isEnglish = ref(false);\n    const work = ref(null);\n    const coverUrl = ref('');\n    const descriptionText = ref('');\n\n    const resolveInitialLang = () => {\n      // URL query 覆蓋 localStorage\n      const q = route.query.lang;\n      if (q === 'en') return true;\n      if (q === 'zh') return false;\n      try {\n        const saved = localStorage.getItem('lang');\n        return saved === 'en';\n      } catch {\n        return false;\n      }\n    };\n\n    const pickFirstNonEmpty = (obj, keys) => {\n      for (const key of keys) {\n        const val = obj && typeof obj[key] === 'string' ? obj[key] : '';\n        if (val && val.trim().length > 0) return val;\n      }\n      return '';\n    };\n\n    const stripHtml = (html) => {\n      if (!html || typeof html !== 'string') return '';\n      const withNewlines = html.replace(/<br\\s*\\/?>(\\r\\n)?/gi, '\\n');\n      const temp = document.createElement('div');\n      temp.innerHTML = withNewlines;\n      const text = temp.textContent || temp.innerText || '';\n      return text;\n    };\n\n    const recalcDerived = () => {\n      coverUrl.value = work.value ? `https://unzip-clab-api.clab.org.tw/${work.value.photo_1}` : '';\n      const langBlock = isEnglish.value ? work.value?.work_en : work.value?.work_zh;\n      const raw = pickFirstNonEmpty(langBlock || {}, ['description', 'proposal', 'note', 'summary', 'content', 'text']);\n      descriptionText.value = stripHtml(raw);\n    };\n\n    const loadFromLocal = () => {\n      try {\n        const key = `work_${id}`;\n        const raw = localStorage.getItem(key);\n        if (!raw) return false;\n        const parsed = JSON.parse(raw);\n        work.value = parsed;\n        recalcDerived();\n        return true;\n      } catch (e) {\n        console.error('Failed to parse work data from localStorage:', e);\n        return false;\n      }\n    };\n\n    const fetchFromApi = async () => {\n      try {\n        const { data } = await axios.get(`https://unzip-clab-api.clab.org.tw/api/v1/works/${id}`);\n        const entity = Array.isArray(data?.results) ? data.results[0] : (data || null);\n        if (entity) {\n          work.value = entity;\n          recalcDerived();\n        }\n      } catch (e) {\n        console.error('Failed to fetch work by id:', e);\n      }\n    };\n\n    const handleStorage = (e) => {\n      if (e.key === 'lang') {\n        isEnglish.value = e.newValue === 'en';\n        recalcDerived();\n      }\n    };\n\n    onMounted(async () => {\n      isEnglish.value = resolveInitialLang();\n      const ok = loadFromLocal();\n      if (!ok) await fetchFromApi();\n      window.addEventListener('storage', handleStorage);\n    });\n\n    onBeforeUnmount(() => {\n      window.removeEventListener('storage', handleStorage);\n    });\n\n    return { work, coverUrl, isEnglish, descriptionText };\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.work-detail {\n  background: #0e0e0e;\n  color: #f2f2f2;\n  min-height: 100vh;\n}\n.work-detail.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.work-hero {\n  width: 100%;\n  height: 60vh;\n  background: #000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.work-hero img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n.work-content {\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: 32px 20px 64px;\n}\n.work-title {\n  font-size: 2rem;\n  margin-bottom: 16px;\n}\n.work-meta {\n  font-size: 0.95rem;\n  color: #aaa;\n  margin-bottom: 20px;\n}\n.work-description {\n  line-height: 1.8;\n  color: #ddd;\n  white-space: pre-wrap;\n}\n</style>"],"mappings":";;;EAEOA,KAAK,EAAC;;;EACJA,KAAK,EAAC;AAAW;;;EAGjBA,KAAK,EAAC;AAAc;;EACnBA,KAAK,EAAC;AAAY;;EACjBA,KAAK,EAAC;AAAW;;EAIjBA,KAAK,EAAC;AAAkB;;;EAGrBA,KAAK,EAAC;;;SAbaC,MAAA,CAAAC,IAAI,I,cAAnCC,mBAAA,CAYM,OAZNC,UAYM,GAXJC,mBAAA,CAEM,OAFNC,UAEM,GADJD,mBAAA,CAAmC;IAA7BE,GAAG,EAAEN,MAAA,CAAAO,QAAQ;IAAEC,GAAG,EAAC;yCAE3BJ,mBAAA,CAOM,OAPNK,UAOM,GANJL,mBAAA,CAAyF,MAAzFM,UAAyF,EAAAC,gBAAA,CAA/DX,MAAA,CAAAY,SAAS,GAAGZ,MAAA,CAAAC,IAAI,EAAEY,OAAO,EAAEC,KAAK,GAAGd,MAAA,CAAAC,IAAI,EAAEc,OAAO,EAAED,KAAK,kBACjFV,mBAAA,CAEM,OAFNY,UAEM,GADJZ,mBAAA,CAA+G,cAAAO,gBAAA,CAAtGX,MAAA,CAAAY,SAAS,uBAAsB,GAAC,GAAAD,gBAAA,CAAGX,MAAA,CAAAY,SAAS,GAAGZ,MAAA,CAAAC,IAAI,EAAEY,OAAO,EAAEI,MAAM,GAAGjB,MAAA,CAAAC,IAAI,EAAEc,OAAO,EAAEE,MAAM,iB,GAEvGC,mBAAA,iEAAkE,EAClEd,mBAAA,CAA+D,OAA/De,UAA+D,EAAAR,gBAAA,CAA9BX,MAAA,CAAAC,IAAI,CAACmB,MAAM,CAACC,SAAS,iB,sBAG1DnB,mBAAA,CAAwD,OAAxDoB,UAAwD,EAAhB,YAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}