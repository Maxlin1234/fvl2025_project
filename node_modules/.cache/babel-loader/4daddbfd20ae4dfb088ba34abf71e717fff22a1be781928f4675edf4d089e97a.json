{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nexport default {\n  name: 'BannerPt',\n  mounted() {\n    // === 基本場景設置 ===\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n    camera.position.z = 10;\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      preserveDrawingBuffer: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setClearColor(0x000000, 0); // 完全透明背景\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.$refs.threeContainer.appendChild(renderer.domElement);\n\n    // === 建立圓形貼圖 ===\n    const canvas = document.createElement('canvas');\n    canvas.width = 64;\n    canvas.height = 64;\n    const ctx = canvas.getContext('2d');\n    const center = 32;\n    const radius = 30;\n\n    // 畫一個白色圓形，背景透明\n    ctx.clearRect(0, 0, 64, 64);\n    ctx.beginPath();\n    ctx.arc(center, center, radius, 0, Math.PI * 2);\n    ctx.closePath();\n    ctx.fillStyle = 'white';\n    ctx.fill();\n    const circleTexture = new THREE.CanvasTexture(canvas);\n\n    // === 建立粒子幾何體與材質 ===\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n    const particleCount = 500;\n    for (let i = 0; i < particleCount; i++) {\n      const x = THREE.MathUtils.randFloatSpread(20);\n      const y = THREE.MathUtils.randFloatSpread(20);\n      const z = THREE.MathUtils.randFloatSpread(20);\n      vertices.push(x, y, z);\n    }\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    const material = new THREE.PointsMaterial({\n      size: 0.3,\n      map: circleTexture,\n      transparent: true,\n      alphaTest: 0.5,\n      depthWrite: false,\n      color: 0xffffff\n    });\n    const particles = new THREE.Points(geometry, material);\n    scene.add(particles);\n\n    // === 單一粒子（可選）===\n    const singleGeometry = new THREE.BufferGeometry();\n    singleGeometry.setAttribute('position', new THREE.Float32BufferAttribute([45, 0, 0], 3));\n    const spherePoint = new THREE.Points(singleGeometry, material);\n    scene.add(spherePoint);\n\n    // === 光源 ===\n    const ambientLight = new THREE.AmbientLight(0xffffff); // 改成正確顏色\n    scene.add(ambientLight);\n\n    // === 動畫迴圈 ===\n    function animate() {\n      requestAnimationFrame(animate);\n      particles.rotation.y += 0.001;\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // === 窗口調整 ===\n    window.addEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","alpha","preserveDrawingBuffer","setPixelRatio","devicePixelRatio","setClearColor","setSize","$refs","threeContainer","appendChild","domElement","canvas","document","createElement","width","height","ctx","getContext","center","radius","clearRect","beginPath","arc","Math","PI","closePath","fillStyle","fill","circleTexture","CanvasTexture","geometry","BufferGeometry","vertices","particleCount","i","x","MathUtils","randFloatSpread","y","push","setAttribute","Float32BufferAttribute","material","PointsMaterial","size","map","transparent","alphaTest","depthWrite","color","particles","Points","add","singleGeometry","spherePoint","ambientLight","AmbientLight","animate","requestAnimationFrame","rotation","render","addEventListener","aspect","updateProjectionMatrix"],"sources":["/Users/linhankuan/fvl2025/src/components/BannerParticles.vue"],"sourcesContent":["<template>\n  <div class=\"particles\" ref=\"threeContainer\" id=\"container\">\n    <p>Hello world</p>\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'BannerPt',\n  mounted() {\n    // === 基本場景設置 ===\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    camera.position.z = 10;\n\n    const renderer = new THREE.WebGLRenderer({ alpha: true, preserveDrawingBuffer: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setClearColor(0x000000, 0); // 完全透明背景\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.$refs.threeContainer.appendChild(renderer.domElement);\n\n    // === 建立圓形貼圖 ===\n    const canvas = document.createElement('canvas');\n    canvas.width = 64;\n    canvas.height = 64;\n    const ctx = canvas.getContext('2d');\n    const center = 32;\n    const radius = 30;\n\n    // 畫一個白色圓形，背景透明\n    ctx.clearRect(0, 0, 64, 64);\n    ctx.beginPath();\n    ctx.arc(center, center, radius, 0, Math.PI * 2);\n    ctx.closePath();\n    ctx.fillStyle = 'white';\n    ctx.fill();\n\n    const circleTexture = new THREE.CanvasTexture(canvas);\n\n    // === 建立粒子幾何體與材質 ===\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n\n    const particleCount = 500;\n    for (let i = 0; i < particleCount; i++) {\n      const x = THREE.MathUtils.randFloatSpread(20);\n      const y = THREE.MathUtils.randFloatSpread(20);\n      const z = THREE.MathUtils.randFloatSpread(20);\n      vertices.push(x, y, z);\n    }\n\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n    const material = new THREE.PointsMaterial({\n      size: 0.3,\n      map: circleTexture,\n      transparent: true,\n      alphaTest: 0.5,\n      depthWrite: false,\n      color: 0xffffff\n    });\n\n    const particles = new THREE.Points(geometry, material);\n    scene.add(particles);\n\n    // === 單一粒子（可選）===\n    const singleGeometry = new THREE.BufferGeometry();\n    singleGeometry.setAttribute(\n      'position',\n      new THREE.Float32BufferAttribute([45, 0, 0], 3)\n    );\n    const spherePoint = new THREE.Points(singleGeometry, material);\n    scene.add(spherePoint);\n\n    // === 光源 ===\n    const ambientLight = new THREE.AmbientLight(0xffffff); // 改成正確顏色\n    scene.add(ambientLight);\n\n    // === 動畫迴圈 ===\n    function animate() {\n      requestAnimationFrame(animate);\n      particles.rotation.y += 0.001;\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    // === 窗口調整 ===\n    window.addEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}