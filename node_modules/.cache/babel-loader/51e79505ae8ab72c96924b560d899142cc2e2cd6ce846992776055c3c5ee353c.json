{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"container\",\n  class: \"three-sphere\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["/Users/linhankuan/fvl2025/src/components/ThreeSphere.vue"],"sourcesContent":["<template>\n  <div ref=\"container\" class=\"three-sphere\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'ThreeSphere',\n  data() {\n    return {\n      renderer: null,\n      scene: null,\n      camera: null,\n      sphere: null,\n      animationId: null,\n      observer: null\n    }\n  },\n  mounted() {\n    this.init();\n    this.animate();\n    window.addEventListener('resize', this.onResize, { passive: true });\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.onResize);\n    cancelAnimationFrame(this.animationId);\n    if (this.renderer) {\n      this.renderer.dispose();\n      if (this.renderer.domElement && this.renderer.domElement.parentNode) {\n        this.renderer.domElement.parentNode.removeChild(this.renderer.domElement);\n      }\n    }\n    if (this.sphere && this.sphere.geometry) this.sphere.geometry.dispose();\n    if (this.sphere && this.sphere.material) this.sphere.material.dispose();\n    this.scene = null;\n    this.camera = null;\n    this.renderer = null;\n  },\n  methods: {\n    init() {\n      const container = this.$refs.container;\n      const width = container.clientWidth || 300;\n      const height = container.clientHeight || 300;\n\n      // Scene\n      this.scene = new THREE.Scene();\n\n      // Camera\n      this.camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\n      this.camera.position.set(0, 0, 3.2);\n\n      // Renderer (transparent)\n      this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      this.renderer.setSize(width, height);\n      this.renderer.setClearColor(0x000000, 0);\n      container.appendChild(this.renderer.domElement);\n\n      // Lights\n      const hemi = new THREE.HemisphereLight(0xffffff, 0x222233, 1.0);\n      this.scene.add(hemi);\n      const dir = new THREE.DirectionalLight(0xffffff, 0.8);\n      dir.position.set(3, 5, 2);\n      this.scene.add(dir);\n\n      // Sphere\n      const geometry = new THREE.SphereGeometry(1, 64, 64);\n      const material = new THREE.MeshStandardMaterial({\n        color: 0x20afb4,\n        roughness: 0.35,\n        metalness: 0.2,\n        emissive: 0x001018,\n        emissiveIntensity: 0.2,\n        transparent: true,\n        opacity: 0.95\n      });\n      this.sphere = new THREE.Mesh(geometry, material);\n      this.scene.add(this.sphere);\n\n      // Subtle wire overlay\n      const wire = new THREE.WireframeGeometry(geometry);\n      const line = new THREE.LineSegments(wire);\n      line.material.depthTest = true;\n      line.material.opacity = 0.15;\n      line.material.transparent = true;\n      line.material.color = new THREE.Color(0xffffff);\n      this.sphere.add(line);\n\n      this.onResize();\n    },\n    onResize() {\n      const container = this.$refs.container;\n      if (!container || !this.renderer || !this.camera) return;\n      const width = container.clientWidth || 300;\n      const height = container.clientHeight || 300;\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(width, height);\n    },\n    animate() {\n      this.animationId = requestAnimationFrame(this.animate);\n      if (this.sphere) {\n        this.sphere.rotation.y += 0.005;\n        this.sphere.rotation.x += 0.0015;\n      }\n      if (this.renderer && this.scene && this.camera) {\n        this.renderer.render(this.scene, this.camera);\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.three-sphere {\n  width: 100%;\n  height: 100%;\n}\n</style> "],"mappings":";;EACOA,GAAG,EAAC,WAAW;EAACC,KAAK,EAAC;;;uBAA3BC,mBAAA,CAAgD,OAAhDC,UAAgD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}