{"ast":null,"code":"import { isCollection, isNode, isScalar, isSeq } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\nfunction stringifyPair({\n  key,\n  value\n}, ctx, onComment, onChompKeep) {\n  const {\n    allNullValues,\n    doc,\n    indent,\n    indentStep,\n    options: {\n      commentString,\n      indentSeq,\n      simpleKeys\n    }\n  } = ctx;\n  let keyComment = isNode(key) && key.comment || null;\n  if (simpleKeys) {\n    if (keyComment) {\n      throw new Error('With simple keys, key nodes cannot have comments');\n    }\n    if (isCollection(key) || !isNode(key) && typeof key === 'object') {\n      const msg = 'With simple keys, collection cannot be used as a key value';\n      throw new Error(msg);\n    }\n  }\n  let explicitKey = !simpleKeys && (!key || keyComment && value == null && !ctx.inFlow || isCollection(key) || (isScalar(key) ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL : typeof key === 'object'));\n  ctx = Object.assign({}, ctx, {\n    allNullValues: false,\n    implicitKey: !explicitKey && (simpleKeys || !allNullValues),\n    indent: indent + indentStep\n  });\n  let keyCommentDone = false;\n  let chompKeep = false;\n  let str = stringify(key, ctx, () => keyCommentDone = true, () => chompKeep = true);\n  if (!explicitKey && !ctx.inFlow && str.length > 1024) {\n    if (simpleKeys) throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\n    explicitKey = true;\n  }\n  if (ctx.inFlow) {\n    if (allNullValues || value == null) {\n      if (keyCommentDone && onComment) onComment();\n      return str === '' ? '?' : explicitKey ? `? ${str}` : str;\n    }\n  } else if (allNullValues && !simpleKeys || value == null && explicitKey) {\n    str = `? ${str}`;\n    if (keyComment && !keyCommentDone) {\n      str += lineComment(str, ctx.indent, commentString(keyComment));\n    } else if (chompKeep && onChompKeep) onChompKeep();\n    return str;\n  }\n  if (keyCommentDone) keyComment = null;\n  if (explicitKey) {\n    if (keyComment) str += lineComment(str, ctx.indent, commentString(keyComment));\n    str = `? ${str}\\n${indent}:`;\n  } else {\n    str = `${str}:`;\n    if (keyComment) str += lineComment(str, ctx.indent, commentString(keyComment));\n  }\n  let vsb, vcb, valueComment;\n  if (isNode(value)) {\n    vsb = !!value.spaceBefore;\n    vcb = value.commentBefore;\n    valueComment = value.comment;\n  } else {\n    vsb = false;\n    vcb = null;\n    valueComment = null;\n    if (value && typeof value === 'object') value = doc.createNode(value);\n  }\n  ctx.implicitKey = false;\n  if (!explicitKey && !keyComment && isScalar(value)) ctx.indentAtStart = str.length + 1;\n  chompKeep = false;\n  if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && isSeq(value) && !value.flow && !value.tag && !value.anchor) {\n    // If indentSeq === false, consider '- ' as part of indentation where possible\n    ctx.indent = ctx.indent.substring(2);\n  }\n  let valueCommentDone = false;\n  const valueStr = stringify(value, ctx, () => valueCommentDone = true, () => chompKeep = true);\n  let ws = ' ';\n  if (keyComment || vsb || vcb) {\n    ws = vsb ? '\\n' : '';\n    if (vcb) {\n      const cs = commentString(vcb);\n      ws += `\\n${indentComment(cs, ctx.indent)}`;\n    }\n    if (valueStr === '' && !ctx.inFlow) {\n      if (ws === '\\n') ws = '\\n\\n';\n    } else {\n      ws += `\\n${ctx.indent}`;\n    }\n  } else if (!explicitKey && isCollection(value)) {\n    const vs0 = valueStr[0];\n    const nl0 = valueStr.indexOf('\\n');\n    const hasNewline = nl0 !== -1;\n    const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;\n    if (hasNewline || !flow) {\n      let hasPropsLine = false;\n      if (hasNewline && (vs0 === '&' || vs0 === '!')) {\n        let sp0 = valueStr.indexOf(' ');\n        if (vs0 === '&' && sp0 !== -1 && sp0 < nl0 && valueStr[sp0 + 1] === '!') {\n          sp0 = valueStr.indexOf(' ', sp0 + 1);\n        }\n        if (sp0 === -1 || nl0 < sp0) hasPropsLine = true;\n      }\n      if (!hasPropsLine) ws = `\\n${ctx.indent}`;\n    }\n  } else if (valueStr === '' || valueStr[0] === '\\n') {\n    ws = '';\n  }\n  str += ws + valueStr;\n  if (ctx.inFlow) {\n    if (valueCommentDone && onComment) onComment();\n  } else if (valueComment && !valueCommentDone) {\n    str += lineComment(str, ctx.indent, commentString(valueComment));\n  } else if (chompKeep && onChompKeep) {\n    onChompKeep();\n  }\n  return str;\n}\nexport { stringifyPair };","map":{"version":3,"names":["isCollection","isNode","isScalar","isSeq","Scalar","stringify","lineComment","indentComment","stringifyPair","key","value","ctx","onComment","onChompKeep","allNullValues","doc","indent","indentStep","options","commentString","indentSeq","simpleKeys","keyComment","comment","Error","msg","explicitKey","inFlow","type","BLOCK_FOLDED","BLOCK_LITERAL","Object","assign","implicitKey","keyCommentDone","chompKeep","str","length","vsb","vcb","valueComment","spaceBefore","commentBefore","createNode","indentAtStart","flow","tag","anchor","substring","valueCommentDone","valueStr","ws","cs","vs0","nl0","indexOf","hasNewline","items","hasPropsLine","sp0"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/stringify/stringifyPair.js"],"sourcesContent":["import { isCollection, isNode, isScalar, isSeq } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyPair({ key, value }, ctx, onComment, onChompKeep) {\n    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;\n    let keyComment = (isNode(key) && key.comment) || null;\n    if (simpleKeys) {\n        if (keyComment) {\n            throw new Error('With simple keys, key nodes cannot have comments');\n        }\n        if (isCollection(key) || (!isNode(key) && typeof key === 'object')) {\n            const msg = 'With simple keys, collection cannot be used as a key value';\n            throw new Error(msg);\n        }\n    }\n    let explicitKey = !simpleKeys &&\n        (!key ||\n            (keyComment && value == null && !ctx.inFlow) ||\n            isCollection(key) ||\n            (isScalar(key)\n                ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL\n                : typeof key === 'object'));\n    ctx = Object.assign({}, ctx, {\n        allNullValues: false,\n        implicitKey: !explicitKey && (simpleKeys || !allNullValues),\n        indent: indent + indentStep\n    });\n    let keyCommentDone = false;\n    let chompKeep = false;\n    let str = stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));\n    if (!explicitKey && !ctx.inFlow && str.length > 1024) {\n        if (simpleKeys)\n            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\n        explicitKey = true;\n    }\n    if (ctx.inFlow) {\n        if (allNullValues || value == null) {\n            if (keyCommentDone && onComment)\n                onComment();\n            return str === '' ? '?' : explicitKey ? `? ${str}` : str;\n        }\n    }\n    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {\n        str = `? ${str}`;\n        if (keyComment && !keyCommentDone) {\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        }\n        else if (chompKeep && onChompKeep)\n            onChompKeep();\n        return str;\n    }\n    if (keyCommentDone)\n        keyComment = null;\n    if (explicitKey) {\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        str = `? ${str}\\n${indent}:`;\n    }\n    else {\n        str = `${str}:`;\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n    }\n    let vsb, vcb, valueComment;\n    if (isNode(value)) {\n        vsb = !!value.spaceBefore;\n        vcb = value.commentBefore;\n        valueComment = value.comment;\n    }\n    else {\n        vsb = false;\n        vcb = null;\n        valueComment = null;\n        if (value && typeof value === 'object')\n            value = doc.createNode(value);\n    }\n    ctx.implicitKey = false;\n    if (!explicitKey && !keyComment && isScalar(value))\n        ctx.indentAtStart = str.length + 1;\n    chompKeep = false;\n    if (!indentSeq &&\n        indentStep.length >= 2 &&\n        !ctx.inFlow &&\n        !explicitKey &&\n        isSeq(value) &&\n        !value.flow &&\n        !value.tag &&\n        !value.anchor) {\n        // If indentSeq === false, consider '- ' as part of indentation where possible\n        ctx.indent = ctx.indent.substring(2);\n    }\n    let valueCommentDone = false;\n    const valueStr = stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));\n    let ws = ' ';\n    if (keyComment || vsb || vcb) {\n        ws = vsb ? '\\n' : '';\n        if (vcb) {\n            const cs = commentString(vcb);\n            ws += `\\n${indentComment(cs, ctx.indent)}`;\n        }\n        if (valueStr === '' && !ctx.inFlow) {\n            if (ws === '\\n')\n                ws = '\\n\\n';\n        }\n        else {\n            ws += `\\n${ctx.indent}`;\n        }\n    }\n    else if (!explicitKey && isCollection(value)) {\n        const vs0 = valueStr[0];\n        const nl0 = valueStr.indexOf('\\n');\n        const hasNewline = nl0 !== -1;\n        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;\n        if (hasNewline || !flow) {\n            let hasPropsLine = false;\n            if (hasNewline && (vs0 === '&' || vs0 === '!')) {\n                let sp0 = valueStr.indexOf(' ');\n                if (vs0 === '&' &&\n                    sp0 !== -1 &&\n                    sp0 < nl0 &&\n                    valueStr[sp0 + 1] === '!') {\n                    sp0 = valueStr.indexOf(' ', sp0 + 1);\n                }\n                if (sp0 === -1 || nl0 < sp0)\n                    hasPropsLine = true;\n            }\n            if (!hasPropsLine)\n                ws = `\\n${ctx.indent}`;\n        }\n    }\n    else if (valueStr === '' || valueStr[0] === '\\n') {\n        ws = '';\n    }\n    str += ws + valueStr;\n    if (ctx.inFlow) {\n        if (valueCommentDone && onComment)\n            onComment();\n    }\n    else if (valueComment && !valueCommentDone) {\n        str += lineComment(str, ctx.indent, commentString(valueComment));\n    }\n    else if (chompKeep && onChompKeep) {\n        onChompKeep();\n    }\n    return str;\n}\n\nexport { stringifyPair };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}