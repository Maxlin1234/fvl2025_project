{"ast":null,"code":"import * as THREE from 'three';\n// import vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n// import bannerImg from '../assets/2025banner.jpg';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.inset = '0';\n    renderer.domElement.style.zIndex = '2';\n    document.getElementById('imageContainer').appendChild(renderer.domElement);\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    // shaders\n    const vertexShader = `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n    const fragmentShader = `\n    varying vec2 vUv;\n    uniform sampler2D u_texture;    \n    uniform vec2 u_mouse;\n    uniform vec2 u_prevMouse;\n    uniform float u_aberrationIntensity;\n\n    void main() {\n        vec2 gridUV = floor(vUv * vec2(20.0, 20.0)) / vec2(20.0, 20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0/20.0, 1.0/20.0);\n        \n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        \n        vec2 pixelToMouseDirection = centerOfPixel - u_mouse;\n        float pixelDistanceToMouse = length(pixelToMouseDirection);\n        float strength = smoothstep(0.3, 0.0, pixelDistanceToMouse);\n \n        vec2 uvOffset = strength * - mouseDirection * 0.2;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 colorR = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n        vec4 colorG = texture2D(u_texture, uv);\n        vec4 colorB = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(colorR.r, colorG.g, colorB.b, 1.0);\n    }\n`;\n\n    //   uniforms\n    let shaderUniforms = {\n      u_mouse: {\n        type: \"v2\",\n        value: new THREE.Vector2()\n      },\n      u_prevMouse: {\n        type: \"v2\",\n        value: new THREE.Vector2()\n      },\n      u_aberrationIntensity: {\n        type: \"f\",\n        value: 0.0\n      }\n      // u_texture: { type: \"t\", value: texture }\n    };\n\n    // 計算滿版平面尺寸\n    // const fov = camera.fov * (Math.PI / 180);\n    // const height = 2 * Math.tan(fov / 2) * camera.position.z;\n    // const width = height * camera.aspect;\n\n    //   creating a plane mesh with materials\n    const planeMesh = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), new THREE.ShaderMaterial({\n      uniforms: shaderUniforms,\n      vertexShader,\n      fragmentShader\n    }));\n\n    // 載入圖片\n    // const texture = new THREE.TextureLoader().load(bannerImg);\n\n    const material = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      uniforms: {\n        shaderUniforms\n      },\n      transparent: true\n    });\n    scene.add(planeMesh);\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n    animate();\n    window.addEventListener('resize', () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","renderer","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","domElement","style","position","inset","zIndex","document","getElementById","appendChild","scene","Scene","camera","PerspectiveCamera","z","vertexShader","fragmentShader","shaderUniforms","u_mouse","type","value","Vector2","u_prevMouse","u_aberrationIntensity","planeMesh","Mesh","PlaneGeometry","ShaderMaterial","uniforms","material","transparent","add","animate","requestAnimationFrame","render","addEventListener","width","height","aspect","updateProjectionMatrix"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n    <img id=\"myImage\" src=\"../assets/2025banner.jpg\" />\n\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n// import vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n// import bannerImg from '../assets/2025banner.jpg';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const renderer = new THREE.WebGLRenderer({ alpha: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.inset = '0';\n    renderer.domElement.style.zIndex = '2';\n    document.getElementById('imageContainer').appendChild(renderer.domElement);\n\n    \n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 5;\n    // shaders\nconst  vertexShader = `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n\nconst fragmentShader = `\n    varying vec2 vUv;\n    uniform sampler2D u_texture;    \n    uniform vec2 u_mouse;\n    uniform vec2 u_prevMouse;\n    uniform float u_aberrationIntensity;\n\n    void main() {\n        vec2 gridUV = floor(vUv * vec2(20.0, 20.0)) / vec2(20.0, 20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0/20.0, 1.0/20.0);\n        \n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        \n        vec2 pixelToMouseDirection = centerOfPixel - u_mouse;\n        float pixelDistanceToMouse = length(pixelToMouseDirection);\n        float strength = smoothstep(0.3, 0.0, pixelDistanceToMouse);\n \n        vec2 uvOffset = strength * - mouseDirection * 0.2;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 colorR = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n        vec4 colorG = texture2D(u_texture, uv);\n        vec4 colorB = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(colorR.r, colorG.g, colorB.b, 1.0);\n    }\n`;\n\n      //   uniforms\n  let shaderUniforms = {\n    u_mouse: { type: \"v2\", value: new THREE.Vector2() },\n    u_prevMouse: { type: \"v2\", value: new THREE.Vector2() },\n    u_aberrationIntensity: { type: \"f\", value: 0.0 },\n    // u_texture: { type: \"t\", value: texture }\n  };\n\n    // 計算滿版平面尺寸\n    // const fov = camera.fov * (Math.PI / 180);\n    // const height = 2 * Math.tan(fov / 2) * camera.position.z;\n    // const width = height * camera.aspect;\n\n  //   creating a plane mesh with materials\n  const planeMesh = new THREE.Mesh(\n    new THREE.PlaneGeometry(2, 2),\n    new THREE.ShaderMaterial({\n      uniforms: shaderUniforms,\n      vertexShader,\n      fragmentShader\n    })\n  );\n\n    // 載入圖片\n    // const texture = new THREE.TextureLoader().load(bannerImg);\n\n    const material = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      uniforms: {\n        shaderUniforms,\n      },\n      transparent: true\n    });\n\n    scene.add(planeMesh);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n};\n</script>\n\n<style>\n\n#imageContainer {\n  position: relative;\n  padding: 0;\n  margin: 0;\n  width: 100vw !important;\n  height:100vh !important;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-width:100%;\n  max-height: 100%;\n}\n#myImage {\n  position: absolute;\n  min-width: 100%;\n  max-height: 100%;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  object-fit:cover; /* 保持比例 */\n  z-index: 1;\n}\n\ncanvas {\n  display: block;\n  z-index: 2;\n  pointer-events: none;\n}\n</style>"],"mappings":"AAQA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B;AACA;AACA;;AAEA,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,OAAOA,CAAA,EAAG;IACR,MAAMC,QAAO,GAAI,IAAIH,KAAK,CAACI,aAAa,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzDF,QAAQ,CAACG,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAC/CL,QAAQ,CAACM,OAAO,CAACF,MAAM,CAACG,UAAU,EAAEH,MAAM,CAACI,WAAW,CAAC;IACvDR,QAAQ,CAACS,UAAU,CAACC,KAAK,CAACC,QAAO,GAAI,UAAU;IAC/CX,QAAQ,CAACS,UAAU,CAACC,KAAK,CAACE,KAAI,GAAI,GAAG;IACrCZ,QAAQ,CAACS,UAAU,CAACC,KAAK,CAACG,MAAK,GAAI,GAAG;IACtCC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC,CAACC,WAAW,CAAChB,QAAQ,CAACS,UAAU,CAAC;IAI1E,MAAMQ,KAAI,GAAI,IAAIpB,KAAK,CAACqB,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAK,GAAI,IAAItB,KAAK,CAACuB,iBAAiB,CACxC,EAAE,EACFhB,MAAM,CAACG,UAAS,GAAIH,MAAM,CAACI,WAAW,EACtC,GAAG,EACH,IACF,CAAC;IACDW,MAAM,CAACR,QAAQ,CAACU,CAAA,GAAI,CAAC;IACrB;IACJ,MAAOC,YAAW,GAAI;;;;;;AAMtB,CAAC;IAED,MAAMC,cAAa,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BvB,CAAC;;IAEK;IACJ,IAAIC,cAAa,GAAI;MACnBC,OAAO,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE,IAAI9B,KAAK,CAAC+B,OAAO,CAAC;MAAE,CAAC;MACnDC,WAAW,EAAE;QAAEH,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE,IAAI9B,KAAK,CAAC+B,OAAO,CAAC;MAAE,CAAC;MACvDE,qBAAqB,EAAE;QAAEJ,IAAI,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAI;MAC/C;IACF,CAAC;;IAEC;IACA;IACA;IACA;;IAEF;IACA,MAAMI,SAAQ,GAAI,IAAIlC,KAAK,CAACmC,IAAI,CAC9B,IAAInC,KAAK,CAACoC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,EAC7B,IAAIpC,KAAK,CAACqC,cAAc,CAAC;MACvBC,QAAQ,EAAEX,cAAc;MACxBF,YAAY;MACZC;IACF,CAAC,CACH,CAAC;;IAEC;IACA;;IAEA,MAAMa,QAAO,GAAI,IAAIvC,KAAK,CAACqC,cAAc,CAAC;MACxCZ,YAAY;MACZC,cAAc;MACdY,QAAQ,EAAE;QACRX;MACF,CAAC;MACDa,WAAW,EAAE;IACf,CAAC,CAAC;IAEFpB,KAAK,CAACqB,GAAG,CAACP,SAAS,CAAC;IAEpB,SAASQ,OAAOA,CAAA,EAAG;MACjBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BvC,QAAQ,CAACyC,MAAM,CAACxB,KAAK,EAAEE,MAAM,CAAC;IAChC;IAEAoB,OAAO,CAAC,CAAC;IAETnC,MAAM,CAACsC,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtC,MAAMC,KAAI,GAAIvC,MAAM,CAACG,UAAU;MAC/B,MAAMqC,MAAK,GAAIxC,MAAM,CAACI,WAAW;MACjCR,QAAQ,CAACM,OAAO,CAACqC,KAAK,EAAEC,MAAM,CAAC;MAC/BzB,MAAM,CAAC0B,MAAK,GAAIF,KAAI,GAAIC,MAAM;MAC9BzB,MAAM,CAAC2B,sBAAsB,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}