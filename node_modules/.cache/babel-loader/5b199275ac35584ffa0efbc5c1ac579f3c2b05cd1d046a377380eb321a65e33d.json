{"ast":null,"code":"function containsNewline(key) {\n  if (!key) return null;\n  switch (key.type) {\n    case 'alias':\n    case 'scalar':\n    case 'double-quoted-scalar':\n    case 'single-quoted-scalar':\n      if (key.source.includes('\\n')) return true;\n      if (key.end) for (const st of key.end) if (st.type === 'newline') return true;\n      return false;\n    case 'flow-collection':\n      for (const it of key.items) {\n        for (const st of it.start) if (st.type === 'newline') return true;\n        if (it.sep) for (const st of it.sep) if (st.type === 'newline') return true;\n        if (containsNewline(it.key) || containsNewline(it.value)) return true;\n      }\n      return false;\n    default:\n      return true;\n  }\n}\nexport { containsNewline };","map":{"version":3,"names":["containsNewline","key","type","source","includes","end","st","it","items","start","sep","value"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/compose/util-contains-newline.js"],"sourcesContent":["function containsNewline(key) {\n    if (!key)\n        return null;\n    switch (key.type) {\n        case 'alias':\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            if (key.source.includes('\\n'))\n                return true;\n            if (key.end)\n                for (const st of key.end)\n                    if (st.type === 'newline')\n                        return true;\n            return false;\n        case 'flow-collection':\n            for (const it of key.items) {\n                for (const st of it.start)\n                    if (st.type === 'newline')\n                        return true;\n                if (it.sep)\n                    for (const st of it.sep)\n                        if (st.type === 'newline')\n                            return true;\n                if (containsNewline(it.key) || containsNewline(it.value))\n                    return true;\n            }\n            return false;\n        default:\n            return true;\n    }\n}\n\nexport { containsNewline };\n"],"mappings":"AAAA,SAASA,eAAeA,CAACC,GAAG,EAAE;EAC1B,IAAI,CAACA,GAAG,EACJ,OAAO,IAAI;EACf,QAAQA,GAAG,CAACC,IAAI;IACZ,KAAK,OAAO;IACZ,KAAK,QAAQ;IACb,KAAK,sBAAsB;IAC3B,KAAK,sBAAsB;MACvB,IAAID,GAAG,CAACE,MAAM,CAACC,QAAQ,CAAC,IAAI,CAAC,EACzB,OAAO,IAAI;MACf,IAAIH,GAAG,CAACI,GAAG,EACP,KAAK,MAAMC,EAAE,IAAIL,GAAG,CAACI,GAAG,EACpB,IAAIC,EAAE,CAACJ,IAAI,KAAK,SAAS,EACrB,OAAO,IAAI;MACvB,OAAO,KAAK;IAChB,KAAK,iBAAiB;MAClB,KAAK,MAAMK,EAAE,IAAIN,GAAG,CAACO,KAAK,EAAE;QACxB,KAAK,MAAMF,EAAE,IAAIC,EAAE,CAACE,KAAK,EACrB,IAAIH,EAAE,CAACJ,IAAI,KAAK,SAAS,EACrB,OAAO,IAAI;QACnB,IAAIK,EAAE,CAACG,GAAG,EACN,KAAK,MAAMJ,EAAE,IAAIC,EAAE,CAACG,GAAG,EACnB,IAAIJ,EAAE,CAACJ,IAAI,KAAK,SAAS,EACrB,OAAO,IAAI;QACvB,IAAIF,eAAe,CAACO,EAAE,CAACN,GAAG,CAAC,IAAID,eAAe,CAACO,EAAE,CAACI,KAAK,CAAC,EACpD,OAAO,IAAI;MACnB;MACA,OAAO,KAAK;IAChB;MACI,OAAO,IAAI;EACnB;AACJ;AAEA,SAASX,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}