{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../assets/2025banner.jpg';\nconst _hoisted_1 = {\n  id: \"imageContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _cache[0] || (_cache[0] = [_createElementVNode(\"img\", {\n    id: \"myImage\",\n    src: _imports_0\n  }, null, -1 /* CACHED */)]));\n}","map":{"version":3,"names":["_imports_0","id","_createElementBlock","_hoisted_1","_cache","_createElementVNode","src"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n\n<div id=\"imageContainer\">\n  <img id=\"myImage\" src=\"../assets/2025banner.jpg\">\n</div>\n</template>\n\n<script>\nimport THREE from 'three';\nimport { FaceNormalsHelper } from 'three.js';\nconst imageContainer = document.getElementById(\"imageContainer\");\nconst imageElement = document.getElementById(\"myImage\");\n\nlet scene;camera;renderer;planeMesh;\nlet isHovered = false;\nlet hoverDuration = 0;\n\nconst ANIMATION_CONFIG =  {\n  updateFrequency:0.1,\n  glitchIntensityMod:0.5\n};\n\nconst vertexShader = `\n    varying vec2 vUv;\n    void main() {\n       vUv = uv;\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n   }\n`;\nconst fragmentShader = `\n  uniform sampler2D tDiffuse;\n  uniform float glitchIntensity;\n  varying vec2 vUv;\n\n  void main() {\n    vec2 uv = vUv;\n    vec4 baseState = texture2D(tDiffuse, uv);\n\n    if (glitchIntensity > 0.0) {\n        float segment = floor(uv.y * 12.0); \n        float randomValue = fract(sin(segment * 12345.6789 + glitchIntensity) * 43758.5453); \n        vec2 offset = vec2(randomValue * 0.03, 0.0) * glitchIntensity;\n\n        vec4 redGlitch = texture2D(tDiffuse, uv + offset);\n        vec4 greenGlitch = texture2D(tDiffuse, uv - offset);\n        vec4 blueGlitch = texture2D(tDiffuse, uv);\n\n        if (mod(segment, 3.0) == 0.0) {\n            gl_FragColor = vec4(redGlitch.r, greenGlitch.g, baseState.b, 1.0);\n        } else if (mod(segment, 3.0) == 1.0) {\n            gl_FragColor = vec4(baseState.r, greenGlitch.g, blueGlitch.b, 1.0);\n        } else {\n            gl_FragColor = vec4(redGlitch.r, baseState.g, blueGlitch.b, 1.0);\n        }\n    } else {\n        gl_FragColor = baseState; \n    }\n}\n\n`;\n\n\n\nexport default{\n  name:'Ban-ner',\n}\n\n</script>\n\n\n<style>\n#imageContainer{\n  position:relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-width: 100%;\n  filter:saturate(0);\n  transition: all ease 0.5s;\n}\n#imageContainer:hover{\n  filter: saturate(100%);\n}\n#imagerContainer > * {\n  position: absolute;\n  inset:0;\n  width:100% !important;\n  height: 100% !important;\n  object-fit: cover;\n}\n#myImage{\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n</style>"],"mappings":";OAGoBA,UAA8B;;EAD7CC,EAAE,EAAC;AAAgB;;uBAAxBC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJC,mBAAA,CAAiD;IAA5CJ,EAAE,EAAC,SAAS;IAACK,GAA8B,EAA9BN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}