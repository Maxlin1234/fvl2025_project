{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../assets/2025banner.jpg';\nconst _hoisted_1 = {\n  id: \"imageContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _cache[0] || (_cache[0] = [_createElementVNode(\"img\", {\n    id: \"myImage\",\n    src: _imports_0\n  }, null, -1 /* CACHED */)]));\n}","map":{"version":3,"names":["_imports_0","id","_createElementBlock","_hoisted_1","_cache","_createElementVNode","src"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n    <img id=\"myImage\" src=\"../assets/2025banner.jpg\">\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { Color } from 'three.js';\n// import vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = document.getElementById('imageContainer');\n\n    const renderer = new THREE.WebGLRenderer({ alpha: true }); // 透明背景\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    container.appendChild(renderer.domElement);\n\n    const scene = new THREE.Scene();\n\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      container.clientWidth / container.clientHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 1;\n\n    const plane = new THREE.Mesh(\n      new THREE.PlaneGeometry(2, 2),\n      // new THREE.ShaderMaterial({\n      //   transparent: true,\n      // })\n      \n    );\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00, side: THREE.DoubleSide });\n    scene.add(plane);\n\n\n\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    // Resize handling\n    window.addEventListener('resize', () => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n}\n</script>\n\n<style>\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  filter: saturate(0);\n  transition: all ease 0.5s;\n}\n\n#imageContainer:hover {\n  filter: saturate(100%);\n}\n\n#imageContainer > * {\n  position: absolute;\n  inset: 0;\n  width: 100% !important;\n  height: 100% !important;\n  object-fit: cover;\n}\n\n#myImage {\n  z-index: 1;\n}\n\ncanvas {\n  z-index: 2;\n  pointer-events: none; /* 讓滑鼠事件穿透 canvas */\n}\n\n</style>"],"mappings":";OAEsBA,UAA8B;;EAD7CC,EAAE,EAAC;AAAgB;;uBAAxBC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJC,mBAAA,CAAiD;IAA5CJ,EAAE,EAAC,SAAS;IAACK,GAA8B,EAA9BN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}