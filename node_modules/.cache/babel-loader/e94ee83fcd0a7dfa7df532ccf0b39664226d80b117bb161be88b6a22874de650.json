{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { extname, win32, posix, isAbsolute, resolve } from 'path';\nimport { walk } from 'estree-walker';\nimport pm from 'picomatch';\nconst addExtension = function addExtension(filename, ext = '.js') {\n  let result = `${filename}`;\n  if (!extname(filename)) result += ext;\n  return result;\n};\nconst extractors = {\n  ArrayPattern(names, param) {\n    for (const element of param.elements) {\n      if (element) extractors[element.type](names, element);\n    }\n  },\n  AssignmentPattern(names, param) {\n    extractors[param.left.type](names, param.left);\n  },\n  Identifier(names, param) {\n    names.push(param.name);\n  },\n  MemberExpression() {},\n  ObjectPattern(names, param) {\n    for (const prop of param.properties) {\n      // @ts-ignore Typescript reports that this is not a valid type\n      if (prop.type === 'RestElement') {\n        extractors.RestElement(names, prop);\n      } else {\n        extractors[prop.value.type](names, prop.value);\n      }\n    }\n  },\n  RestElement(names, param) {\n    extractors[param.argument.type](names, param.argument);\n  }\n};\nconst extractAssignedNames = function extractAssignedNames(param) {\n  const names = [];\n  extractors[param.type](names, param);\n  return names;\n};\nconst blockDeclarations = {\n  const: true,\n  let: true\n};\nclass Scope {\n  constructor(options = {}) {\n    this.parent = options.parent;\n    this.isBlockScope = !!options.block;\n    this.declarations = Object.create(null);\n    if (options.params) {\n      options.params.forEach(param => {\n        extractAssignedNames(param).forEach(name => {\n          this.declarations[name] = true;\n        });\n      });\n    }\n  }\n  addDeclaration(node, isBlockDeclaration, isVar) {\n    if (!isBlockDeclaration && this.isBlockScope) {\n      // it's a `var` or function node, and this\n      // is a block scope, so we need to go up\n      this.parent.addDeclaration(node, isBlockDeclaration, isVar);\n    } else if (node.id) {\n      extractAssignedNames(node.id).forEach(name => {\n        this.declarations[name] = true;\n      });\n    }\n  }\n  contains(name) {\n    return this.declarations[name] || (this.parent ? this.parent.contains(name) : false);\n  }\n}\nconst attachScopes = function attachScopes(ast, propertyName = 'scope') {\n  let scope = new Scope();\n  walk(ast, {\n    enter(n, parent) {\n      const node = n;\n      // function foo () {...}\n      // class Foo {...}\n      if (/(?:Function|Class)Declaration/.test(node.type)) {\n        scope.addDeclaration(node, false, false);\n      }\n      // var foo = 1\n      if (node.type === 'VariableDeclaration') {\n        const {\n          kind\n        } = node;\n        const isBlockDeclaration = blockDeclarations[kind];\n        node.declarations.forEach(declaration => {\n          scope.addDeclaration(declaration, isBlockDeclaration, true);\n        });\n      }\n      let newScope;\n      // create new function scope\n      if (node.type.includes('Function')) {\n        const func = node;\n        newScope = new Scope({\n          parent: scope,\n          block: false,\n          params: func.params\n        });\n        // named function expressions - the name is considered\n        // part of the function's scope\n        if (func.type === 'FunctionExpression' && func.id) {\n          newScope.addDeclaration(func, false, false);\n        }\n      }\n      // create new for scope\n      if (/For(?:In|Of)?Statement/.test(node.type)) {\n        newScope = new Scope({\n          parent: scope,\n          block: true\n        });\n      }\n      // create new block scope\n      if (node.type === 'BlockStatement' && !parent.type.includes('Function')) {\n        newScope = new Scope({\n          parent: scope,\n          block: true\n        });\n      }\n      // catch clause has its own block scope\n      if (node.type === 'CatchClause') {\n        newScope = new Scope({\n          parent: scope,\n          params: node.param ? [node.param] : [],\n          block: true\n        });\n      }\n      if (newScope) {\n        Object.defineProperty(node, propertyName, {\n          value: newScope,\n          configurable: true\n        });\n        scope = newScope;\n      }\n    },\n    leave(n) {\n      const node = n;\n      if (node[propertyName]) scope = scope.parent;\n    }\n  });\n  return scope;\n};\n\n// Helper since Typescript can't detect readonly arrays with Array.isArray\nfunction isArray(arg) {\n  return Array.isArray(arg);\n}\nfunction ensureArray(thing) {\n  if (isArray(thing)) return thing;\n  if (thing == null) return [];\n  return [thing];\n}\nconst normalizePathRegExp = new RegExp(`\\\\${win32.sep}`, 'g');\nconst normalizePath = function normalizePath(filename) {\n  return filename.replace(normalizePathRegExp, posix.sep);\n};\nfunction getMatcherString(id, resolutionBase) {\n  if (resolutionBase === false || isAbsolute(id) || id.startsWith('**')) {\n    return normalizePath(id);\n  }\n  // resolve('') is valid and will default to process.cwd()\n  const basePath = normalizePath(resolve(resolutionBase || ''))\n  // escape all possible (posix + win) path characters that might interfere with regex\n  .replace(/[-^$*+?.()|[\\]{}]/g, '\\\\$&');\n  // Note that we use posix.join because:\n  // 1. the basePath has been normalized to use /\n  // 2. the incoming glob (id) matcher, also uses /\n  // otherwise Node will force backslash (\\) on windows\n  return posix.join(basePath, normalizePath(id));\n}\nconst createFilter = function createFilter(include, exclude, options) {\n  const resolutionBase = options && options.resolve;\n  const getMatcher = id => id instanceof RegExp ? id : {\n    test: what => {\n      // this refactor is a tad overly verbose but makes for easy debugging\n      const pattern = getMatcherString(id, resolutionBase);\n      const fn = pm(pattern, {\n        dot: true\n      });\n      const result = fn(what);\n      return result;\n    }\n  };\n  const includeMatchers = ensureArray(include).map(getMatcher);\n  const excludeMatchers = ensureArray(exclude).map(getMatcher);\n  if (!includeMatchers.length && !excludeMatchers.length) return id => typeof id === 'string' && !id.includes('\\0');\n  return function result(id) {\n    if (typeof id !== 'string') return false;\n    if (id.includes('\\0')) return false;\n    const pathId = normalizePath(id);\n    for (let i = 0; i < excludeMatchers.length; ++i) {\n      const matcher = excludeMatchers[i];\n      if (matcher instanceof RegExp) {\n        matcher.lastIndex = 0;\n      }\n      if (matcher.test(pathId)) return false;\n    }\n    for (let i = 0; i < includeMatchers.length; ++i) {\n      const matcher = includeMatchers[i];\n      if (matcher instanceof RegExp) {\n        matcher.lastIndex = 0;\n      }\n      if (matcher.test(pathId)) return true;\n    }\n    return !includeMatchers.length;\n  };\n};\nconst reservedWords = 'break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public';\nconst builtins = 'arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl';\nconst forbiddenIdentifiers = new Set(`${reservedWords} ${builtins}`.split(' '));\nforbiddenIdentifiers.add('');\nconst makeLegalIdentifier = function makeLegalIdentifier(str) {\n  let identifier = str.replace(/-(\\w)/g, (_, letter) => letter.toUpperCase()).replace(/[^$_a-zA-Z0-9]/g, '_');\n  if (/\\d/.test(identifier[0]) || forbiddenIdentifiers.has(identifier)) {\n    identifier = `_${identifier}`;\n  }\n  return identifier || '_';\n};\nfunction stringify(obj) {\n  return (JSON.stringify(obj) || 'undefined').replace(/[\\u2028\\u2029]/g, char => `\\\\u${`000${char.charCodeAt(0).toString(16)}`.slice(-4)}`);\n}\nfunction serializeArray(arr, indent, baseIndent) {\n  let output = '[';\n  const separator = indent ? `\\n${baseIndent}${indent}` : '';\n  for (let i = 0; i < arr.length; i++) {\n    const key = arr[i];\n    output += `${i > 0 ? ',' : ''}${separator}${serialize(key, indent, baseIndent + indent)}`;\n  }\n  return `${output}${indent ? `\\n${baseIndent}` : ''}]`;\n}\nfunction serializeObject(obj, indent, baseIndent) {\n  let output = '{';\n  const separator = indent ? `\\n${baseIndent}${indent}` : '';\n  const entries = Object.entries(obj);\n  for (let i = 0; i < entries.length; i++) {\n    const [key, value] = entries[i];\n    const stringKey = makeLegalIdentifier(key) === key ? key : stringify(key);\n    output += `${i > 0 ? ',' : ''}${separator}${stringKey}:${indent ? ' ' : ''}${serialize(value, indent, baseIndent + indent)}`;\n  }\n  return `${output}${indent ? `\\n${baseIndent}` : ''}}`;\n}\nfunction serialize(obj, indent, baseIndent) {\n  if (typeof obj === 'object' && obj !== null) {\n    if (Array.isArray(obj)) return serializeArray(obj, indent, baseIndent);\n    if (obj instanceof Date) return `new Date(${obj.getTime()})`;\n    if (obj instanceof RegExp) return obj.toString();\n    return serializeObject(obj, indent, baseIndent);\n  }\n  if (typeof obj === 'number') {\n    if (obj === Infinity) return 'Infinity';\n    if (obj === -Infinity) return '-Infinity';\n    if (obj === 0) return 1 / obj === Infinity ? '0' : '-0';\n    if (obj !== obj) return 'NaN'; // eslint-disable-line no-self-compare\n  }\n  if (typeof obj === 'symbol') {\n    const key = Symbol.keyFor(obj);\n    // eslint-disable-next-line no-undefined\n    if (key !== undefined) return `Symbol.for(${stringify(key)})`;\n  }\n  if (typeof obj === 'bigint') return `${obj}n`;\n  return stringify(obj);\n}\n// isWellFormed exists from Node.js 20\nconst hasStringIsWellFormed = 'isWellFormed' in String.prototype;\nfunction isWellFormedString(input) {\n  // @ts-expect-error String::isWellFormed exists from ES2024. tsconfig lib is set to ES6\n  if (hasStringIsWellFormed) return input.isWellFormed();\n  // https://github.com/tc39/proposal-is-usv-string/blob/main/README.md#algorithm\n  return !/\\p{Surrogate}/u.test(input);\n}\nconst dataToEsm = function dataToEsm(data, options = {}) {\n  var _a, _b;\n  const t = options.compact ? '' : 'indent' in options ? options.indent : '\\t';\n  const _ = options.compact ? '' : ' ';\n  const n = options.compact ? '' : '\\n';\n  const declarationType = options.preferConst ? 'const' : 'var';\n  if (options.namedExports === false || typeof data !== 'object' || Array.isArray(data) || data instanceof Date || data instanceof RegExp || data === null) {\n    const code = serialize(data, options.compact ? null : t, '');\n    const magic = _ || (/^[{[\\-\\/]/.test(code) ? '' : ' '); // eslint-disable-line no-useless-escape\n    return `export default${magic}${code};`;\n  }\n  let maxUnderbarPrefixLength = 0;\n  for (const key of Object.keys(data)) {\n    const underbarPrefixLength = (_b = (_a = /^(_+)/.exec(key)) === null || _a === void 0 ? void 0 : _a[0].length) !== null && _b !== void 0 ? _b : 0;\n    if (underbarPrefixLength > maxUnderbarPrefixLength) {\n      maxUnderbarPrefixLength = underbarPrefixLength;\n    }\n  }\n  const arbitraryNamePrefix = `${'_'.repeat(maxUnderbarPrefixLength + 1)}arbitrary`;\n  let namedExportCode = '';\n  const defaultExportRows = [];\n  const arbitraryNameExportRows = [];\n  for (const [key, value] of Object.entries(data)) {\n    if (key === makeLegalIdentifier(key)) {\n      if (options.objectShorthand) defaultExportRows.push(key);else defaultExportRows.push(`${key}:${_}${key}`);\n      namedExportCode += `export ${declarationType} ${key}${_}=${_}${serialize(value, options.compact ? null : t, '')};${n}`;\n    } else {\n      defaultExportRows.push(`${stringify(key)}:${_}${serialize(value, options.compact ? null : t, '')}`);\n      if (options.includeArbitraryNames && isWellFormedString(key)) {\n        const variableName = `${arbitraryNamePrefix}${arbitraryNameExportRows.length}`;\n        namedExportCode += `${declarationType} ${variableName}${_}=${_}${serialize(value, options.compact ? null : t, '')};${n}`;\n        arbitraryNameExportRows.push(`${variableName} as ${JSON.stringify(key)}`);\n      }\n    }\n  }\n  const arbitraryExportCode = arbitraryNameExportRows.length > 0 ? `export${_}{${n}${t}${arbitraryNameExportRows.join(`,${n}${t}`)}${n}};${n}` : '';\n  const defaultExportCode = `export default${_}{${n}${t}${defaultExportRows.join(`,${n}${t}`)}${n}};${n}`;\n  return `${namedExportCode}${arbitraryExportCode}${defaultExportCode}`;\n};\nfunction exactRegex(str, flags) {\n  return new RegExp(`^${escapeRegex(str)}$`, flags);\n}\nfunction prefixRegex(str, flags) {\n  return new RegExp(`^${escapeRegex(str)}`, flags);\n}\nconst escapeRegexRE = /[-/\\\\^$*+?.()|[\\]{}]/g;\nfunction escapeRegex(str) {\n  return str.replace(escapeRegexRE, '\\\\$&');\n}\n\n// TODO: remove this in next major\nvar index = {\n  addExtension,\n  attachScopes,\n  createFilter,\n  dataToEsm,\n  exactRegex,\n  extractAssignedNames,\n  makeLegalIdentifier,\n  normalizePath,\n  prefixRegex\n};\nexport { addExtension, attachScopes, createFilter, dataToEsm, index as default, exactRegex, extractAssignedNames, makeLegalIdentifier, normalizePath, prefixRegex };","map":{"version":3,"names":["extname","win32","posix","isAbsolute","resolve","walk","pm","addExtension","filename","ext","result","extractors","ArrayPattern","names","param","element","elements","type","AssignmentPattern","left","Identifier","push","name","MemberExpression","ObjectPattern","prop","properties","RestElement","value","argument","extractAssignedNames","blockDeclarations","const","let","Scope","constructor","options","parent","isBlockScope","block","declarations","Object","create","params","forEach","addDeclaration","node","isBlockDeclaration","isVar","id","contains","attachScopes","ast","propertyName","scope","enter","n","test","kind","declaration","newScope","includes","func","defineProperty","configurable","leave","isArray","arg","Array","ensureArray","thing","normalizePathRegExp","RegExp","sep","normalizePath","replace","getMatcherString","resolutionBase","startsWith","basePath","join","createFilter","include","exclude","getMatcher","what","pattern","fn","dot","includeMatchers","map","excludeMatchers","length","pathId","i","matcher","lastIndex","reservedWords","builtins","forbiddenIdentifiers","Set","split","add","makeLegalIdentifier","str","identifier","_","letter","toUpperCase","has","stringify","obj","JSON","char","charCodeAt","toString","slice","serializeArray","arr","indent","baseIndent","output","separator","key","serialize","serializeObject","entries","stringKey","Date","getTime","Infinity","Symbol","keyFor","undefined","hasStringIsWellFormed","String","prototype","isWellFormedString","input","isWellFormed","dataToEsm","data","_a","_b","t","compact","declarationType","preferConst","namedExports","code","magic","maxUnderbarPrefixLength","keys","underbarPrefixLength","exec","arbitraryNamePrefix","repeat","namedExportCode","defaultExportRows","arbitraryNameExportRows","objectShorthand","includeArbitraryNames","variableName","arbitraryExportCode","defaultExportCode","exactRegex","flags","escapeRegex","prefixRegex","escapeRegexRE","index","default"],"sources":["/Users/linhankuan/fvl2025/node_modules/@rollup/pluginutils/dist/es/index.js"],"sourcesContent":["import { extname, win32, posix, isAbsolute, resolve } from 'path';\nimport { walk } from 'estree-walker';\nimport pm from 'picomatch';\n\nconst addExtension = function addExtension(filename, ext = '.js') {\n    let result = `${filename}`;\n    if (!extname(filename))\n        result += ext;\n    return result;\n};\n\nconst extractors = {\n    ArrayPattern(names, param) {\n        for (const element of param.elements) {\n            if (element)\n                extractors[element.type](names, element);\n        }\n    },\n    AssignmentPattern(names, param) {\n        extractors[param.left.type](names, param.left);\n    },\n    Identifier(names, param) {\n        names.push(param.name);\n    },\n    MemberExpression() { },\n    ObjectPattern(names, param) {\n        for (const prop of param.properties) {\n            // @ts-ignore Typescript reports that this is not a valid type\n            if (prop.type === 'RestElement') {\n                extractors.RestElement(names, prop);\n            }\n            else {\n                extractors[prop.value.type](names, prop.value);\n            }\n        }\n    },\n    RestElement(names, param) {\n        extractors[param.argument.type](names, param.argument);\n    }\n};\nconst extractAssignedNames = function extractAssignedNames(param) {\n    const names = [];\n    extractors[param.type](names, param);\n    return names;\n};\n\nconst blockDeclarations = {\n    const: true,\n    let: true\n};\nclass Scope {\n    constructor(options = {}) {\n        this.parent = options.parent;\n        this.isBlockScope = !!options.block;\n        this.declarations = Object.create(null);\n        if (options.params) {\n            options.params.forEach((param) => {\n                extractAssignedNames(param).forEach((name) => {\n                    this.declarations[name] = true;\n                });\n            });\n        }\n    }\n    addDeclaration(node, isBlockDeclaration, isVar) {\n        if (!isBlockDeclaration && this.isBlockScope) {\n            // it's a `var` or function node, and this\n            // is a block scope, so we need to go up\n            this.parent.addDeclaration(node, isBlockDeclaration, isVar);\n        }\n        else if (node.id) {\n            extractAssignedNames(node.id).forEach((name) => {\n                this.declarations[name] = true;\n            });\n        }\n    }\n    contains(name) {\n        return this.declarations[name] || (this.parent ? this.parent.contains(name) : false);\n    }\n}\nconst attachScopes = function attachScopes(ast, propertyName = 'scope') {\n    let scope = new Scope();\n    walk(ast, {\n        enter(n, parent) {\n            const node = n;\n            // function foo () {...}\n            // class Foo {...}\n            if (/(?:Function|Class)Declaration/.test(node.type)) {\n                scope.addDeclaration(node, false, false);\n            }\n            // var foo = 1\n            if (node.type === 'VariableDeclaration') {\n                const { kind } = node;\n                const isBlockDeclaration = blockDeclarations[kind];\n                node.declarations.forEach((declaration) => {\n                    scope.addDeclaration(declaration, isBlockDeclaration, true);\n                });\n            }\n            let newScope;\n            // create new function scope\n            if (node.type.includes('Function')) {\n                const func = node;\n                newScope = new Scope({\n                    parent: scope,\n                    block: false,\n                    params: func.params\n                });\n                // named function expressions - the name is considered\n                // part of the function's scope\n                if (func.type === 'FunctionExpression' && func.id) {\n                    newScope.addDeclaration(func, false, false);\n                }\n            }\n            // create new for scope\n            if (/For(?:In|Of)?Statement/.test(node.type)) {\n                newScope = new Scope({\n                    parent: scope,\n                    block: true\n                });\n            }\n            // create new block scope\n            if (node.type === 'BlockStatement' && !parent.type.includes('Function')) {\n                newScope = new Scope({\n                    parent: scope,\n                    block: true\n                });\n            }\n            // catch clause has its own block scope\n            if (node.type === 'CatchClause') {\n                newScope = new Scope({\n                    parent: scope,\n                    params: node.param ? [node.param] : [],\n                    block: true\n                });\n            }\n            if (newScope) {\n                Object.defineProperty(node, propertyName, {\n                    value: newScope,\n                    configurable: true\n                });\n                scope = newScope;\n            }\n        },\n        leave(n) {\n            const node = n;\n            if (node[propertyName])\n                scope = scope.parent;\n        }\n    });\n    return scope;\n};\n\n// Helper since Typescript can't detect readonly arrays with Array.isArray\nfunction isArray(arg) {\n    return Array.isArray(arg);\n}\nfunction ensureArray(thing) {\n    if (isArray(thing))\n        return thing;\n    if (thing == null)\n        return [];\n    return [thing];\n}\n\nconst normalizePathRegExp = new RegExp(`\\\\${win32.sep}`, 'g');\nconst normalizePath = function normalizePath(filename) {\n    return filename.replace(normalizePathRegExp, posix.sep);\n};\n\nfunction getMatcherString(id, resolutionBase) {\n    if (resolutionBase === false || isAbsolute(id) || id.startsWith('**')) {\n        return normalizePath(id);\n    }\n    // resolve('') is valid and will default to process.cwd()\n    const basePath = normalizePath(resolve(resolutionBase || ''))\n        // escape all possible (posix + win) path characters that might interfere with regex\n        .replace(/[-^$*+?.()|[\\]{}]/g, '\\\\$&');\n    // Note that we use posix.join because:\n    // 1. the basePath has been normalized to use /\n    // 2. the incoming glob (id) matcher, also uses /\n    // otherwise Node will force backslash (\\) on windows\n    return posix.join(basePath, normalizePath(id));\n}\nconst createFilter = function createFilter(include, exclude, options) {\n    const resolutionBase = options && options.resolve;\n    const getMatcher = (id) => id instanceof RegExp\n        ? id\n        : {\n            test: (what) => {\n                // this refactor is a tad overly verbose but makes for easy debugging\n                const pattern = getMatcherString(id, resolutionBase);\n                const fn = pm(pattern, { dot: true });\n                const result = fn(what);\n                return result;\n            }\n        };\n    const includeMatchers = ensureArray(include).map(getMatcher);\n    const excludeMatchers = ensureArray(exclude).map(getMatcher);\n    if (!includeMatchers.length && !excludeMatchers.length)\n        return (id) => typeof id === 'string' && !id.includes('\\0');\n    return function result(id) {\n        if (typeof id !== 'string')\n            return false;\n        if (id.includes('\\0'))\n            return false;\n        const pathId = normalizePath(id);\n        for (let i = 0; i < excludeMatchers.length; ++i) {\n            const matcher = excludeMatchers[i];\n            if (matcher instanceof RegExp) {\n                matcher.lastIndex = 0;\n            }\n            if (matcher.test(pathId))\n                return false;\n        }\n        for (let i = 0; i < includeMatchers.length; ++i) {\n            const matcher = includeMatchers[i];\n            if (matcher instanceof RegExp) {\n                matcher.lastIndex = 0;\n            }\n            if (matcher.test(pathId))\n                return true;\n        }\n        return !includeMatchers.length;\n    };\n};\n\nconst reservedWords = 'break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public';\nconst builtins = 'arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl';\nconst forbiddenIdentifiers = new Set(`${reservedWords} ${builtins}`.split(' '));\nforbiddenIdentifiers.add('');\nconst makeLegalIdentifier = function makeLegalIdentifier(str) {\n    let identifier = str\n        .replace(/-(\\w)/g, (_, letter) => letter.toUpperCase())\n        .replace(/[^$_a-zA-Z0-9]/g, '_');\n    if (/\\d/.test(identifier[0]) || forbiddenIdentifiers.has(identifier)) {\n        identifier = `_${identifier}`;\n    }\n    return identifier || '_';\n};\n\nfunction stringify(obj) {\n    return (JSON.stringify(obj) || 'undefined').replace(/[\\u2028\\u2029]/g, (char) => `\\\\u${`000${char.charCodeAt(0).toString(16)}`.slice(-4)}`);\n}\nfunction serializeArray(arr, indent, baseIndent) {\n    let output = '[';\n    const separator = indent ? `\\n${baseIndent}${indent}` : '';\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i];\n        output += `${i > 0 ? ',' : ''}${separator}${serialize(key, indent, baseIndent + indent)}`;\n    }\n    return `${output}${indent ? `\\n${baseIndent}` : ''}]`;\n}\nfunction serializeObject(obj, indent, baseIndent) {\n    let output = '{';\n    const separator = indent ? `\\n${baseIndent}${indent}` : '';\n    const entries = Object.entries(obj);\n    for (let i = 0; i < entries.length; i++) {\n        const [key, value] = entries[i];\n        const stringKey = makeLegalIdentifier(key) === key ? key : stringify(key);\n        output += `${i > 0 ? ',' : ''}${separator}${stringKey}:${indent ? ' ' : ''}${serialize(value, indent, baseIndent + indent)}`;\n    }\n    return `${output}${indent ? `\\n${baseIndent}` : ''}}`;\n}\nfunction serialize(obj, indent, baseIndent) {\n    if (typeof obj === 'object' && obj !== null) {\n        if (Array.isArray(obj))\n            return serializeArray(obj, indent, baseIndent);\n        if (obj instanceof Date)\n            return `new Date(${obj.getTime()})`;\n        if (obj instanceof RegExp)\n            return obj.toString();\n        return serializeObject(obj, indent, baseIndent);\n    }\n    if (typeof obj === 'number') {\n        if (obj === Infinity)\n            return 'Infinity';\n        if (obj === -Infinity)\n            return '-Infinity';\n        if (obj === 0)\n            return 1 / obj === Infinity ? '0' : '-0';\n        if (obj !== obj)\n            return 'NaN'; // eslint-disable-line no-self-compare\n    }\n    if (typeof obj === 'symbol') {\n        const key = Symbol.keyFor(obj);\n        // eslint-disable-next-line no-undefined\n        if (key !== undefined)\n            return `Symbol.for(${stringify(key)})`;\n    }\n    if (typeof obj === 'bigint')\n        return `${obj}n`;\n    return stringify(obj);\n}\n// isWellFormed exists from Node.js 20\nconst hasStringIsWellFormed = 'isWellFormed' in String.prototype;\nfunction isWellFormedString(input) {\n    // @ts-expect-error String::isWellFormed exists from ES2024. tsconfig lib is set to ES6\n    if (hasStringIsWellFormed)\n        return input.isWellFormed();\n    // https://github.com/tc39/proposal-is-usv-string/blob/main/README.md#algorithm\n    return !/\\p{Surrogate}/u.test(input);\n}\nconst dataToEsm = function dataToEsm(data, options = {}) {\n    var _a, _b;\n    const t = options.compact ? '' : 'indent' in options ? options.indent : '\\t';\n    const _ = options.compact ? '' : ' ';\n    const n = options.compact ? '' : '\\n';\n    const declarationType = options.preferConst ? 'const' : 'var';\n    if (options.namedExports === false ||\n        typeof data !== 'object' ||\n        Array.isArray(data) ||\n        data instanceof Date ||\n        data instanceof RegExp ||\n        data === null) {\n        const code = serialize(data, options.compact ? null : t, '');\n        const magic = _ || (/^[{[\\-\\/]/.test(code) ? '' : ' '); // eslint-disable-line no-useless-escape\n        return `export default${magic}${code};`;\n    }\n    let maxUnderbarPrefixLength = 0;\n    for (const key of Object.keys(data)) {\n        const underbarPrefixLength = (_b = (_a = /^(_+)/.exec(key)) === null || _a === void 0 ? void 0 : _a[0].length) !== null && _b !== void 0 ? _b : 0;\n        if (underbarPrefixLength > maxUnderbarPrefixLength) {\n            maxUnderbarPrefixLength = underbarPrefixLength;\n        }\n    }\n    const arbitraryNamePrefix = `${'_'.repeat(maxUnderbarPrefixLength + 1)}arbitrary`;\n    let namedExportCode = '';\n    const defaultExportRows = [];\n    const arbitraryNameExportRows = [];\n    for (const [key, value] of Object.entries(data)) {\n        if (key === makeLegalIdentifier(key)) {\n            if (options.objectShorthand)\n                defaultExportRows.push(key);\n            else\n                defaultExportRows.push(`${key}:${_}${key}`);\n            namedExportCode += `export ${declarationType} ${key}${_}=${_}${serialize(value, options.compact ? null : t, '')};${n}`;\n        }\n        else {\n            defaultExportRows.push(`${stringify(key)}:${_}${serialize(value, options.compact ? null : t, '')}`);\n            if (options.includeArbitraryNames && isWellFormedString(key)) {\n                const variableName = `${arbitraryNamePrefix}${arbitraryNameExportRows.length}`;\n                namedExportCode += `${declarationType} ${variableName}${_}=${_}${serialize(value, options.compact ? null : t, '')};${n}`;\n                arbitraryNameExportRows.push(`${variableName} as ${JSON.stringify(key)}`);\n            }\n        }\n    }\n    const arbitraryExportCode = arbitraryNameExportRows.length > 0\n        ? `export${_}{${n}${t}${arbitraryNameExportRows.join(`,${n}${t}`)}${n}};${n}`\n        : '';\n    const defaultExportCode = `export default${_}{${n}${t}${defaultExportRows.join(`,${n}${t}`)}${n}};${n}`;\n    return `${namedExportCode}${arbitraryExportCode}${defaultExportCode}`;\n};\n\nfunction exactRegex(str, flags) {\n    return new RegExp(`^${escapeRegex(str)}$`, flags);\n}\nfunction prefixRegex(str, flags) {\n    return new RegExp(`^${escapeRegex(str)}`, flags);\n}\nconst escapeRegexRE = /[-/\\\\^$*+?.()|[\\]{}]/g;\nfunction escapeRegex(str) {\n    return str.replace(escapeRegexRE, '\\\\$&');\n}\n\n// TODO: remove this in next major\nvar index = {\n    addExtension,\n    attachScopes,\n    createFilter,\n    dataToEsm,\n    exactRegex,\n    extractAssignedNames,\n    makeLegalIdentifier,\n    normalizePath,\n    prefixRegex\n};\n\nexport { addExtension, attachScopes, createFilter, dataToEsm, index as default, exactRegex, extractAssignedNames, makeLegalIdentifier, normalizePath, prefixRegex };\n//# sourceMappingURL=index.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}