{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"imageContainer\"\n};\nconst _hoisted_2 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"img\", {\n    id: \"myImage\",\n    src: require('../assets/2025banner.jpg')\n  }, null, 8 /* PROPS */, _hoisted_2)]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createElementVNode","src","require"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n    <img id=\"myImage\" :src=\"require('../assets/2025banner.jpg')\" />\n\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport vertexShader from '../shader/vertexShader.glsl';\nimport fragmentShader from '../shader/fragmentShader.glsl';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n  const renderer = new THREE.WebGLRenderer({ alpha:true});\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.domElement.style.position = 'absolute';\n  renderer.domElement.style.inset = '0';\n  renderer.domElement.style.zIndex = '2';\n  // window.appendChild(renderer.domElement);\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n);\ncamera.position.z = 5;\n\n// 計算滿版平面尺寸\nconst fov = camera.fov * (Math.PI / 180);\nconst height = 2 * Math.tan(fov / 2) * camera.position.z;\nconst width = height * camera.aspect;\nconst geometry = new THREE.PlaneGeometry(width, height);\nconst material = new THREE.MeshBasicMaterial(\n      vertexShader,\n      fragmentShader\n);\nconst plane = new THREE.Mesh(geometry, material);\nscene.add(plane);\n\n\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n  }\n\n  animate();\n\n  // Resize handling\n  window.addEventListener('resize', () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  });\n}\n\n}\n</script>\n\n<style>\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  filter: saturate(0);\n  transition: all ease 0.5s;\n}\n\n#imageContainer:hover {\n  filter: saturate(100%);\n}\n\n#imageContainer > * {\n  position: absolute;\n  inset: 0;\n  width: 100% !important;\n  height: 100% !important;\n  object-fit: cover;\n}\n\n#myImage {\n  z-index: 1;\n}\n/* \ncanvas {\n  z-index: 2;\n  pointer-events: none;\n} */\n\n</style>"],"mappings":";;EACOA,EAAE,EAAC;AAAgB;;;uBAAxBC,mBAAA,CAGM,OAHNC,UAGM,GAFJC,mBAAA,CAA+D;IAA1DH,EAAE,EAAC,SAAS;IAAEI,GAAG,EAAEC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}