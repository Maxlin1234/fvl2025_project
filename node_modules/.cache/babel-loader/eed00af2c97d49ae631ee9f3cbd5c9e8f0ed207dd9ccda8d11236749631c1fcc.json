{"ast":null,"code":"// @ts-check\n/** @typedef { import('estree').BaseNode} BaseNode */\n\n/** @typedef {{\n\tskip: () => void;\n\tremove: () => void;\n\treplace: (node: BaseNode) => void;\n}} WalkerContext */\n\nclass WalkerBase {\n  constructor() {\n    /** @type {boolean} */\n    this.should_skip = false;\n\n    /** @type {boolean} */\n    this.should_remove = false;\n\n    /** @type {BaseNode | null} */\n    this.replacement = null;\n\n    /** @type {WalkerContext} */\n    this.context = {\n      skip: () => this.should_skip = true,\n      remove: () => this.should_remove = true,\n      replace: node => this.replacement = node\n    };\n  }\n\n  /**\n   *\n   * @param {any} parent\n   * @param {string} prop\n   * @param {number} index\n   * @param {BaseNode} node\n   */\n  replace(parent, prop, index, node) {\n    if (parent) {\n      if (index !== null) {\n        parent[prop][index] = node;\n      } else {\n        parent[prop] = node;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {any} parent\n   * @param {string} prop\n   * @param {number} index\n   */\n  remove(parent, prop, index) {\n    if (parent) {\n      if (index !== null) {\n        parent[prop].splice(index, 1);\n      } else {\n        delete parent[prop];\n      }\n    }\n  }\n}\n\n// @ts-check\n\n/** @typedef { import('estree').BaseNode} BaseNode */\n/** @typedef { import('./walker.js').WalkerContext} WalkerContext */\n\n/** @typedef {(\n *    this: WalkerContext,\n *    node: BaseNode,\n *    parent: BaseNode,\n *    key: string,\n *    index: number\n * ) => void} SyncHandler */\n\nclass SyncWalker extends WalkerBase {\n  /**\n   *\n   * @param {SyncHandler} enter\n   * @param {SyncHandler} leave\n   */\n  constructor(enter, leave) {\n    super();\n\n    /** @type {SyncHandler} */\n    this.enter = enter;\n\n    /** @type {SyncHandler} */\n    this.leave = leave;\n  }\n\n  /**\n   *\n   * @param {BaseNode} node\n   * @param {BaseNode} parent\n   * @param {string} [prop]\n   * @param {number} [index]\n   * @returns {BaseNode}\n   */\n  visit(node, parent, prop, index) {\n    if (node) {\n      if (this.enter) {\n        const _should_skip = this.should_skip;\n        const _should_remove = this.should_remove;\n        const _replacement = this.replacement;\n        this.should_skip = false;\n        this.should_remove = false;\n        this.replacement = null;\n        this.enter.call(this.context, node, parent, prop, index);\n        if (this.replacement) {\n          node = this.replacement;\n          this.replace(parent, prop, index, node);\n        }\n        if (this.should_remove) {\n          this.remove(parent, prop, index);\n        }\n        const skipped = this.should_skip;\n        const removed = this.should_remove;\n        this.should_skip = _should_skip;\n        this.should_remove = _should_remove;\n        this.replacement = _replacement;\n        if (skipped) return node;\n        if (removed) return null;\n      }\n      for (const key in node) {\n        const value = node[key];\n        if (typeof value !== \"object\") {\n          continue;\n        } else if (Array.isArray(value)) {\n          for (let i = 0; i < value.length; i += 1) {\n            if (value[i] !== null && typeof value[i].type === 'string') {\n              if (!this.visit(value[i], node, key, i)) {\n                // removed\n                i--;\n              }\n            }\n          }\n        } else if (value !== null && typeof value.type === \"string\") {\n          this.visit(value, node, key, null);\n        }\n      }\n      if (this.leave) {\n        const _replacement = this.replacement;\n        const _should_remove = this.should_remove;\n        this.replacement = null;\n        this.should_remove = false;\n        this.leave.call(this.context, node, parent, prop, index);\n        if (this.replacement) {\n          node = this.replacement;\n          this.replace(parent, prop, index, node);\n        }\n        if (this.should_remove) {\n          this.remove(parent, prop, index);\n        }\n        const removed = this.should_remove;\n        this.replacement = _replacement;\n        this.should_remove = _should_remove;\n        if (removed) return null;\n      }\n    }\n    return node;\n  }\n}\n\n// @ts-check\n\n/** @typedef { import('estree').BaseNode} BaseNode */\n/** @typedef { import('./walker').WalkerContext} WalkerContext */\n\n/** @typedef {(\n *    this: WalkerContext,\n *    node: BaseNode,\n *    parent: BaseNode,\n *    key: string,\n *    index: number\n * ) => Promise<void>} AsyncHandler */\n\nclass AsyncWalker extends WalkerBase {\n  /**\n   *\n   * @param {AsyncHandler} enter\n   * @param {AsyncHandler} leave\n   */\n  constructor(enter, leave) {\n    super();\n\n    /** @type {AsyncHandler} */\n    this.enter = enter;\n\n    /** @type {AsyncHandler} */\n    this.leave = leave;\n  }\n\n  /**\n   *\n   * @param {BaseNode} node\n   * @param {BaseNode} parent\n   * @param {string} [prop]\n   * @param {number} [index]\n   * @returns {Promise<BaseNode>}\n   */\n  async visit(node, parent, prop, index) {\n    if (node) {\n      if (this.enter) {\n        const _should_skip = this.should_skip;\n        const _should_remove = this.should_remove;\n        const _replacement = this.replacement;\n        this.should_skip = false;\n        this.should_remove = false;\n        this.replacement = null;\n        await this.enter.call(this.context, node, parent, prop, index);\n        if (this.replacement) {\n          node = this.replacement;\n          this.replace(parent, prop, index, node);\n        }\n        if (this.should_remove) {\n          this.remove(parent, prop, index);\n        }\n        const skipped = this.should_skip;\n        const removed = this.should_remove;\n        this.should_skip = _should_skip;\n        this.should_remove = _should_remove;\n        this.replacement = _replacement;\n        if (skipped) return node;\n        if (removed) return null;\n      }\n      for (const key in node) {\n        const value = node[key];\n        if (typeof value !== \"object\") {\n          continue;\n        } else if (Array.isArray(value)) {\n          for (let i = 0; i < value.length; i += 1) {\n            if (value[i] !== null && typeof value[i].type === 'string') {\n              if (!(await this.visit(value[i], node, key, i))) {\n                // removed\n                i--;\n              }\n            }\n          }\n        } else if (value !== null && typeof value.type === \"string\") {\n          await this.visit(value, node, key, null);\n        }\n      }\n      if (this.leave) {\n        const _replacement = this.replacement;\n        const _should_remove = this.should_remove;\n        this.replacement = null;\n        this.should_remove = false;\n        await this.leave.call(this.context, node, parent, prop, index);\n        if (this.replacement) {\n          node = this.replacement;\n          this.replace(parent, prop, index, node);\n        }\n        if (this.should_remove) {\n          this.remove(parent, prop, index);\n        }\n        const removed = this.should_remove;\n        this.replacement = _replacement;\n        this.should_remove = _should_remove;\n        if (removed) return null;\n      }\n    }\n    return node;\n  }\n}\n\n// @ts-check\n\n/** @typedef { import('estree').BaseNode} BaseNode */\n/** @typedef { import('./sync.js').SyncHandler} SyncHandler */\n/** @typedef { import('./async.js').AsyncHandler} AsyncHandler */\n\n/**\n *\n * @param {BaseNode} ast\n * @param {{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }} walker\n * @returns {BaseNode}\n */\nfunction walk(ast, {\n  enter,\n  leave\n}) {\n  const instance = new SyncWalker(enter, leave);\n  return instance.visit(ast, null);\n}\n\n/**\n *\n * @param {BaseNode} ast\n * @param {{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }} walker\n * @returns {Promise<BaseNode>}\n */\nasync function asyncWalk(ast, {\n  enter,\n  leave\n}) {\n  const instance = new AsyncWalker(enter, leave);\n  return await instance.visit(ast, null);\n}\nexport { asyncWalk, walk };","map":{"version":3,"names":["WalkerBase","constructor","should_skip","should_remove","replacement","context","skip","remove","replace","node","parent","prop","index","splice","SyncWalker","enter","leave","visit","_should_skip","_should_remove","_replacement","call","skipped","removed","key","value","Array","isArray","i","length","type","AsyncWalker","walk","ast","instance","asyncWalk"],"sources":["/Users/linhankuan/fvl2025/node_modules/estree-walker/dist/esm/estree-walker.js"],"sourcesContent":["// @ts-check\n/** @typedef { import('estree').BaseNode} BaseNode */\n\n/** @typedef {{\n\tskip: () => void;\n\tremove: () => void;\n\treplace: (node: BaseNode) => void;\n}} WalkerContext */\n\nclass WalkerBase {\n\tconstructor() {\n\t\t/** @type {boolean} */\n\t\tthis.should_skip = false;\n\n\t\t/** @type {boolean} */\n\t\tthis.should_remove = false;\n\n\t\t/** @type {BaseNode | null} */\n\t\tthis.replacement = null;\n\n\t\t/** @type {WalkerContext} */\n\t\tthis.context = {\n\t\t\tskip: () => (this.should_skip = true),\n\t\t\tremove: () => (this.should_remove = true),\n\t\t\treplace: (node) => (this.replacement = node)\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * @param {any} parent\n\t * @param {string} prop\n\t * @param {number} index\n\t * @param {BaseNode} node\n\t */\n\treplace(parent, prop, index, node) {\n\t\tif (parent) {\n\t\t\tif (index !== null) {\n\t\t\t\tparent[prop][index] = node;\n\t\t\t} else {\n\t\t\t\tparent[prop] = node;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {any} parent\n\t * @param {string} prop\n\t * @param {number} index\n\t */\n\tremove(parent, prop, index) {\n\t\tif (parent) {\n\t\t\tif (index !== null) {\n\t\t\t\tparent[prop].splice(index, 1);\n\t\t\t} else {\n\t\t\t\tdelete parent[prop];\n\t\t\t}\n\t\t}\n\t}\n}\n\n// @ts-check\n\n/** @typedef { import('estree').BaseNode} BaseNode */\n/** @typedef { import('./walker.js').WalkerContext} WalkerContext */\n\n/** @typedef {(\n *    this: WalkerContext,\n *    node: BaseNode,\n *    parent: BaseNode,\n *    key: string,\n *    index: number\n * ) => void} SyncHandler */\n\nclass SyncWalker extends WalkerBase {\n\t/**\n\t *\n\t * @param {SyncHandler} enter\n\t * @param {SyncHandler} leave\n\t */\n\tconstructor(enter, leave) {\n\t\tsuper();\n\n\t\t/** @type {SyncHandler} */\n\t\tthis.enter = enter;\n\n\t\t/** @type {SyncHandler} */\n\t\tthis.leave = leave;\n\t}\n\n\t/**\n\t *\n\t * @param {BaseNode} node\n\t * @param {BaseNode} parent\n\t * @param {string} [prop]\n\t * @param {number} [index]\n\t * @returns {BaseNode}\n\t */\n\tvisit(node, parent, prop, index) {\n\t\tif (node) {\n\t\t\tif (this.enter) {\n\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tthis.should_skip = false;\n\t\t\t\tthis.should_remove = false;\n\t\t\t\tthis.replacement = null;\n\n\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\tif (skipped) return node;\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\n\t\t\tfor (const key in node) {\n\t\t\t\tconst value = node[key];\n\n\t\t\t\tif (typeof value !== \"object\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t\tif (value[i] !== null && typeof value[i].type === 'string') {\n\t\t\t\t\t\t\tif (!this.visit(value[i], node, key, i)) {\n\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (value !== null && typeof value.type === \"string\") {\n\t\t\t\t\tthis.visit(value, node, key, null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.leave) {\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tthis.replacement = null;\n\t\t\t\tthis.should_remove = false;\n\n\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.replacement = _replacement;\n\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n// @ts-check\n\n/** @typedef { import('estree').BaseNode} BaseNode */\n/** @typedef { import('./walker').WalkerContext} WalkerContext */\n\n/** @typedef {(\n *    this: WalkerContext,\n *    node: BaseNode,\n *    parent: BaseNode,\n *    key: string,\n *    index: number\n * ) => Promise<void>} AsyncHandler */\n\nclass AsyncWalker extends WalkerBase {\n\t/**\n\t *\n\t * @param {AsyncHandler} enter\n\t * @param {AsyncHandler} leave\n\t */\n\tconstructor(enter, leave) {\n\t\tsuper();\n\n\t\t/** @type {AsyncHandler} */\n\t\tthis.enter = enter;\n\n\t\t/** @type {AsyncHandler} */\n\t\tthis.leave = leave;\n\t}\n\n\t/**\n\t *\n\t * @param {BaseNode} node\n\t * @param {BaseNode} parent\n\t * @param {string} [prop]\n\t * @param {number} [index]\n\t * @returns {Promise<BaseNode>}\n\t */\n\tasync visit(node, parent, prop, index) {\n\t\tif (node) {\n\t\t\tif (this.enter) {\n\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tthis.should_skip = false;\n\t\t\t\tthis.should_remove = false;\n\t\t\t\tthis.replacement = null;\n\n\t\t\t\tawait this.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\tif (skipped) return node;\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\n\t\t\tfor (const key in node) {\n\t\t\t\tconst value = node[key];\n\n\t\t\t\tif (typeof value !== \"object\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t\tif (value[i] !== null && typeof value[i].type === 'string') {\n\t\t\t\t\t\t\tif (!(await this.visit(value[i], node, key, i))) {\n\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (value !== null && typeof value.type === \"string\") {\n\t\t\t\t\tawait this.visit(value, node, key, null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.leave) {\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tthis.replacement = null;\n\t\t\t\tthis.should_remove = false;\n\n\t\t\t\tawait this.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.replacement = _replacement;\n\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n// @ts-check\n\n/** @typedef { import('estree').BaseNode} BaseNode */\n/** @typedef { import('./sync.js').SyncHandler} SyncHandler */\n/** @typedef { import('./async.js').AsyncHandler} AsyncHandler */\n\n/**\n *\n * @param {BaseNode} ast\n * @param {{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }} walker\n * @returns {BaseNode}\n */\nfunction walk(ast, { enter, leave }) {\n\tconst instance = new SyncWalker(enter, leave);\n\treturn instance.visit(ast, null);\n}\n\n/**\n *\n * @param {BaseNode} ast\n * @param {{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }} walker\n * @returns {Promise<BaseNode>}\n */\nasync function asyncWalk(ast, { enter, leave }) {\n\tconst instance = new AsyncWalker(enter, leave);\n\treturn await instance.visit(ast, null);\n}\n\nexport { asyncWalk, walk };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}