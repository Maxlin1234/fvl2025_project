{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\n/** Internal types handle bigint as number, because TS can't figure it out. */\nfunction parseSexagesimal(str, asBigInt) {\n  const sign = str[0];\n  const parts = sign === '-' || sign === '+' ? str.substring(1) : str;\n  const num = n => asBigInt ? BigInt(n) : Number(n);\n  const res = parts.replace(/_/g, '').split(':').reduce((res, p) => res * num(60) + num(p), num(0));\n  return sign === '-' ? num(-1) * res : res;\n}\n/**\n * hhhh:mm:ss.sss\n *\n * Internal types handle bigint as number, because TS can't figure it out.\n */\nfunction stringifySexagesimal(node) {\n  let {\n    value\n  } = node;\n  let num = n => n;\n  if (typeof value === 'bigint') num = n => BigInt(n);else if (isNaN(value) || !isFinite(value)) return stringifyNumber(node);\n  let sign = '';\n  if (value < 0) {\n    sign = '-';\n    value *= num(-1);\n  }\n  const _60 = num(60);\n  const parts = [value % _60]; // seconds, including ms\n  if (value < 60) {\n    parts.unshift(0); // at least one : is required\n  } else {\n    value = (value - parts[0]) / _60;\n    parts.unshift(value % _60); // minutes\n    if (value >= 60) {\n      value = (value - parts[0]) / _60;\n      parts.unshift(value); // hours\n    }\n  }\n  return sign + parts.map(n => String(n).padStart(2, '0')).join(':').replace(/000000\\d*$/, '') // % 60 may introduce error\n  ;\n}\nconst intTime = {\n  identify: value => typeof value === 'bigint' || Number.isInteger(value),\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'TIME',\n  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\n  resolve: (str, _onError, {\n    intAsBigInt\n  }) => parseSexagesimal(str, intAsBigInt),\n  stringify: stringifySexagesimal\n};\nconst floatTime = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'TIME',\n  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\n  resolve: str => parseSexagesimal(str, false),\n  stringify: stringifySexagesimal\n};\nconst timestamp = {\n  identify: value => value instanceof Date,\n  default: true,\n  tag: 'tag:yaml.org,2002:timestamp',\n  // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n  // may be omitted altogether, resulting in a date format. In such a case, the time part is\n  // assumed to be 00:00:00Z (start of day, UTC).\n  test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' +\n  // YYYY-Mm-Dd\n  '(?:' +\n  // time is optional\n  '(?:t|T|[ \\\\t]+)' +\n  // t | T | whitespace\n  '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' +\n  // Hh:Mm:Ss(.ss)?\n  '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' +\n  // Z | +5 | -03:30\n  ')?$'),\n  resolve(str) {\n    const match = str.match(timestamp.test);\n    if (!match) throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\n    const [, year, month, day, hour, minute, second] = match.map(Number);\n    const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\n    let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\n    const tz = match[8];\n    if (tz && tz !== 'Z') {\n      let d = parseSexagesimal(tz, false);\n      if (Math.abs(d) < 30) d *= 60;\n      date -= 60000 * d;\n    }\n    return new Date(date);\n  },\n  stringify: ({\n    value\n  }) => value?.toISOString().replace(/(T00:00:00)?\\.000Z$/, '') ?? ''\n};\nexport { floatTime, intTime, timestamp };","map":{"version":3,"names":["stringifyNumber","parseSexagesimal","str","asBigInt","sign","parts","substring","num","n","BigInt","Number","res","replace","split","reduce","p","stringifySexagesimal","node","value","isNaN","isFinite","_60","unshift","map","String","padStart","join","intTime","identify","isInteger","default","tag","format","test","resolve","_onError","intAsBigInt","stringify","floatTime","timestamp","Date","RegExp","match","Error","year","month","day","hour","minute","second","millisec","substr","date","UTC","tz","d","Math","abs","toISOString"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js"],"sourcesContent":["import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\n/** Internal types handle bigint as number, because TS can't figure it out. */\nfunction parseSexagesimal(str, asBigInt) {\n    const sign = str[0];\n    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;\n    const num = (n) => asBigInt ? BigInt(n) : Number(n);\n    const res = parts\n        .replace(/_/g, '')\n        .split(':')\n        .reduce((res, p) => res * num(60) + num(p), num(0));\n    return (sign === '-' ? num(-1) * res : res);\n}\n/**\n * hhhh:mm:ss.sss\n *\n * Internal types handle bigint as number, because TS can't figure it out.\n */\nfunction stringifySexagesimal(node) {\n    let { value } = node;\n    let num = (n) => n;\n    if (typeof value === 'bigint')\n        num = n => BigInt(n);\n    else if (isNaN(value) || !isFinite(value))\n        return stringifyNumber(node);\n    let sign = '';\n    if (value < 0) {\n        sign = '-';\n        value *= num(-1);\n    }\n    const _60 = num(60);\n    const parts = [value % _60]; // seconds, including ms\n    if (value < 60) {\n        parts.unshift(0); // at least one : is required\n    }\n    else {\n        value = (value - parts[0]) / _60;\n        parts.unshift(value % _60); // minutes\n        if (value >= 60) {\n            value = (value - parts[0]) / _60;\n            parts.unshift(value); // hours\n        }\n    }\n    return (sign +\n        parts\n            .map(n => String(n).padStart(2, '0'))\n            .join(':')\n            .replace(/000000\\d*$/, '') // % 60 may introduce error\n    );\n}\nconst intTime = {\n    identify: value => typeof value === 'bigint' || Number.isInteger(value),\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\n    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),\n    stringify: stringifySexagesimal\n};\nconst floatTime = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\n    resolve: str => parseSexagesimal(str, false),\n    stringify: stringifySexagesimal\n};\nconst timestamp = {\n    identify: value => value instanceof Date,\n    default: true,\n    tag: 'tag:yaml.org,2002:timestamp',\n    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n    // may be omitted altogether, resulting in a date format. In such a case, the time part is\n    // assumed to be 00:00:00Z (start of day, UTC).\n    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n        '(?:' + // time is optional\n        '(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n        '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n        ')?$'),\n    resolve(str) {\n        const match = str.match(timestamp.test);\n        if (!match)\n            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\n        const [, year, month, day, hour, minute, second] = match.map(Number);\n        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\n        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\n        const tz = match[8];\n        if (tz && tz !== 'Z') {\n            let d = parseSexagesimal(tz, false);\n            if (Math.abs(d) < 30)\n                d *= 60;\n            date -= 60000 * d;\n        }\n        return new Date(date);\n    },\n    stringify: ({ value }) => value?.toISOString().replace(/(T00:00:00)?\\.000Z$/, '') ?? ''\n};\n\nexport { floatTime, intTime, timestamp };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}