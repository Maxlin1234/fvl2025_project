{"ast":null,"code":"import * as THREE from 'three';\nimport vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n// import bannerImg from '../assets/2025banner.jpg';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.inset = '0';\n    renderer.domElement.style.zIndex = '2';\n    document.getElementById('imageContainer').appendChild(renderer.domElement);\n    const vertexShader = `\n  varying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    // 計算滿版平面尺寸\n    const fov = camera.fov * (Math.PI / 180);\n    const height = 2 * Math.tan(fov / 2) * camera.position.z;\n    const width = height * camera.aspect;\n    const geometry = new THREE.PlaneGeometry(width, height);\n\n    // 載入圖片\n    const texture = new THREE.TextureLoader().load(bannerImg);\n    const material = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      uniforms: {\n        uTexture: {\n          value: texture\n        }\n      },\n      transparent: true\n    });\n    const plane = new THREE.Mesh(geometry, material);\n    scene.add(plane);\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n    animate();\n    window.addEventListener('resize', () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n};","map":{"version":3,"names":["THREE","vertexShader","name","mounted","renderer","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","domElement","style","position","inset","zIndex","document","getElementById","appendChild","scene","Scene","camera","PerspectiveCamera","z","fov","Math","PI","height","tan","width","aspect","geometry","PlaneGeometry","texture","TextureLoader","load","bannerImg","material","ShaderMaterial","fragmentShader","uniforms","uTexture","value","transparent","plane","Mesh","add","animate","requestAnimationFrame","render","addEventListener","updateProjectionMatrix"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n    <img id=\"myImage\" :src=\"require('../assets/2025banner.jpg')\" />\n\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n// import bannerImg from '../assets/2025banner.jpg';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const renderer = new THREE.WebGLRenderer({ alpha: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.inset = '0';\n    renderer.domElement.style.zIndex = '2';\n    document.getElementById('imageContainer').appendChild(renderer.domElement);\n\n    const vertexShader = `\n  varying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 5;\n\n    // 計算滿版平面尺寸\n    const fov = camera.fov * (Math.PI / 180);\n    const height = 2 * Math.tan(fov / 2) * camera.position.z;\n    const width = height * camera.aspect;\n\n    const geometry = new THREE.PlaneGeometry(width, height);\n\n    // 載入圖片\n    const texture = new THREE.TextureLoader().load(bannerImg);\n\n    const material = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      uniforms: {\n        uTexture: { value: texture }\n      },\n      transparent: true\n    });\n\n    const plane = new THREE.Mesh(geometry, material);\n    scene.add(plane);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n};\n</script>\n\n<style>\n\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n}\n\ncanvas {\n  display: block;\n  z-index: 2;\n  pointer-events: none;\n}\n</style>"],"mappings":"AAQA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B,OAAOC,YAAW,MAAO,6BAA6B;AACtD;AACA;;AAEA,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,OAAOA,CAAA,EAAG;IACR,MAAMC,QAAO,GAAI,IAAIJ,KAAK,CAACK,aAAa,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzDF,QAAQ,CAACG,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAC/CL,QAAQ,CAACM,OAAO,CAACF,MAAM,CAACG,UAAU,EAAEH,MAAM,CAACI,WAAW,CAAC;IACvDR,QAAQ,CAACS,UAAU,CAACC,KAAK,CAACC,QAAO,GAAI,UAAU;IAC/CX,QAAQ,CAACS,UAAU,CAACC,KAAK,CAACE,KAAI,GAAI,GAAG;IACrCZ,QAAQ,CAACS,UAAU,CAACC,KAAK,CAACG,MAAK,GAAI,GAAG;IACtCC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC,CAACC,WAAW,CAAChB,QAAQ,CAACS,UAAU,CAAC;IAE1E,MAAMZ,YAAW,GAAI;;;;;;;AAOzB,CAAC;IAEG,MAAMoB,KAAI,GAAI,IAAIrB,KAAK,CAACsB,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAK,GAAI,IAAIvB,KAAK,CAACwB,iBAAiB,CACxC,EAAE,EACFhB,MAAM,CAACG,UAAS,GAAIH,MAAM,CAACI,WAAW,EACtC,GAAG,EACH,IACF,CAAC;IACDW,MAAM,CAACR,QAAQ,CAACU,CAAA,GAAI,CAAC;;IAErB;IACA,MAAMC,GAAE,GAAIH,MAAM,CAACG,GAAE,IAAKC,IAAI,CAACC,EAAC,GAAI,GAAG,CAAC;IACxC,MAAMC,MAAK,GAAI,IAAIF,IAAI,CAACG,GAAG,CAACJ,GAAE,GAAI,CAAC,IAAIH,MAAM,CAACR,QAAQ,CAACU,CAAC;IACxD,MAAMM,KAAI,GAAIF,MAAK,GAAIN,MAAM,CAACS,MAAM;IAEpC,MAAMC,QAAO,GAAI,IAAIjC,KAAK,CAACkC,aAAa,CAACH,KAAK,EAAEF,MAAM,CAAC;;IAEvD;IACA,MAAMM,OAAM,GAAI,IAAInC,KAAK,CAACoC,aAAa,CAAC,CAAC,CAACC,IAAI,CAACC,SAAS,CAAC;IAEzD,MAAMC,QAAO,GAAI,IAAIvC,KAAK,CAACwC,cAAc,CAAC;MACxCvC,YAAY;MACZwC,cAAc;MACdC,QAAQ,EAAE;QACRC,QAAQ,EAAE;UAAEC,KAAK,EAAET;QAAQ;MAC7B,CAAC;MACDU,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,MAAMC,KAAI,GAAI,IAAI9C,KAAK,CAAC+C,IAAI,CAACd,QAAQ,EAAEM,QAAQ,CAAC;IAChDlB,KAAK,CAAC2B,GAAG,CAACF,KAAK,CAAC;IAEhB,SAASG,OAAOA,CAAA,EAAG;MACjBC,qBAAqB,CAACD,OAAO,CAAC;MAC9B7C,QAAQ,CAAC+C,MAAM,CAAC9B,KAAK,EAAEE,MAAM,CAAC;IAChC;IAEA0B,OAAO,CAAC,CAAC;IAETzC,MAAM,CAAC4C,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtC,MAAMrB,KAAI,GAAIvB,MAAM,CAACG,UAAU;MAC/B,MAAMkB,MAAK,GAAIrB,MAAM,CAACI,WAAW;MACjCR,QAAQ,CAACM,OAAO,CAACqB,KAAK,EAAEF,MAAM,CAAC;MAC/BN,MAAM,CAACS,MAAK,GAAID,KAAI,GAAIF,MAAM;MAC9BN,MAAM,CAAC8B,sBAAsB,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}