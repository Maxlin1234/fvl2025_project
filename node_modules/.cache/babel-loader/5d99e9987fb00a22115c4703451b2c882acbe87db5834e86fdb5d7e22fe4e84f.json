{"ast":null,"code":"import * as THREE from 'three';\n// import { Color } from 'three.js';\n// import vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.inset = '0';\n    renderer.domElement.style.zIndex = '2';\n    // window.appendChild(renderer.domElement);\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const texture = new THREE.TextureLoader().load(require('@/assets/2025banner.jpg'));\n    const plane = new THREE.Mesh(new THREE.PlaneGeometry(20, 20), new THREE.MeshBasicMaterial({\n      map: texture\n    }));\n    scene.add(plane);\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // Resize handling\n    window.addEventListener('resize', () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","renderer","WebGLRenderer","alpha","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","setPixelRatio","devicePixelRatio","style","position","inset","zIndex","scene","Scene","camera","PerspectiveCamera","z","texture","TextureLoader","load","require","plane","Mesh","PlaneGeometry","MeshBasicMaterial","map","add","animate","requestAnimationFrame","render","addEventListener","width","height","aspect","updateProjectionMatrix"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n    <img id=\"myImage\" src=\"../assets/2025banner.jpg\">\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n// import { Color } from 'three.js';\n// import vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n\n  const renderer = new THREE.WebGLRenderer({ alpha: true });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.domElement.style.position = 'absolute';\n  renderer.domElement.style.inset = '0';\n  renderer.domElement.style.zIndex = '2';\n  // window.appendChild(renderer.domElement);\n\n  const scene = new THREE.Scene();\n\n  const camera = new THREE.PerspectiveCamera(\n    75,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    1000\n  );\n  camera.position.z = 5;\n    const texture = new THREE.TextureLoader().load(require('@/assets/2025banner.jpg'))\n    const plane = new THREE.Mesh(\n    new THREE.PlaneGeometry(20, 20),\n    new THREE.MeshBasicMaterial( {map:texture} )\n  );\n  scene.add(plane);\n\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n  }\n\n  animate();\n\n  // Resize handling\n  window.addEventListener('resize', () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  });\n}\n\n}\n</script>\n\n<style>\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  filter: saturate(0);\n  transition: all ease 0.5s;\n}\n\n#imageContainer:hover {\n  filter: saturate(100%);\n}\n\n#imageContainer > * {\n  position: absolute;\n  inset: 0;\n  width: 100% !important;\n  height: 100% !important;\n  object-fit: cover;\n}\n\n#myImage {\n  z-index: 1;\n}\n\ncanvas {\n  z-index: 2;\n  pointer-events: none; /* 讓滑鼠事件穿透 canvas */\n}\n\n</style>"],"mappings":"AAOA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B;AACA;AACA;;AAEA,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,OAAOA,CAAA,EAAG;IAEV,MAAMC,QAAO,GAAI,IAAIH,KAAK,CAACI,aAAa,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzDF,QAAQ,CAACG,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACT,QAAQ,CAACU,UAAU,CAAC;IAC9CV,QAAQ,CAACW,aAAa,CAACP,MAAM,CAACQ,gBAAgB,CAAC;IAC/CZ,QAAQ,CAACU,UAAU,CAACG,KAAK,CAACC,QAAO,GAAI,UAAU;IAC/Cd,QAAQ,CAACU,UAAU,CAACG,KAAK,CAACE,KAAI,GAAI,GAAG;IACrCf,QAAQ,CAACU,UAAU,CAACG,KAAK,CAACG,MAAK,GAAI,GAAG;IACtC;;IAEA,MAAMC,KAAI,GAAI,IAAIpB,KAAK,CAACqB,KAAK,CAAC,CAAC;IAE/B,MAAMC,MAAK,GAAI,IAAItB,KAAK,CAACuB,iBAAiB,CACxC,EAAE,EACFhB,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IACF,CAAC;IACDa,MAAM,CAACL,QAAQ,CAACO,CAAA,GAAI,CAAC;IACnB,MAAMC,OAAM,GAAI,IAAIzB,KAAK,CAAC0B,aAAa,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAAC,yBAAyB,CAAC;IACjF,MAAMC,KAAI,GAAI,IAAI7B,KAAK,CAAC8B,IAAI,CAC5B,IAAI9B,KAAK,CAAC+B,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC,EAC/B,IAAI/B,KAAK,CAACgC,iBAAiB,CAAE;MAACC,GAAG,EAACR;IAAO,CAAE,CAC7C,CAAC;IACDL,KAAK,CAACc,GAAG,CAACL,KAAK,CAAC;IAEhB,SAASM,OAAOA,CAAA,EAAG;MACjBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BhC,QAAQ,CAACkC,MAAM,CAACjB,KAAK,EAAEE,MAAM,CAAC;IAChC;IAEAa,OAAO,CAAC,CAAC;;IAET;IACA5B,MAAM,CAAC+B,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtC,MAAMC,KAAI,GAAIhC,MAAM,CAACC,UAAU;MAC/B,MAAMgC,MAAK,GAAIjC,MAAM,CAACE,WAAW;MACjCN,QAAQ,CAACG,OAAO,CAACiC,KAAK,EAAEC,MAAM,CAAC;MAC/BlB,MAAM,CAACmB,MAAK,GAAIF,KAAI,GAAIC,MAAM;MAC9BlB,MAAM,CAACoB,sBAAsB,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}