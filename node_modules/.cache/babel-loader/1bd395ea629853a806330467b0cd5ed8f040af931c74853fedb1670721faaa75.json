{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n/**\r\n * @module vite-plugin-glsl\r\n * @author Ustym Ukhman <ustym.ukhman@gmail.com>\r\n * @description Import, inline (and minify) GLSL/WGSL shader files\r\n * @version 1.5.1\r\n * @license MIT\r\n */\n\nimport { createFilter } from '@rollup/pluginutils';\nimport { transformWithEsbuild } from 'vite';\nimport loadShader from './loadShader.js';\n\n/**\r\n * @function\r\n * @name glsl\r\n * @description Plugin entry point to import,\r\n * inline, (and minify) GLSL/WGSL shader files\r\n * \r\n * @see {@link https://vitejs.dev/guide/api-plugin.html}\r\n * @link https://github.com/UstymUkhman/vite-plugin-glsl\r\n * \r\n * @param {import('./types').PluginOptions} options Plugin config object\r\n * \r\n * @returns {import('vite').Plugin} Vite plugin that converts shader code\r\n */\nexport default function ({\n  include = Object.freeze(['**/*.glsl', '**/*.wgsl', '**/*.vert', '**/*.frag', '**/*.vs', '**/*.fs']),\n  exclude = undefined,\n  defaultExtension = 'glsl',\n  warnDuplicatedImports = true,\n  removeDuplicatedImports = false,\n  importKeyword = '#include',\n  minify = false,\n  watch = true,\n  root = '/'\n} = {}) {\n  let sourcemap = false;\n  const filter = createFilter(include, exclude);\n  const prod = process.env.NODE_ENV === 'production';\n  return {\n    enforce: 'pre',\n    name: 'vite-plugin-glsl',\n    configResolved(resolvedConfig) {\n      sourcemap = resolvedConfig.build.sourcemap;\n    },\n    async transform(source, shader) {\n      if (!filter(shader)) return;\n      const {\n        dependentChunks,\n        outputShader\n      } = await loadShader(source, shader, {\n        removeDuplicatedImports,\n        warnDuplicatedImports,\n        defaultExtension,\n        importKeyword,\n        minify,\n        root\n      });\n      watch && !prod && Array.from(dependentChunks.values()).flat().forEach(chunk => this.addWatchFile(chunk));\n      return await transformWithEsbuild(outputShader, shader, {\n        sourcemap: sourcemap && 'external',\n        loader: 'text',\n        format: 'esm',\n        minifyWhitespace: prod\n      });\n    }\n  };\n}","map":{"version":3,"names":["createFilter","transformWithEsbuild","loadShader","include","Object","freeze","exclude","undefined","defaultExtension","warnDuplicatedImports","removeDuplicatedImports","importKeyword","minify","watch","root","sourcemap","filter","prod","process","env","NODE_ENV","enforce","name","configResolved","resolvedConfig","build","transform","source","shader","dependentChunks","outputShader","Array","from","values","flat","forEach","chunk","addWatchFile","loader","format","minifyWhitespace"],"sources":["/Users/linhankuan/fvl2025/node_modules/vite-plugin-glsl/src/index.js"],"sourcesContent":["/**\r\n * @module vite-plugin-glsl\r\n * @author Ustym Ukhman <ustym.ukhman@gmail.com>\r\n * @description Import, inline (and minify) GLSL/WGSL shader files\r\n * @version 1.5.1\r\n * @license MIT\r\n */\r\n\r\nimport { createFilter } from '@rollup/pluginutils';\r\nimport { transformWithEsbuild } from 'vite';\r\nimport loadShader from './loadShader.js';\r\n\r\n/**\r\n * @function\r\n * @name glsl\r\n * @description Plugin entry point to import,\r\n * inline, (and minify) GLSL/WGSL shader files\r\n * \r\n * @see {@link https://vitejs.dev/guide/api-plugin.html}\r\n * @link https://github.com/UstymUkhman/vite-plugin-glsl\r\n * \r\n * @param {import('./types').PluginOptions} options Plugin config object\r\n * \r\n * @returns {import('vite').Plugin} Vite plugin that converts shader code\r\n */\r\nexport default function ({\r\n    include = Object.freeze([\r\n      '**/*.glsl', '**/*.wgsl',\r\n      '**/*.vert', '**/*.frag',\r\n      '**/*.vs', '**/*.fs'\r\n    ]),\r\n    exclude = undefined,\r\n    defaultExtension = 'glsl',\r\n    warnDuplicatedImports = true,\r\n    removeDuplicatedImports = false,\r\n    importKeyword = '#include',\r\n    minify = false,\r\n    watch = true,\r\n    root = '/'\r\n  } = {}\r\n) {\r\n  let sourcemap = false;\r\n  const filter = createFilter(include, exclude);\r\n  const prod = process.env.NODE_ENV === 'production';\r\n\r\n  return {\r\n    enforce: 'pre',\r\n    name: 'vite-plugin-glsl',\r\n\r\n    configResolved (resolvedConfig) {\r\n      sourcemap = resolvedConfig.build.sourcemap;\r\n    },\r\n\r\n    async transform (source, shader) {\r\n      if (!filter(shader)) return;\r\n\r\n      const { dependentChunks, outputShader } = await loadShader(source, shader, {\r\n        removeDuplicatedImports,\r\n        warnDuplicatedImports,\r\n        defaultExtension,\r\n        importKeyword,\r\n        minify, root\r\n      });\r\n\r\n      watch && !prod && Array.from(dependentChunks.values())\r\n        .flat().forEach(chunk => this.addWatchFile(chunk));\r\n\r\n      return await transformWithEsbuild(outputShader, shader, {\r\n        sourcemap: sourcemap && 'external',\r\n        loader: 'text', format: 'esm',\r\n        minifyWhitespace: prod\r\n      });\r\n    }\r\n  };\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,qBAAqB;AAClD,SAASC,oBAAoB,QAAQ,MAAM;AAC3C,OAAOC,UAAU,MAAM,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;EACrBC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,CACtB,WAAW,EAAE,WAAW,EACxB,WAAW,EAAE,WAAW,EACxB,SAAS,EAAE,SAAS,CACrB,CAAC;EACFC,OAAO,GAAGC,SAAS;EACnBC,gBAAgB,GAAG,MAAM;EACzBC,qBAAqB,GAAG,IAAI;EAC5BC,uBAAuB,GAAG,KAAK;EAC/BC,aAAa,GAAG,UAAU;EAC1BC,MAAM,GAAG,KAAK;EACdC,KAAK,GAAG,IAAI;EACZC,IAAI,GAAG;AACT,CAAC,GAAG,CAAC,CAAC,EACN;EACA,IAAIC,SAAS,GAAG,KAAK;EACrB,MAAMC,MAAM,GAAGhB,YAAY,CAACG,OAAO,EAAEG,OAAO,CAAC;EAC7C,MAAMW,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;EAElD,OAAO;IACLC,OAAO,EAAE,KAAK;IACdC,IAAI,EAAE,kBAAkB;IAExBC,cAAcA,CAAEC,cAAc,EAAE;MAC9BT,SAAS,GAAGS,cAAc,CAACC,KAAK,CAACV,SAAS;IAC5C,CAAC;IAED,MAAMW,SAASA,CAAEC,MAAM,EAAEC,MAAM,EAAE;MAC/B,IAAI,CAACZ,MAAM,CAACY,MAAM,CAAC,EAAE;MAErB,MAAM;QAAEC,eAAe;QAAEC;MAAa,CAAC,GAAG,MAAM5B,UAAU,CAACyB,MAAM,EAAEC,MAAM,EAAE;QACzElB,uBAAuB;QACvBD,qBAAqB;QACrBD,gBAAgB;QAChBG,aAAa;QACbC,MAAM;QAAEE;MACV,CAAC,CAAC;MAEFD,KAAK,IAAI,CAACI,IAAI,IAAIc,KAAK,CAACC,IAAI,CAACH,eAAe,CAACI,MAAM,CAAC,CAAC,CAAC,CACnDC,IAAI,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAI,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC,CAAC;MAEpD,OAAO,MAAMnC,oBAAoB,CAAC6B,YAAY,EAAEF,MAAM,EAAE;QACtDb,SAAS,EAAEA,SAAS,IAAI,UAAU;QAClCuB,MAAM,EAAE,MAAM;QAAEC,MAAM,EAAE,KAAK;QAC7BC,gBAAgB,EAAEvB;MACpB,CAAC,CAAC;IACJ;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}