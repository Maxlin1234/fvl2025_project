{"ast":null,"code":"import * as THREE from 'three';\nexport default {\n  name: 'ThreeSphere',\n  data() {\n    return {\n      renderer: null,\n      scene: null,\n      camera: null,\n      sphere: null,\n      animationId: null,\n      observer: null\n    };\n  },\n  mounted() {\n    this.init();\n    this.animate();\n    window.addEventListener('resize', this.onResize, {\n      passive: true\n    });\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.onResize);\n    cancelAnimationFrame(this.animationId);\n    if (this.renderer) {\n      this.renderer.dispose();\n      if (this.renderer.domElement && this.renderer.domElement.parentNode) {\n        this.renderer.domElement.parentNode.removeChild(this.renderer.domElement);\n      }\n    }\n    if (this.sphere && this.sphere.geometry) this.sphere.geometry.dispose();\n    if (this.sphere && this.sphere.material) this.sphere.material.dispose();\n    this.scene = null;\n    this.camera = null;\n    this.renderer = null;\n  },\n  methods: {\n    init() {\n      const container = this.$refs.container;\n      const width = container.clientWidth || 300;\n      const height = container.clientHeight || 300;\n\n      // Scene\n      this.scene = new THREE.Scene();\n\n      // Camera\n      this.camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\n      this.camera.position.set(0, 0, 3.2);\n\n      // Renderer (transparent)\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      this.renderer.setSize(width, height);\n      this.renderer.setClearColor(0x000000, 0);\n      container.appendChild(this.renderer.domElement);\n\n      // Lights\n      const hemi = new THREE.HemisphereLight(0xffffff, 0x222233, 1.0);\n      this.scene.add(hemi);\n      const dir = new THREE.DirectionalLight(0xffffff, 0.8);\n      dir.position.set(3, 5, 2);\n      this.scene.add(dir);\n\n      // Sphere\n      const geometry = new THREE.SphereGeometry(1, 64, 64);\n      const material = new THREE.MeshStandardMaterial({\n        color: 0x20afb4,\n        roughness: 0.35,\n        metalness: 0.2,\n        emissive: 0x001018,\n        emissiveIntensity: 0.2,\n        transparent: true,\n        opacity: 0.95\n      });\n      this.sphere = new THREE.Mesh(geometry, material);\n      this.scene.add(this.sphere);\n\n      // Subtle wire overlay\n      const wire = new THREE.WireframeGeometry(geometry);\n      const line = new THREE.LineSegments(wire);\n      line.material.depthTest = true;\n      line.material.opacity = 0.15;\n      line.material.transparent = true;\n      line.material.color = new THREE.Color(0xffffff);\n      this.sphere.add(line);\n      this.onResize();\n    },\n    onResize() {\n      const container = this.$refs.container;\n      if (!container || !this.renderer || !this.camera) return;\n      const width = container.clientWidth || 300;\n      const height = container.clientHeight || 300;\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(width, height);\n    },\n    animate() {\n      this.animationId = requestAnimationFrame(this.animate);\n      if (this.sphere) {\n        this.sphere.rotation.y += 0.005;\n        this.sphere.rotation.x += 0.0015;\n      }\n      if (this.renderer && this.scene && this.camera) {\n        this.renderer.render(this.scene, this.camera);\n      }\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","data","renderer","scene","camera","sphere","animationId","observer","mounted","init","animate","window","addEventListener","onResize","passive","beforeUnmount","removeEventListener","cancelAnimationFrame","dispose","domElement","parentNode","removeChild","geometry","material","methods","container","$refs","width","clientWidth","height","clientHeight","Scene","PerspectiveCamera","position","set","WebGLRenderer","antialias","alpha","setPixelRatio","Math","min","devicePixelRatio","setSize","setClearColor","appendChild","hemi","HemisphereLight","add","dir","DirectionalLight","SphereGeometry","MeshStandardMaterial","color","roughness","metalness","emissive","emissiveIntensity","transparent","opacity","Mesh","wire","WireframeGeometry","line","LineSegments","depthTest","Color","aspect","updateProjectionMatrix","requestAnimationFrame","rotation","y","x","render"],"sources":["/Users/linhankuan/fvl2025/src/components/ThreeSphere.vue"],"sourcesContent":["<template>\n  <div ref=\"container\" class=\"three-sphere\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'ThreeSphere',\n  data() {\n    return {\n      renderer: null,\n      scene: null,\n      camera: null,\n      sphere: null,\n      animationId: null,\n      observer: null\n    }\n  },\n  mounted() {\n    this.init();\n    this.animate();\n    window.addEventListener('resize', this.onResize, { passive: true });\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.onResize);\n    cancelAnimationFrame(this.animationId);\n    if (this.renderer) {\n      this.renderer.dispose();\n      if (this.renderer.domElement && this.renderer.domElement.parentNode) {\n        this.renderer.domElement.parentNode.removeChild(this.renderer.domElement);\n      }\n    }\n    if (this.sphere && this.sphere.geometry) this.sphere.geometry.dispose();\n    if (this.sphere && this.sphere.material) this.sphere.material.dispose();\n    this.scene = null;\n    this.camera = null;\n    this.renderer = null;\n  },\n  methods: {\n    init() {\n      const container = this.$refs.container;\n      const width = container.clientWidth || 300;\n      const height = container.clientHeight || 300;\n\n      // Scene\n      this.scene = new THREE.Scene();\n\n      // Camera\n      this.camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\n      this.camera.position.set(0, 0, 3.2);\n\n      // Renderer (transparent)\n      this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      this.renderer.setSize(width, height);\n      this.renderer.setClearColor(0x000000, 0);\n      container.appendChild(this.renderer.domElement);\n\n      // Lights\n      const hemi = new THREE.HemisphereLight(0xffffff, 0x222233, 1.0);\n      this.scene.add(hemi);\n      const dir = new THREE.DirectionalLight(0xffffff, 0.8);\n      dir.position.set(3, 5, 2);\n      this.scene.add(dir);\n\n      // Sphere\n      const geometry = new THREE.SphereGeometry(1, 64, 64);\n      const material = new THREE.MeshStandardMaterial({\n        color: 0x20afb4,\n        roughness: 0.35,\n        metalness: 0.2,\n        emissive: 0x001018,\n        emissiveIntensity: 0.2,\n        transparent: true,\n        opacity: 0.95\n      });\n      this.sphere = new THREE.Mesh(geometry, material);\n      this.scene.add(this.sphere);\n\n      // Subtle wire overlay\n      const wire = new THREE.WireframeGeometry(geometry);\n      const line = new THREE.LineSegments(wire);\n      line.material.depthTest = true;\n      line.material.opacity = 0.15;\n      line.material.transparent = true;\n      line.material.color = new THREE.Color(0xffffff);\n      this.sphere.add(line);\n\n      this.onResize();\n    },\n    onResize() {\n      const container = this.$refs.container;\n      if (!container || !this.renderer || !this.camera) return;\n      const width = container.clientWidth || 300;\n      const height = container.clientHeight || 300;\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(width, height);\n    },\n    animate() {\n      this.animationId = requestAnimationFrame(this.animate);\n      if (this.sphere) {\n        this.sphere.rotation.y += 0.005;\n        this.sphere.rotation.x += 0.0015;\n      }\n      if (this.renderer && this.scene && this.camera) {\n        this.renderer.render(this.scene, this.camera);\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.three-sphere {\n  width: 100%;\n  height: 100%;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}