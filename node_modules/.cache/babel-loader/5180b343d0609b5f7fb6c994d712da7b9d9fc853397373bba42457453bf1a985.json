{"ast":null,"code":"/**\n * Stringify a CST document, token, or collection item\n *\n * Fair warning: This applies no validation whatsoever, and\n * simply concatenates the sources in their logical order.\n */\nconst stringify = cst => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);\nfunction stringifyToken(token) {\n  switch (token.type) {\n    case 'block-scalar':\n      {\n        let res = '';\n        for (const tok of token.props) res += stringifyToken(tok);\n        return res + token.source;\n      }\n    case 'block-map':\n    case 'block-seq':\n      {\n        let res = '';\n        for (const item of token.items) res += stringifyItem(item);\n        return res;\n      }\n    case 'flow-collection':\n      {\n        let res = token.start.source;\n        for (const item of token.items) res += stringifyItem(item);\n        for (const st of token.end) res += st.source;\n        return res;\n      }\n    case 'document':\n      {\n        let res = stringifyItem(token);\n        if (token.end) for (const st of token.end) res += st.source;\n        return res;\n      }\n    default:\n      {\n        let res = token.source;\n        if ('end' in token && token.end) for (const st of token.end) res += st.source;\n        return res;\n      }\n  }\n}\nfunction stringifyItem({\n  start,\n  key,\n  sep,\n  value\n}) {\n  let res = '';\n  for (const st of start) res += st.source;\n  if (key) res += stringifyToken(key);\n  if (sep) for (const st of sep) res += st.source;\n  if (value) res += stringifyToken(value);\n  return res;\n}\nexport { stringify };","map":{"version":3,"names":["stringify","cst","stringifyToken","stringifyItem","token","type","res","tok","props","source","item","items","start","st","end","key","sep","value"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/parse/cst-stringify.js"],"sourcesContent":["/**\n * Stringify a CST document, token, or collection item\n *\n * Fair warning: This applies no validation whatsoever, and\n * simply concatenates the sources in their logical order.\n */\nconst stringify = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);\nfunction stringifyToken(token) {\n    switch (token.type) {\n        case 'block-scalar': {\n            let res = '';\n            for (const tok of token.props)\n                res += stringifyToken(tok);\n            return res + token.source;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            let res = '';\n            for (const item of token.items)\n                res += stringifyItem(item);\n            return res;\n        }\n        case 'flow-collection': {\n            let res = token.start.source;\n            for (const item of token.items)\n                res += stringifyItem(item);\n            for (const st of token.end)\n                res += st.source;\n            return res;\n        }\n        case 'document': {\n            let res = stringifyItem(token);\n            if (token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n        default: {\n            let res = token.source;\n            if ('end' in token && token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n    }\n}\nfunction stringifyItem({ start, key, sep, value }) {\n    let res = '';\n    for (const st of start)\n        res += st.source;\n    if (key)\n        res += stringifyToken(key);\n    if (sep)\n        for (const st of sep)\n            res += st.source;\n    if (value)\n        res += stringifyToken(value);\n    return res;\n}\n\nexport { stringify };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,GAAIC,GAAG,IAAK,MAAM,IAAIA,GAAG,GAAGC,cAAc,CAACD,GAAG,CAAC,GAAGE,aAAa,CAACF,GAAG,CAAC;AACnF,SAASC,cAAcA,CAACE,KAAK,EAAE;EAC3B,QAAQA,KAAK,CAACC,IAAI;IACd,KAAK,cAAc;MAAE;QACjB,IAAIC,GAAG,GAAG,EAAE;QACZ,KAAK,MAAMC,GAAG,IAAIH,KAAK,CAACI,KAAK,EACzBF,GAAG,IAAIJ,cAAc,CAACK,GAAG,CAAC;QAC9B,OAAOD,GAAG,GAAGF,KAAK,CAACK,MAAM;MAC7B;IACA,KAAK,WAAW;IAChB,KAAK,WAAW;MAAE;QACd,IAAIH,GAAG,GAAG,EAAE;QACZ,KAAK,MAAMI,IAAI,IAAIN,KAAK,CAACO,KAAK,EAC1BL,GAAG,IAAIH,aAAa,CAACO,IAAI,CAAC;QAC9B,OAAOJ,GAAG;MACd;IACA,KAAK,iBAAiB;MAAE;QACpB,IAAIA,GAAG,GAAGF,KAAK,CAACQ,KAAK,CAACH,MAAM;QAC5B,KAAK,MAAMC,IAAI,IAAIN,KAAK,CAACO,KAAK,EAC1BL,GAAG,IAAIH,aAAa,CAACO,IAAI,CAAC;QAC9B,KAAK,MAAMG,EAAE,IAAIT,KAAK,CAACU,GAAG,EACtBR,GAAG,IAAIO,EAAE,CAACJ,MAAM;QACpB,OAAOH,GAAG;MACd;IACA,KAAK,UAAU;MAAE;QACb,IAAIA,GAAG,GAAGH,aAAa,CAACC,KAAK,CAAC;QAC9B,IAAIA,KAAK,CAACU,GAAG,EACT,KAAK,MAAMD,EAAE,IAAIT,KAAK,CAACU,GAAG,EACtBR,GAAG,IAAIO,EAAE,CAACJ,MAAM;QACxB,OAAOH,GAAG;MACd;IACA;MAAS;QACL,IAAIA,GAAG,GAAGF,KAAK,CAACK,MAAM;QACtB,IAAI,KAAK,IAAIL,KAAK,IAAIA,KAAK,CAACU,GAAG,EAC3B,KAAK,MAAMD,EAAE,IAAIT,KAAK,CAACU,GAAG,EACtBR,GAAG,IAAIO,EAAE,CAACJ,MAAM;QACxB,OAAOH,GAAG;MACd;EACJ;AACJ;AACA,SAASH,aAAaA,CAAC;EAAES,KAAK;EAAEG,GAAG;EAAEC,GAAG;EAAEC;AAAM,CAAC,EAAE;EAC/C,IAAIX,GAAG,GAAG,EAAE;EACZ,KAAK,MAAMO,EAAE,IAAID,KAAK,EAClBN,GAAG,IAAIO,EAAE,CAACJ,MAAM;EACpB,IAAIM,GAAG,EACHT,GAAG,IAAIJ,cAAc,CAACa,GAAG,CAAC;EAC9B,IAAIC,GAAG,EACH,KAAK,MAAMH,EAAE,IAAIG,GAAG,EAChBV,GAAG,IAAIO,EAAE,CAACJ,MAAM;EACxB,IAAIQ,KAAK,EACLX,GAAG,IAAIJ,cAAc,CAACe,KAAK,CAAC;EAChC,OAAOX,GAAG;AACd;AAEA,SAASN,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}