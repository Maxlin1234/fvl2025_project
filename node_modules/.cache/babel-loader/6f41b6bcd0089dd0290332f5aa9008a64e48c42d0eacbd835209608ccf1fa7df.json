{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizePath = exports.isRootDirectory = exports.convertSlashes = exports.cleanPath = void 0;\nconst path_1 = require(\"path\");\nfunction cleanPath(path) {\n  let normalized = (0, path_1.normalize)(path);\n  // we have to remove the last path separator\n  // to account for / root path\n  if (normalized.length > 1 && normalized[normalized.length - 1] === path_1.sep) normalized = normalized.substring(0, normalized.length - 1);\n  return normalized;\n}\nexports.cleanPath = cleanPath;\nconst SLASHES_REGEX = /[\\\\/]/g;\nfunction convertSlashes(path, separator) {\n  return path.replace(SLASHES_REGEX, separator);\n}\nexports.convertSlashes = convertSlashes;\nconst WINDOWS_ROOT_DIR_REGEX = /^[a-z]:[\\\\/]$/i;\nfunction isRootDirectory(path) {\n  return path === \"/\" || WINDOWS_ROOT_DIR_REGEX.test(path);\n}\nexports.isRootDirectory = isRootDirectory;\nfunction normalizePath(path, options) {\n  const {\n    resolvePaths,\n    normalizePath,\n    pathSeparator\n  } = options;\n  const pathNeedsCleaning = process.platform === \"win32\" && path.includes(\"/\") || path.startsWith(\".\");\n  if (resolvePaths) path = (0, path_1.resolve)(path);\n  if (normalizePath || pathNeedsCleaning) path = cleanPath(path);\n  if (path === \".\") return \"\";\n  const needsSeperator = path[path.length - 1] !== pathSeparator;\n  return convertSlashes(needsSeperator ? path + pathSeparator : path, pathSeparator);\n}\nexports.normalizePath = normalizePath;","map":{"version":3,"names":["Object","defineProperty","exports","value","normalizePath","isRootDirectory","convertSlashes","cleanPath","path_1","require","path","normalized","normalize","length","sep","substring","SLASHES_REGEX","separator","replace","WINDOWS_ROOT_DIR_REGEX","test","options","resolvePaths","pathSeparator","pathNeedsCleaning","process","platform","includes","startsWith","resolve","needsSeperator"],"sources":["/Users/linhankuan/fvl2025/node_modules/vite/node_modules/fdir/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizePath = exports.isRootDirectory = exports.convertSlashes = exports.cleanPath = void 0;\nconst path_1 = require(\"path\");\nfunction cleanPath(path) {\n    let normalized = (0, path_1.normalize)(path);\n    // we have to remove the last path separator\n    // to account for / root path\n    if (normalized.length > 1 && normalized[normalized.length - 1] === path_1.sep)\n        normalized = normalized.substring(0, normalized.length - 1);\n    return normalized;\n}\nexports.cleanPath = cleanPath;\nconst SLASHES_REGEX = /[\\\\/]/g;\nfunction convertSlashes(path, separator) {\n    return path.replace(SLASHES_REGEX, separator);\n}\nexports.convertSlashes = convertSlashes;\nconst WINDOWS_ROOT_DIR_REGEX = /^[a-z]:[\\\\/]$/i;\nfunction isRootDirectory(path) {\n    return path === \"/\" || WINDOWS_ROOT_DIR_REGEX.test(path);\n}\nexports.isRootDirectory = isRootDirectory;\nfunction normalizePath(path, options) {\n    const { resolvePaths, normalizePath, pathSeparator } = options;\n    const pathNeedsCleaning = (process.platform === \"win32\" && path.includes(\"/\")) ||\n        path.startsWith(\".\");\n    if (resolvePaths)\n        path = (0, path_1.resolve)(path);\n    if (normalizePath || pathNeedsCleaning)\n        path = cleanPath(path);\n    if (path === \".\")\n        return \"\";\n    const needsSeperator = path[path.length - 1] !== pathSeparator;\n    return convertSlashes(needsSeperator ? path + pathSeparator : path, pathSeparator);\n}\nexports.normalizePath = normalizePath;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,eAAe,GAAGH,OAAO,CAACI,cAAc,GAAGJ,OAAO,CAACK,SAAS,GAAG,KAAK,CAAC;AACrG,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC9B,SAASF,SAASA,CAACG,IAAI,EAAE;EACrB,IAAIC,UAAU,GAAG,CAAC,CAAC,EAAEH,MAAM,CAACI,SAAS,EAAEF,IAAI,CAAC;EAC5C;EACA;EACA,IAAIC,UAAU,CAACE,MAAM,GAAG,CAAC,IAAIF,UAAU,CAACA,UAAU,CAACE,MAAM,GAAG,CAAC,CAAC,KAAKL,MAAM,CAACM,GAAG,EACzEH,UAAU,GAAGA,UAAU,CAACI,SAAS,CAAC,CAAC,EAAEJ,UAAU,CAACE,MAAM,GAAG,CAAC,CAAC;EAC/D,OAAOF,UAAU;AACrB;AACAT,OAAO,CAACK,SAAS,GAAGA,SAAS;AAC7B,MAAMS,aAAa,GAAG,QAAQ;AAC9B,SAASV,cAAcA,CAACI,IAAI,EAAEO,SAAS,EAAE;EACrC,OAAOP,IAAI,CAACQ,OAAO,CAACF,aAAa,EAAEC,SAAS,CAAC;AACjD;AACAf,OAAO,CAACI,cAAc,GAAGA,cAAc;AACvC,MAAMa,sBAAsB,GAAG,gBAAgB;AAC/C,SAASd,eAAeA,CAACK,IAAI,EAAE;EAC3B,OAAOA,IAAI,KAAK,GAAG,IAAIS,sBAAsB,CAACC,IAAI,CAACV,IAAI,CAAC;AAC5D;AACAR,OAAO,CAACG,eAAe,GAAGA,eAAe;AACzC,SAASD,aAAaA,CAACM,IAAI,EAAEW,OAAO,EAAE;EAClC,MAAM;IAAEC,YAAY;IAAElB,aAAa;IAAEmB;EAAc,CAAC,GAAGF,OAAO;EAC9D,MAAMG,iBAAiB,GAAIC,OAAO,CAACC,QAAQ,KAAK,OAAO,IAAIhB,IAAI,CAACiB,QAAQ,CAAC,GAAG,CAAC,IACzEjB,IAAI,CAACkB,UAAU,CAAC,GAAG,CAAC;EACxB,IAAIN,YAAY,EACZZ,IAAI,GAAG,CAAC,CAAC,EAAEF,MAAM,CAACqB,OAAO,EAAEnB,IAAI,CAAC;EACpC,IAAIN,aAAa,IAAIoB,iBAAiB,EAClCd,IAAI,GAAGH,SAAS,CAACG,IAAI,CAAC;EAC1B,IAAIA,IAAI,KAAK,GAAG,EACZ,OAAO,EAAE;EACb,MAAMoB,cAAc,GAAGpB,IAAI,CAACA,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC,KAAKU,aAAa;EAC9D,OAAOjB,cAAc,CAACwB,cAAc,GAAGpB,IAAI,GAAGa,aAAa,GAAGb,IAAI,EAAEa,aAAa,CAAC;AACtF;AACArB,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}