{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../assets/2025banner.jpg';\nconst _hoisted_1 = {\n  id: \"imageContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _cache[0] || (_cache[0] = [_createElementVNode(\"img\", {\n    id: \"myImage\",\n    src: _imports_0\n  }, null, -1 /* CACHED */)]));\n}","map":{"version":3,"names":["_imports_0","id","_createElementBlock","_hoisted_1","_cache","_createElementVNode","src"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n\n<div id=\"imageContainer\">\n  <img id=\"myImage\" src=\"../assets/2025banner.jpg\">\n</div>\n</template>\n\n<script>\nimport THREE from 'three';\n// variables\nconst imageContainer = document.getElementById(\"imageContainer\");\nconst imageElement = document.getElementById(\"myImage\");\n\nlet easeFactor = 0.02;\nlet scene, camera, renderer, planeMesh;\nlet mousePosition = { x: 0.5, y: 0.5 };\nlet targetMousePosition = { x: 0.5, y: 0.5 };\nlet mouseStopTimeout;\nlet aberrationIntensity = 0.0;\nlet lastPosition = { x: 0.5, y: 0.5 };\nlet prevPosition = { x: 0.5, y: 0.5 };\n\n// shaders\nconst vertexShader = `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n\nconst fragmentShader = `\n    varying vec2 vUv;\n    uniform sampler2D u_texture;    \n    uniform vec2 u_mouse;\n    uniform vec2 u_prevMouse;\n    uniform float u_aberrationIntensity;\n\n    void main() {\n        vec2 gridUV = floor(vUv * vec2(20.0, 20.0)) / vec2(20.0, 20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0/20.0, 1.0/20.0);\n        \n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        \n        vec2 pixelToMouseDirection = centerOfPixel - u_mouse;\n        float pixelDistanceToMouse = length(pixelToMouseDirection);\n        float strength = smoothstep(0.3, 0.0, pixelDistanceToMouse);\n \n        vec2 uvOffset = strength * - mouseDirection * 0.2;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 colorR = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n        vec4 colorG = texture2D(u_texture, uv);\n        vec4 colorB = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(colorR.r, colorG.g, colorB.b, 1.0);\n    }\n`;\n\nfunction initializeScene(texture) {\n  //   scene creation\n  scene = new THREE.Scene();\n\n  // camera setup\n  camera = new THREE.PerspectiveCamera(\n    80,\n    imageElement.offsetWidth / imageElement.offsetHeight,\n    0.01,\n    10\n  );\n  camera.position.z = 1;\n\n  //   uniforms\n  let shaderUniforms = {\n    u_mouse: { type: \"v2\", value: new THREE.Vector2() },\n    u_prevMouse: { type: \"v2\", value: new THREE.Vector2() },\n    u_aberrationIntensity: { type: \"f\", value: 0.0 },\n    u_texture: { type: \"t\", value: texture }\n  };\n\n  //   creating a plane mesh with materials\n  planeMesh = new THREE.Mesh(\n    new THREE.PlaneGeometry(2, 2),\n    new THREE.ShaderMaterial({\n      uniforms: shaderUniforms,\n      vertexShader,\n      fragmentShader\n    })\n  );\n\n  //   add mesh to scene\n  scene.add(planeMesh);\n\n  //   render\n  renderer = new THREE.WebGLRenderer();\n  renderer.setSize(imageElement.offsetWidth, imageElement.offsetHeight);\n\n  //   create a canvas\n  imageContainer.appendChild(renderer.domElement);\n}\n\n// use the existing image from html in the canvas\ninitializeScene(new THREE.TextureLoader().load(imageElement.src));\n\nanimateScene();\n\nfunction animateScene() {\n  requestAnimationFrame(animateScene);\n\n  mousePosition.x += (targetMousePosition.x - mousePosition.x) * easeFactor;\n  mousePosition.y += (targetMousePosition.y - mousePosition.y) * easeFactor;\n\n  planeMesh.material.uniforms.u_mouse.value.set(\n    mousePosition.x,\n    1.0 - mousePosition.y\n  );\n\n  planeMesh.material.uniforms.u_prevMouse.value.set(\n    prevPosition.x,\n    1.0 - prevPosition.y\n  );\n\n  aberrationIntensity = Math.max(0.0, aberrationIntensity - 0.05);\n\n  planeMesh.material.uniforms.u_aberrationIntensity.value = aberrationIntensity;\n\n  renderer.render(scene, camera);\n}\n\n// event listeners\nimageContainer.addEventListener(\"mousemove\", handleMouseMove);\nimageContainer.addEventListener(\"mouseenter\", handleMouseEnter);\nimageContainer.addEventListener(\"mouseleave\", handleMouseLeave);\n\nfunction handleMouseMove(event) {\n  easeFactor = 0.02;\n  let rect = imageContainer.getBoundingClientRect();\n  prevPosition = { ...targetMousePosition };\n\n  targetMousePosition.x = (event.clientX - rect.left) / rect.width;\n  targetMousePosition.y = (event.clientY - rect.top) / rect.height;\n\n  aberrationIntensity = 1;\n}\n\nfunction handleMouseEnter(event) {\n  easeFactor = 0.02;\n  let rect = imageContainer.getBoundingClientRect();\n\n  mousePosition.x = targetMousePosition.x = (event.clientX - rect.left) / rect.width;\n  mousePosition.y = targetMousePosition.y = (event.clientY - rect.top) / rect.height;\n}\n\nfunction handleMouseLeave() {\n  easeFactor = 0.05;\n  targetMousePosition = { ...prevPosition };\n}\n\n\n\n\nexport default{\n  name:'Ban-ner',\n}\n\n</script>\n\n\n<style>\n#imageContainer{\n  position:relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-width: 100%;\n  filter:saturate(0);\n  transition: all ease 0.5s;\n}\n#imageContainer:hover{\n  filter: saturate(100%);\n}\n#imagerContainer > * {\n  position: absolute;\n  inset:0;\n  width:100% !important;\n  height: 100% !important;\n  object-fit: cover;\n}\n#myImage{\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n</style>"],"mappings":";OAGoBA,UAA8B;;EAD7CC,EAAE,EAAC;AAAgB;;uBAAxBC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJC,mBAAA,CAAiD;IAA5CJ,EAAE,EAAC,SAAS;IAACK,GAA8B,EAA9BN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}