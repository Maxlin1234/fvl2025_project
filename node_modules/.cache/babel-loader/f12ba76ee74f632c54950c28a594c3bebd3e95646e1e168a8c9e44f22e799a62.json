{"ast":null,"code":"function resolveEnd(end, offset, reqSpace, onError) {\n  let comment = '';\n  if (end) {\n    let hasSpace = false;\n    let sep = '';\n    for (const token of end) {\n      const {\n        source,\n        type\n      } = token;\n      switch (type) {\n        case 'space':\n          hasSpace = true;\n          break;\n        case 'comment':\n          {\n            if (reqSpace && !hasSpace) onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n            const cb = source.substring(1) || ' ';\n            if (!comment) comment = cb;else comment += sep + cb;\n            sep = '';\n            break;\n          }\n        case 'newline':\n          if (comment) sep += source;\n          hasSpace = true;\n          break;\n        default:\n          onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n      }\n      offset += source.length;\n    }\n  }\n  return {\n    comment,\n    offset\n  };\n}\nexport { resolveEnd };","map":{"version":3,"names":["resolveEnd","end","offset","reqSpace","onError","comment","hasSpace","sep","token","source","type","cb","substring","length"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/compose/resolve-end.js"],"sourcesContent":["function resolveEnd(end, offset, reqSpace, onError) {\n    let comment = '';\n    if (end) {\n        let hasSpace = false;\n        let sep = '';\n        for (const token of end) {\n            const { source, type } = token;\n            switch (type) {\n                case 'space':\n                    hasSpace = true;\n                    break;\n                case 'comment': {\n                    if (reqSpace && !hasSpace)\n                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                    const cb = source.substring(1) || ' ';\n                    if (!comment)\n                        comment = cb;\n                    else\n                        comment += sep + cb;\n                    sep = '';\n                    break;\n                }\n                case 'newline':\n                    if (comment)\n                        sep += source;\n                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n    }\n    return { comment, offset };\n}\n\nexport { resolveEnd };\n"],"mappings":"AAAA,SAASA,UAAUA,CAACC,GAAG,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAChD,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIJ,GAAG,EAAE;IACL,IAAIK,QAAQ,GAAG,KAAK;IACpB,IAAIC,GAAG,GAAG,EAAE;IACZ,KAAK,MAAMC,KAAK,IAAIP,GAAG,EAAE;MACrB,MAAM;QAAEQ,MAAM;QAAEC;MAAK,CAAC,GAAGF,KAAK;MAC9B,QAAQE,IAAI;QACR,KAAK,OAAO;UACRJ,QAAQ,GAAG,IAAI;UACf;QACJ,KAAK,SAAS;UAAE;YACZ,IAAIH,QAAQ,IAAI,CAACG,QAAQ,EACrBF,OAAO,CAACI,KAAK,EAAE,cAAc,EAAE,wEAAwE,CAAC;YAC5G,MAAMG,EAAE,GAAGF,MAAM,CAACG,SAAS,CAAC,CAAC,CAAC,IAAI,GAAG;YACrC,IAAI,CAACP,OAAO,EACRA,OAAO,GAAGM,EAAE,CAAC,KAEbN,OAAO,IAAIE,GAAG,GAAGI,EAAE;YACvBJ,GAAG,GAAG,EAAE;YACR;UACJ;QACA,KAAK,SAAS;UACV,IAAIF,OAAO,EACPE,GAAG,IAAIE,MAAM;UACjBH,QAAQ,GAAG,IAAI;UACf;QACJ;UACIF,OAAO,CAACI,KAAK,EAAE,kBAAkB,EAAE,cAAcE,IAAI,cAAc,CAAC;MAC5E;MACAR,MAAM,IAAIO,MAAM,CAACI,MAAM;IAC3B;EACJ;EACA,OAAO;IAAER,OAAO;IAAEH;EAAO,CAAC;AAC9B;AAEA,SAASF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}