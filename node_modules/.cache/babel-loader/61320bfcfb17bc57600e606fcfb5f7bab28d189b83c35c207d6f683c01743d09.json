{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*!\n * PhysicsPropsPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\n\nlet gsap,\n  _coreInitted,\n  _getUnit,\n  _getStyleSaver,\n  _reverting,\n  _getGSAP = () => gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap,\n  _round = value => Math.round(value * 10000) / 10000,\n  _bonusValidated = 1,\n  //<name>PhysicsPropsPlugin</name>\n  _initCore = core => {\n    gsap = core || _getGSAP();\n    if (!_coreInitted) {\n      _getUnit = gsap.utils.getUnit;\n      _getStyleSaver = gsap.core.getStyleSaver;\n      _reverting = gsap.core.reverting || function () {};\n      _coreInitted = 1;\n    }\n  };\nclass PhysicsProp {\n  constructor(target, p, velocity, acceleration, friction, stepsPerTimeUnit) {\n    let cache = target._gsap,\n      curVal = cache.get(target, p);\n    this.p = p;\n    this.set = cache.set(target, p); //setter\n    this.s = this.val = parseFloat(curVal);\n    this.u = _getUnit(curVal) || 0;\n    this.vel = velocity || 0;\n    this.v = this.vel / stepsPerTimeUnit;\n    if (acceleration || acceleration === 0) {\n      this.acc = acceleration;\n      this.a = this.acc / (stepsPerTimeUnit * stepsPerTimeUnit);\n    } else {\n      this.acc = this.a = 0;\n    }\n    this.fr = 1 - (friction || 0);\n  }\n}\nexport const PhysicsPropsPlugin = {\n  version: \"3.13.0\",\n  name: \"physicsProps\",\n  register: _initCore,\n  init(target, value, tween) {\n    _coreInitted || _initCore();\n    let data = this,\n      p;\n    data.styles = _getStyleSaver && _getStyleSaver(target);\n    data.target = target;\n    data.tween = tween;\n    data.step = 0;\n    data.sps = 30; //steps per second\n    data.vProps = [];\n    for (p in value) {\n      let {\n        velocity,\n        acceleration,\n        friction\n      } = value[p];\n      if (velocity || acceleration) {\n        data.vProps.push(new PhysicsProp(target, p, velocity, acceleration, friction, data.sps));\n        data._props.push(p);\n        _getStyleSaver && data.styles.save(p);\n        friction && (data.hasFr = 1);\n      }\n    }\n  },\n  render(ratio, data) {\n    let {\n        vProps,\n        tween,\n        target,\n        step,\n        hasFr,\n        sps\n      } = data,\n      i = vProps.length,\n      time = tween._from ? tween._dur - tween._time : tween._time,\n      curProp,\n      steps,\n      remainder,\n      j,\n      tt;\n    if (tween._time || !_reverting()) {\n      if (hasFr) {\n        time *= sps;\n        steps = (time | 0) - step;\n        /*\n        Note: rounding errors build up if we walk the calculations backward which we used to do like this to maximize performance:\n        while (i--) {\n        \tcurProp = vProps[i];\n        \tj = -steps;\n        \twhile (j--) {\n        \t\tcurProp.val -= curProp.v;\n        \t\tcurProp.v /= curProp.fr;\n        \t\tcurProp.v -= curProp.a;\n        \t}\n        \tcurProp.set(target, curProp.p, _round(curProp.val + (curProp.v * remainder * curProp.fr)) + curProp.u);\n        }\n        but now for the sake of accuracy (to ensure rewinding always goes back to EXACTLY the same spot), we force the calculations to go forward every time. So if the tween is going backward, we just start from the beginning and iterate. This is only necessary with friction.\n         */\n        if (steps < 0) {\n          while (i--) {\n            curProp = vProps[i];\n            curProp.v = curProp.vel / sps;\n            curProp.val = curProp.s;\n          }\n          i = vProps.length;\n          data.step = step = 0;\n          steps = time | 0;\n        }\n        remainder = time % 1;\n        while (i--) {\n          curProp = vProps[i];\n          j = steps;\n          while (j--) {\n            curProp.v += curProp.a;\n            curProp.v *= curProp.fr;\n            curProp.val += curProp.v;\n          }\n          curProp.set(target, curProp.p, _round(curProp.val + curProp.v * remainder * curProp.fr) + curProp.u);\n        }\n        data.step += steps;\n      } else {\n        tt = time * time * 0.5;\n        while (i--) {\n          curProp = vProps[i];\n          curProp.set(target, curProp.p, _round(curProp.s + curProp.vel * time + curProp.acc * tt) + curProp.u);\n        }\n      }\n    } else {\n      data.styles.revert();\n    }\n  },\n  kill(property) {\n    let vProps = this.vProps,\n      i = vProps.length;\n    while (i--) {\n      vProps[i].p === property && vProps.splice(i, 1);\n    }\n  }\n};\n_getGSAP() && gsap.registerPlugin(PhysicsPropsPlugin);\nexport { PhysicsPropsPlugin as default };","map":{"version":3,"names":["gsap","_coreInitted","_getUnit","_getStyleSaver","_reverting","_getGSAP","window","registerPlugin","_round","value","Math","round","_bonusValidated","_initCore","core","utils","getUnit","getStyleSaver","reverting","PhysicsProp","constructor","target","p","velocity","acceleration","friction","stepsPerTimeUnit","cache","_gsap","curVal","get","set","s","val","parseFloat","u","vel","v","acc","a","fr","PhysicsPropsPlugin","version","name","register","init","tween","data","styles","step","sps","vProps","push","_props","save","hasFr","render","ratio","i","length","time","_from","_dur","_time","curProp","steps","remainder","j","tt","revert","kill","property","splice","default"],"sources":["/Users/linhankuan/fvl2025/node_modules/gsap/src/PhysicsPropsPlugin.js"],"sourcesContent":["/*!\n * PhysicsPropsPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\n\nlet gsap, _coreInitted, _getUnit, _getStyleSaver, _reverting,\n\t_getGSAP = () => gsap || (typeof(window) !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap),\n\t_round = value => Math.round(value * 10000) / 10000,\n\t_bonusValidated = 1, //<name>PhysicsPropsPlugin</name>\n\t_initCore = core => {\n\t\tgsap = core || _getGSAP();\n\t\tif (!_coreInitted) {\n\t\t\t_getUnit = gsap.utils.getUnit;\n\t\t\t_getStyleSaver = gsap.core.getStyleSaver;\n\t\t\t_reverting = gsap.core.reverting || function() {};\n\t\t\t_coreInitted = 1;\n\t\t}\n\t};\n\nclass PhysicsProp {\n\n\tconstructor(target, p, velocity, acceleration, friction, stepsPerTimeUnit) {\n\t\tlet cache = target._gsap,\n\t\t\tcurVal = cache.get(target, p);\n\t\tthis.p = p;\n\t\tthis.set = cache.set(target, p); //setter\n\t\tthis.s = this.val = parseFloat(curVal);\n\t\tthis.u = _getUnit(curVal) || 0;\n\t\tthis.vel = velocity || 0;\n\t\tthis.v = this.vel / stepsPerTimeUnit;\n\t\tif (acceleration || acceleration === 0) {\n\t\t\tthis.acc = acceleration;\n\t\t\tthis.a = this.acc / (stepsPerTimeUnit * stepsPerTimeUnit);\n\t\t} else {\n\t\t\tthis.acc = this.a = 0;\n\t\t}\n\t\tthis.fr = 1 - (friction || 0) ;\n\t}\n\n}\n\n\nexport const PhysicsPropsPlugin = {\n\tversion:\"3.13.0\",\n\tname:\"physicsProps\",\n\tregister: _initCore,\n\tinit(target, value, tween) {\n\t\t_coreInitted || _initCore();\n\t\tlet data = this,\n\t\t\tp;\n\t\tdata.styles = _getStyleSaver && _getStyleSaver(target);\n\t\tdata.target = target;\n\t\tdata.tween = tween;\n\t\tdata.step = 0;\n\t\tdata.sps = 30; //steps per second\n\t\tdata.vProps = [];\n\t\tfor (p in value) {\n\t\t\tlet { velocity, acceleration, friction } = value[p];\n\t\t\tif (velocity || acceleration) {\n\t\t\t\tdata.vProps.push(new PhysicsProp(target, p, velocity, acceleration, friction, data.sps));\n\t\t\t\tdata._props.push(p);\n\t\t\t\t_getStyleSaver && data.styles.save(p);\n\t\t\t\tfriction && (data.hasFr = 1);\n\t\t\t}\n\t\t}\n\t},\n\trender(ratio, data) {\n\t\tlet { vProps, tween, target, step, hasFr, sps } = data,\n\t\t\ti = vProps.length,\n\t\t\ttime = tween._from ? tween._dur - tween._time : tween._time,\n\t\t\tcurProp, steps, remainder, j, tt;\n\t\tif (tween._time || !_reverting()) {\n\t\t\tif (hasFr) {\n\t\t\t\ttime *= sps;\n\t\t\t\tsteps = (time | 0) - step;\n\t\t\t\t/*\n\t\t\t\tNote: rounding errors build up if we walk the calculations backward which we used to do like this to maximize performance:\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcurProp = vProps[i];\n\t\t\t\t\tj = -steps;\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\tcurProp.val -= curProp.v;\n\t\t\t\t\t\tcurProp.v /= curProp.fr;\n\t\t\t\t\t\tcurProp.v -= curProp.a;\n\t\t\t\t\t}\n\t\t\t\t\tcurProp.set(target, curProp.p, _round(curProp.val + (curProp.v * remainder * curProp.fr)) + curProp.u);\n\t\t\t\t}\n\t\t\t\tbut now for the sake of accuracy (to ensure rewinding always goes back to EXACTLY the same spot), we force the calculations to go forward every time. So if the tween is going backward, we just start from the beginning and iterate. This is only necessary with friction.\n\t\t\t\t */\n\t\t\t\tif (steps < 0) {\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tcurProp = vProps[i];\n\t\t\t\t\t\tcurProp.v = curProp.vel / sps;\n\t\t\t\t\t\tcurProp.val = curProp.s;\n\t\t\t\t\t}\n\t\t\t\t\ti = vProps.length;\n\t\t\t\t\tdata.step = step = 0;\n\t\t\t\t\tsteps = time | 0;\n\t\t\t\t}\n\t\t\t\tremainder = time % 1;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcurProp = vProps[i];\n\t\t\t\t\tj = steps;\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\tcurProp.v += curProp.a;\n\t\t\t\t\t\tcurProp.v *= curProp.fr;\n\t\t\t\t\t\tcurProp.val += curProp.v;\n\t\t\t\t\t}\n\t\t\t\t\tcurProp.set(target, curProp.p, _round(curProp.val + (curProp.v * remainder * curProp.fr)) + curProp.u);\n\t\t\t\t}\n\t\t\t\tdata.step += steps;\n\n\t\t\t} else {\n\t\t\t\ttt = time * time * 0.5;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcurProp = vProps[i];\n\t\t\t\t\tcurProp.set(target, curProp.p, _round(curProp.s + curProp.vel * time + curProp.acc * tt) + curProp.u);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tdata.styles.revert();\n\t\t}\n\t},\n\tkill(property) {\n\t\tlet vProps = this.vProps,\n\t\t\ti = vProps.length;\n\t\twhile (i--) {\n\t\t\tvProps[i].p === property && vProps.splice(i, 1);\n\t\t}\n\t}\n};\n\n\n_getGSAP() && gsap.registerPlugin(PhysicsPropsPlugin);\n\nexport { PhysicsPropsPlugin as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}