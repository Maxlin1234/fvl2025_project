{"ast":null,"code":"import * as THREE from 'three';\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = this.$el;\n    const loader = new THREE.TextureLoader();\n    loader.load(require('@/assets/2025banner.jpg'), texture => {\n      initScene(texture);\n    });\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `;\n    const fragmentShader = `\n      varying vec2 vUv;\n      uniform sampler2D u_texture;\n      uniform vec2 u_mouse;\n      uniform vec2 u_prevMouse;\n      uniform float u_aberrationIntensity;\n      // circle animation uniforms\n      uniform float u_time;\n      uniform vec2 u_circleCenter;      // 以 UV 座標表示 [0..1]\n      uniform float u_circleRadius;     // 圓半徑 (UV)\n      uniform float u_circleEdge;       // 邊緣羽化\n      uniform float u_circleMoveAmp;    // 平移幅度 (UV)\n      uniform float u_circleSpeed;      // 速度\n\n      void main() {\n        // 既有滑鼠位移造成的色差偏移\n        vec2 gridUV = floor(vUv * vec2(20.0)) / vec2(20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0 / 20.0);\n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        vec2 pixelToMouse = centerOfPixel - u_mouse;\n        float dist = length(pixelToMouse);\n        float strength = smoothstep(0.2, 0.0, dist);\n        vec2 uvOffset = strength * -mouseDirection * 2.5;\n        vec2 uv = vUv - uvOffset;\n\n        // 圓形區域遮罩 (inside: 1 在圓內, 0 在圓外)\n        vec2 toCenter = uv - u_circleCenter;\n        float distC = length(toCenter);\n        float inside = 1.0 - smoothstep(u_circleRadius, u_circleRadius + u_circleEdge, distC);\n\n        // 圓內部的輕微平移 (你也可以改為縮放/脈動)\n        vec2 moveDir = vec2(sin(u_time * u_circleSpeed), cos(u_time * u_circleSpeed));\n        vec2 uvCircle = uv + moveDir * (u_circleMoveAmp * inside);\n\n        // 也可加入輕微脈動縮放效果 (若想啟用，解除下兩行註解並改用 uvCircleScaled 取樣)\n        // float pulse = 1.0 + 0.02 * inside * sin(u_time * (u_circleSpeed * 1.2));\n        // vec2 uvCircleScaled = u_circleCenter + (uvCircle - u_circleCenter) / pulse;\n\n        // 使用加入圓形位移後的 uv 取樣，並維持原本的簡單色差\n        vec4 r = texture2D(u_texture, uvCircle - vec2(strength * u_aberrationIntensity * 0.00, 0.0));\n        vec4 g = texture2D(u_texture, uvCircle + vec2(strength * u_aberrationIntensity * 0.02, 0.0));\n        vec4 b = texture2D(u_texture, uvCircle - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(r.r, g.g, b.b, 1.0);\n      }\n    `;\n    let scene, camera, renderer, plane;\n    const mouse = new THREE.Vector2(0.2, 0.2);\n    const prevMouse = new THREE.Vector2(0.5, 0.5);\n    let aberration = 0;\n    const startTime = performance.now();\n    function initScene(texture) {\n      // renderer\n      renderer = new THREE.WebGLRenderer({\n        alpha: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.domElement.style.position = 'absolute';\n      renderer.domElement.style.inset = '0';\n      container.appendChild(renderer.domElement);\n\n      // scene & camera\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10);\n      camera.position.z = 1;\n      const uniforms = {\n        u_texture: {\n          value: texture\n        },\n        u_mouse: {\n          value: mouse.clone()\n        },\n        u_prevMouse: {\n          value: prevMouse.clone()\n        },\n        u_aberrationIntensity: {\n          value: 0.0\n        },\n        // circle animation defaults (可依實際圖片微調 center 與 radius)\n        u_time: {\n          value: 0.0\n        },\n        u_circleCenter: {\n          value: new THREE.Vector2(0.5, 0.5)\n        },\n        u_circleRadius: {\n          value: 0.18\n        },\n        u_circleEdge: {\n          value: 0.06\n        },\n        u_circleMoveAmp: {\n          value: 0.015\n        },\n        u_circleSpeed: {\n          value: 1.6\n        }\n      };\n      const fov = camera.fov * Math.PI / 180;\n      const height = 2 * Math.tan(fov / 2) * camera.position.z;\n      const width = height * camera.aspect;\n      const geometry = new THREE.PlaneGeometry(width, height);\n      const material = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader,\n        fragmentShader,\n        transparent: true\n      });\n      plane = new THREE.Mesh(geometry, material);\n      scene.add(plane);\n      animate();\n      window.addEventListener('resize', onResize);\n      container.addEventListener('mousemove', onMouseMove);\n    }\n    function onMouseMove(e) {\n      const rect = container.getBoundingClientRect();\n      prevMouse.copy(mouse);\n      mouse.x = (e.clientX - rect.left) / rect.width;\n      mouse.y = 1 - (e.clientY - rect.top) / rect.height;\n      aberration = 1.0;\n    }\n    function onResize() {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    }\n    function animate() {\n      requestAnimationFrame(animate);\n      const elapsed = (performance.now() - startTime) * 0.001; // seconds\n      plane.material.uniforms.u_time.value = elapsed;\n      plane.material.uniforms.u_mouse.value.copy(mouse);\n      plane.material.uniforms.u_prevMouse.value.copy(prevMouse);\n      aberration = Math.max(0.0, aberration - 0.005);\n      plane.material.uniforms.u_aberrationIntensity.value = aberration;\n      renderer.render(scene, camera);\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","container","$el","loader","TextureLoader","load","require","texture","initScene","vertexShader","fragmentShader","scene","camera","renderer","plane","mouse","Vector2","prevMouse","aberration","startTime","performance","now","WebGLRenderer","alpha","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","domElement","style","position","inset","appendChild","Scene","PerspectiveCamera","z","uniforms","u_texture","value","u_mouse","clone","u_prevMouse","u_aberrationIntensity","u_time","u_circleCenter","u_circleRadius","u_circleEdge","u_circleMoveAmp","u_circleSpeed","fov","Math","PI","height","tan","width","aspect","geometry","PlaneGeometry","material","ShaderMaterial","transparent","Mesh","add","animate","addEventListener","onResize","onMouseMove","e","rect","getBoundingClientRect","copy","x","clientX","left","y","clientY","top","updateProjectionMatrix","requestAnimationFrame","elapsed","max","render"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = this.$el;\n\n    const loader = new THREE.TextureLoader();\n    loader.load(require('@/assets/2025banner.jpg'), (texture) => {\n      initScene(texture);\n    });\n\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `;\n\n    const fragmentShader = `\n      varying vec2 vUv;\n      uniform sampler2D u_texture;\n      uniform vec2 u_mouse;\n      uniform vec2 u_prevMouse;\n      uniform float u_aberrationIntensity;\n      // circle animation uniforms\n      uniform float u_time;\n      uniform vec2 u_circleCenter;      // 以 UV 座標表示 [0..1]\n      uniform float u_circleRadius;     // 圓半徑 (UV)\n      uniform float u_circleEdge;       // 邊緣羽化\n      uniform float u_circleMoveAmp;    // 平移幅度 (UV)\n      uniform float u_circleSpeed;      // 速度\n\n      void main() {\n        // 既有滑鼠位移造成的色差偏移\n        vec2 gridUV = floor(vUv * vec2(20.0)) / vec2(20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0 / 20.0);\n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        vec2 pixelToMouse = centerOfPixel - u_mouse;\n        float dist = length(pixelToMouse);\n        float strength = smoothstep(0.2, 0.0, dist);\n        vec2 uvOffset = strength * -mouseDirection * 2.5;\n        vec2 uv = vUv - uvOffset;\n\n        // 圓形區域遮罩 (inside: 1 在圓內, 0 在圓外)\n        vec2 toCenter = uv - u_circleCenter;\n        float distC = length(toCenter);\n        float inside = 1.0 - smoothstep(u_circleRadius, u_circleRadius + u_circleEdge, distC);\n\n        // 圓內部的輕微平移 (你也可以改為縮放/脈動)\n        vec2 moveDir = vec2(sin(u_time * u_circleSpeed), cos(u_time * u_circleSpeed));\n        vec2 uvCircle = uv + moveDir * (u_circleMoveAmp * inside);\n\n        // 也可加入輕微脈動縮放效果 (若想啟用，解除下兩行註解並改用 uvCircleScaled 取樣)\n        // float pulse = 1.0 + 0.02 * inside * sin(u_time * (u_circleSpeed * 1.2));\n        // vec2 uvCircleScaled = u_circleCenter + (uvCircle - u_circleCenter) / pulse;\n\n        // 使用加入圓形位移後的 uv 取樣，並維持原本的簡單色差\n        vec4 r = texture2D(u_texture, uvCircle - vec2(strength * u_aberrationIntensity * 0.00, 0.0));\n        vec4 g = texture2D(u_texture, uvCircle + vec2(strength * u_aberrationIntensity * 0.02, 0.0));\n        vec4 b = texture2D(u_texture, uvCircle - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(r.r, g.g, b.b, 1.0);\n      }\n    `;\n\n    let scene, camera, renderer, plane;\n    const mouse = new THREE.Vector2(0.2, 0.2);\n    const prevMouse = new THREE.Vector2(0.5, 0.5);\n    let aberration = 0;\n    const startTime = performance.now();\n\n    function initScene(texture) {\n      // renderer\n      renderer = new THREE.WebGLRenderer({ alpha: true });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.domElement.style.position = 'absolute';\n      renderer.domElement.style.inset = '0';\n      container.appendChild(renderer.domElement);\n\n      // scene & camera\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10);\n      camera.position.z = 1;\n\n      const uniforms = {\n        u_texture: { value: texture },\n        u_mouse: { value: mouse.clone() },\n        u_prevMouse: { value: prevMouse.clone() },\n        u_aberrationIntensity: { value: 0.0 },\n        // circle animation defaults (可依實際圖片微調 center 與 radius)\n        u_time: { value: 0.0 },\n        u_circleCenter: { value: new THREE.Vector2(0.5, 0.5) },\n        u_circleRadius: { value: 0.18 },\n        u_circleEdge: { value: 0.06 },\n        u_circleMoveAmp: { value: 0.015 },\n        u_circleSpeed: { value: 1.6 }\n      };\n      const fov = (camera.fov * Math.PI) / 180;\n      const height = 2 * Math.tan(fov / 2) * camera.position.z;\n      const width = height * camera.aspect;\n      const geometry = new THREE.PlaneGeometry(width, height);\n\n      const material = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader,\n        fragmentShader,\n        transparent: true\n      });\n\n      plane = new THREE.Mesh(geometry, material);\n      scene.add(plane);\n\n      animate();\n      window.addEventListener('resize', onResize);\n      container.addEventListener('mousemove', onMouseMove);\n    }\n\n    function onMouseMove(e) {\n      const rect = container.getBoundingClientRect();\n      prevMouse.copy(mouse);\n      mouse.x = (e.clientX - rect.left) / rect.width;\n      mouse.y = 1 - (e.clientY - rect.top) / rect.height;\n      aberration = 1.0;\n    }\n\n    function onResize() {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      const elapsed = (performance.now() - startTime) * 0.001; // seconds\n      plane.material.uniforms.u_time.value = elapsed;\n\n      plane.material.uniforms.u_mouse.value.copy(mouse);\n      plane.material.uniforms.u_prevMouse.value.copy(prevMouse);\n      aberration = Math.max(0.0, aberration - 0.005);\n      plane.material.uniforms.u_aberrationIntensity.value = aberration;\n\n      renderer.render(scene, camera);\n    }\n  }\n};\n</script>\n\n<style>\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n}\n\n@media (max-width:768px){\n  #imageContainer {\n    height: 100svh; /* 避免手機瀏覽器 UI 影響顯示高度 */\n  }\n}\n\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  pointer-events: none;\n  position: absolute;\n  display: block;\n  inset: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}