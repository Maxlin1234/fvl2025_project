{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"btn-zh\"\n};\nconst _hoisted_2 = {\n  class: \"btn-zh\"\n};\nconst _hoisted_3 = {\n  class: \"btn-zh\"\n};\nconst _hoisted_4 = {\n  class: \"btn-zh\"\n};\nconst _hoisted_5 = {\n  class: \"btn-zh\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HeroSection = _resolveComponent(\"HeroSection\");\n  const _component_BannerParticles = _resolveComponent(\"BannerParticles\");\n  const _component_FixedSection = _resolveComponent(\"FixedSection\");\n  const _component_AboutSection = _resolveComponent(\"AboutSection\");\n  const _component_VideoBanner = _resolveComponent(\"VideoBanner\");\n  const _component_PortfolioSection = _resolveComponent(\"PortfolioSection\");\n  const _component_TeamSection = _resolveComponent(\"TeamSection\");\n  const _component_FooterBar = _resolveComponent(\"FooterBar\");\n  const _component_Drawers = _resolveComponent(\"Drawers\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" 首頁區塊 \"), _createVNode(_component_HeroSection, {\n    showButtons: false,\n    onShowDrawer: $options.handleShowDrawer,\n    onChangeEn: $options.handleLanguageChange\n  }, null, 8 /* PROPS */, [\"onShowDrawer\", \"onChangeEn\"]), _createVNode(_component_BannerParticles), _createCommentVNode(\" 全域角落按鈕 \"), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"global-corner-btns\", [{\n      en: $data.isEnglish\n    }, {\n      expanded: $data.showAllButtons\n    }]])\n  }, [_createElementVNode(\"button\", {\n    class: \"corner-btn target top-left\",\n    onMouseenter: _cache[0] || (_cache[0] = $event => $options.handleShowDrawer('schedule'))\n  }, [_createElementVNode(\"span\", _hoisted_1, _toDisplayString($data.isEnglish ? 'SCHEDULE' : '場次表'), 1 /* TEXT */)], 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    class: \"corner-btn target top-right\",\n    onClick: _cache[1] || (_cache[1] = $event => $options.handleLanguageChange(!$data.isEnglish))\n  }, [_createElementVNode(\"span\", _hoisted_2, _toDisplayString($data.isEnglish ? '中文' : 'EN'), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n    class: \"corner-btn target bottom-left\",\n    onMouseenter: _cache[2] || (_cache[2] = $event => $options.handleShowDrawer('lecture'))\n  }, [_createElementVNode(\"span\", _hoisted_3, _toDisplayString($data.isEnglish ? 'INFO' : '入場須知'), 1 /* TEXT */)], 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    class: \"corner-btn target bottom-right\",\n    onClick: _cache[3] || (_cache[3] = $event => $options.handleShowDrawer('about'))\n  }, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString($data.isEnglish ? 'ABOUT' : '關於我們'), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n    class: \"corner-btn launcher bottom-right\",\n    onClick: _cache[4] || (_cache[4] = $event => $data.showAllButtons = true)\n  }, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString($data.isEnglish ? 'MENU' : '選單'), 1 /* TEXT */)])], 2 /* CLASS */), _createCommentVNode(\" 主要內容區塊 \"), _createVNode(_component_FixedSection, {\n    isEnglish: $data.isEnglish\n  }, null, 8 /* PROPS */, [\"isEnglish\"]), _createVNode(_component_AboutSection, {\n    firstImage: $data.firstImage,\n    isEnglish: $data.isEnglish\n  }, null, 8 /* PROPS */, [\"firstImage\", \"isEnglish\"]), _createVNode(_component_VideoBanner), _createVNode(_component_PortfolioSection, {\n    portfolioList: $data.portfolioList,\n    isEnglish: $data.isEnglish\n  }, null, 8 /* PROPS */, [\"portfolioList\", \"isEnglish\"]), _createVNode(_component_TeamSection, {\n    isEnglish: $data.isEnglish\n  }, null, 8 /* PROPS */, [\"isEnglish\"]), _createVNode(_component_FooterBar), _createCommentVNode(\" 抽屜組件 \"), _createVNode(_component_Drawers, {\n    showLiveDrawer: $data.showLiveDrawer,\n    showDrawer: $data.showDrawer,\n    showLectureDrawer: $data.showLectureDrawer,\n    currentEventImage: $options.currentEventImage,\n    isEnglish: $data.isEnglish,\n    onCloseDrawer: $options.handleCloseDrawer,\n    onEventTypeChanged: $options.handleEventTypeChange\n  }, null, 8 /* PROPS */, [\"showLiveDrawer\", \"showDrawer\", \"showLectureDrawer\", \"currentEventImage\", \"isEnglish\", \"onCloseDrawer\", \"onEventTypeChanged\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createCommentVNode","_createVNode","_component_HeroSection","showButtons","onShowDrawer","$options","handleShowDrawer","onChangeEn","handleLanguageChange","_component_BannerParticles","_createElementVNode","_normalizeClass","en","$data","isEnglish","expanded","showAllButtons","onMouseenter","_cache","$event","_hoisted_1","_toDisplayString","onClick","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_component_FixedSection","_component_AboutSection","firstImage","_component_VideoBanner","_component_PortfolioSection","portfolioList","_component_TeamSection","_component_FooterBar","_component_Drawers","showLiveDrawer","showDrawer","showLectureDrawer","currentEventImage","onCloseDrawer","handleCloseDrawer","onEventTypeChanged","handleEventTypeChange"],"sources":["/Users/linhankuan/fvl2025/src/components/MainSection.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 首頁區塊 -->\n    <HeroSection \n      :showButtons=\"false\" \n      @show-drawer=\"handleShowDrawer\" \n      @change-en=\"handleLanguageChange\" \n    />\n    <BannerParticles/>\n\n    <!-- 全域角落按鈕 -->\n    <div class=\"global-corner-btns\" :class=\"[{ en: isEnglish }, { expanded: showAllButtons }]\">\n      <button \n        class=\"corner-btn target top-left\" \n        @mouseenter=\"handleShowDrawer('schedule')\"\n      >\n        <span class=\"btn-zh\">{{ isEnglish ? 'SCHEDULE' : '場次表' }}</span>\n      </button>\n      <button \n        class=\"corner-btn target top-right\" \n        @click=\"handleLanguageChange(!isEnglish)\"\n      >\n        <span class=\"btn-zh\">{{ isEnglish ? '中文' : 'EN' }}</span>\n      </button>\n      <button \n        class=\"corner-btn target bottom-left\" \n        @mouseenter=\"handleShowDrawer('lecture')\"\n      >\n        <span class=\"btn-zh\">{{ isEnglish ? 'INFO' : '入場須知' }}</span>\n      </button>\n      <button \n        class=\"corner-btn target bottom-right\" \n        @click=\"handleShowDrawer('about')\"\n      >\n        <span class=\"btn-zh\">{{ isEnglish ? 'ABOUT' : '關於我們' }}</span>\n      </button>\n      <button \n        class=\"corner-btn launcher bottom-right\" \n        @click=\"showAllButtons = true\"\n      >\n        <span class=\"btn-zh\">{{ isEnglish ? 'MENU' : '選單' }}</span>\n      </button>\n    </div>\n\n    <!-- 主要內容區塊 -->\n    <FixedSection :isEnglish=\"isEnglish\" />\n    <AboutSection :firstImage=\"firstImage\" :isEnglish=\"isEnglish\" />\n    <VideoBanner />\n    <PortfolioSection :portfolioList=\"portfolioList\" :isEnglish=\"isEnglish\" />\n    <TeamSection :isEnglish=\"isEnglish\" />\n    <FooterBar />\n\n    <!-- 抽屜組件 -->\n    <Drawers \n      :showLiveDrawer=\"showLiveDrawer\"\n      :showDrawer=\"showDrawer\"\n      :showLectureDrawer=\"showLectureDrawer\"\n      :currentEventImage=\"currentEventImage\"\n      :isEnglish=\"isEnglish\"\n      @close-drawer=\"handleCloseDrawer\"\n      @event-type-changed=\"handleEventTypeChange\"\n    />\n  </div>\n</template>\n\n<script>\nimport BannerParticles from './BannerParticles.vue';\nimport FooterBar from './FooterBar.vue';\nimport HeroSection from './HeroSection.vue';\nimport FixedSection from './FixedSection.vue';\nimport AboutSection from './AboutSection.vue';\nimport VideoBanner from './VideoBanner.vue';\nimport PortfolioSection from './PortfolioSection.vue';\nimport TeamSection from './TeamSection.vue';\nimport Drawers from './Drawers.vue';\nimport axios from 'axios';\nimport { gsap } from 'gsap';\nimport { SplitText } from 'gsap/SplitText';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\n\nimport img1 from '../assets/1.jpg';\nimport img2 from '../assets/2.jpg';\nimport img3 from '../assets/3.jpg';\n\ngsap.registerPlugin(SplitText, ScrollTrigger);\n\n// 常數定義\nconst API_BASE_URL = 'https://unzip-clab-api.clab.org.tw/api/v1';\nconst LOCAL_STORAGE_KEYS = {\n  LANG: 'lang'\n};\nconst DRAWER_TYPES = {\n  SCHEDULE: 'schedule',\n  ABOUT: 'about',\n  LECTURE: 'lecture'\n};\nconst EVENT_TYPES = {\n  EXHIBITION: 'exhibition',\n  WORKSHOP: 'workshop',\n  PERFORMANCE: 'performance'\n};\n\nexport default {\n  name: 'MainSection',\n  components: { \n    BannerParticles,\n    FooterBar, \n    HeroSection,\n    FixedSection,\n    AboutSection,\n    VideoBanner,\n    PortfolioSection,\n    TeamSection,\n    Drawers\n  },\n  data() {\n    return {\n      // 狀態管理\n      isEnglish: false,\n      showAllButtons: false,\n      \n      // 抽屜狀態\n      showLiveDrawer: false,\n      showDrawer: false,\n      showLectureDrawer: false,\n      \n      // 資料\n      firstImage: {},\n      portfolioList: [],\n      currentEventType: EVENT_TYPES.EXHIBITION,\n      \n      // 表單（如果需要的話）\n      form: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      \n      // 內部狀態\n      resizeHandler: null\n    }\n  },\n  computed: {\n    currentEventImage() {\n      const imageMap = {\n        [EVENT_TYPES.EXHIBITION]: img1,\n        [EVENT_TYPES.WORKSHOP]: img2,\n        [EVENT_TYPES.PERFORMANCE]: img3\n      };\n      return imageMap[this.currentEventType] || img1;\n    }\n  },\n  async mounted() {\n    try {\n      this.initLanguage();\n      this.setupResponsiveButtons();\n      await this.fetchData();\n      this.initAnimations();\n    } catch (error) {\n      console.error('MainSection initialization failed:', error);\n    }\n  },\n  beforeUnmount() {\n    // 清理事件監聽器\n    if (this.resizeHandler) {\n      window.removeEventListener('resize', this.resizeHandler);\n    }\n    // 清理 GSAP ScrollTrigger\n    ScrollTrigger.getAll().forEach(trigger => trigger.kill());\n  },\n  methods: {\n    // 語言管理\n    initLanguage() {\n      try {\n        const savedLang = localStorage.getItem(LOCAL_STORAGE_KEYS.LANG);\n        this.isEnglish = savedLang === 'en';\n        console.log(\"Initial language set to:\", this.isEnglish ? \"English\" : \"Chinese\");\n      } catch (error) {\n        console.warn(\"Failed to read language from localStorage:\", error);\n        this.isEnglish = false; // 預設為中文\n      }\n    },\n\n    handleLanguageChange(isEnglish) {\n      console.log('Language changed to:', isEnglish ? 'English' : 'Chinese');\n      this.isEnglish = isEnglish;\n      \n      try {\n        localStorage.setItem(LOCAL_STORAGE_KEYS.LANG, isEnglish ? 'en' : 'zh');\n      } catch (error) {\n        console.warn('Failed to persist language:', error);\n      }\n    },\n\n    // 響應式按鈕管理\n    setupResponsiveButtons() {\n      this.resizeHandler = () => {\n        this.showAllButtons = window.innerWidth <= 768;\n      };\n      \n      this.resizeHandler(); // 初始設置\n      window.addEventListener('resize', this.resizeHandler);\n    },\n\n    // 資料獲取\n    async fetchData() {\n      try {\n        await Promise.all([\n          this.fetchFirstImage(),\n          this.fetchPortfolioData(),\n          this.fetchDatabaseData()\n        ]);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      }\n    },\n\n    async fetchFirstImage() {\n      try {\n        const response = await axios.get(`${API_BASE_URL}/schedules/5/works?page=0&limit=25`);\n        this.firstImage = response.data.results[1]?.photo_1 || {};\n      } catch (error) {\n        console.error('Failed to fetch first image:', error);\n        this.firstImage = {};\n      }\n    },\n\n    async fetchPortfolioData() {\n      try {\n        const response = await axios.get(`${API_BASE_URL}/schedules/3/works?page=0&limit=10`);\n        this.portfolioList = response.data.results || [];\n      } catch (error) {\n        console.error('Failed to fetch portfolio data:', error);\n        this.portfolioList = [];\n      }\n    },\n\n    async fetchDatabaseData() {\n      try {\n        const response = await axios.get('http://localhost:3001/api/data');\n        console.log('Database data:', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('Failed to fetch database data:', error);\n        return [];\n      }\n    },\n\n    // 抽屜管理\n    handleShowDrawer(drawerType) {\n      // 重置所有抽屜狀態\n      this.showLiveDrawer = false;\n      this.showDrawer = false;\n      this.showLectureDrawer = false;\n\n      // 根據類型顯示對應抽屜\n      switch (drawerType) {\n        case DRAWER_TYPES.SCHEDULE:\n          this.showDrawer = true;\n          break;\n        case DRAWER_TYPES.ABOUT:\n          this.showLiveDrawer = true;\n          break;\n        case DRAWER_TYPES.LECTURE:\n          this.showLectureDrawer = true;\n          break;\n        default:\n          console.warn('Unknown drawer type:', drawerType);\n      }\n    },\n\n    handleCloseDrawer(drawerType) {\n      switch (drawerType) {\n        case DRAWER_TYPES.SCHEDULE:\n          this.showDrawer = false;\n          break;\n        case DRAWER_TYPES.ABOUT:\n          this.showLiveDrawer = false;\n          break;\n        case DRAWER_TYPES.LECTURE:\n          this.showLectureDrawer = false;\n          break;\n        default:\n          console.warn('Unknown drawer type:', drawerType);\n      }\n    },\n\n    handleEventTypeChange(eventType) {\n      this.currentEventType = eventType;\n    },\n\n    // 動畫初始化\n    initAnimations() {\n      this.$nextTick(() => {\n        this.initTextAnimation();\n        this.initSunAnimation();\n        this.initCloud1Animation();\n        this.initCloud2Animation();\n        this.initServicesSliderScroll();\n      });\n    },\n\n    initTextAnimation() {\n      // 文字分割動畫\n      this.animateSplitText('.split');\n      this.animateSplitText('.hero-title');\n      this.animateSplitText('.hero-subtitle', { type: 'words' });\n      \n      // 區塊動畫\n      this.initSectionAnimations();\n    },\n\n    animateSplitText(selector, options = {}) {\n      const element = document.querySelector(selector);\n      if (!element) return;\n\n      const defaultOptions = {\n        type: \"chars, words\",\n        charsClass: \"char\",\n        wordsClass: \"word\"\n      };\n      \n      const config = { ...defaultOptions, ...options };\n      const splitText = new SplitText(element, config);\n      const targetElements = config.type.includes('chars') ? splitText.chars : splitText.words;\n      \n      gsap.set(targetElements, {\n        opacity: 0,\n        y: 50,\n        rotationX: config.type.includes('chars') ? -90 : 0\n      });\n      \n      gsap.to(targetElements, {\n        opacity: 1,\n        y: 0,\n        rotationX: 0,\n        duration: 0.8,\n        stagger: 0.05,\n        ease: \"back.out(1.7)\",\n        delay: selector === '.hero-subtitle' ? 0.5 : 0\n      });\n    },\n\n    initSectionAnimations() {\n      const sections = [\n        { id: '#schedule', elements: '.section-title, .schedule-table' },\n        { id: '#portfolio', elements: '.section-title, .portfolio-item' },\n        { id: '#team', elements: '.section-title, .team-item' }\n      ];\n\n      sections.forEach(({ id, elements }) => {\n        gsap.fromTo(`${id} ${elements}`, \n          { opacity: 0, y: 50 },\n          { \n            opacity: 1, \n            y: 0, \n            duration: 0.8, \n            stagger: 0.2, \n            ease: \"power2.out\",\n            scrollTrigger: { \n              trigger: id, \n              start: \"top 80%\", \n              end: \"bottom 20%\", \n              toggleActions: \"play none none reverse\" \n            }\n          }\n        );\n      });\n    },\n\n    initSunAnimation() {\n      const sunImg = this.$refs.sunImg;\n      if (!sunImg) return;\n      \n      gsap.set(sunImg, { y: '100%', opacity: 1 });\n      gsap.to(sunImg, { \n        y: '0%', \n        repeat: 0, \n        yoyo: true, \n        opacity: 1, \n        duration: 2, \n        ease: \"power2.out\" \n      });\n    },\n\n    initCloud1Animation() {\n      const cloud1Img = this.$refs.cloud1Img;\n      if (!cloud1Img) return;\n      \n      gsap.set(cloud1Img, { y: '100%', opacity: 1 });\n      gsap.to(cloud1Img, { \n        y: '0%', \n        opacity: 1, \n        duration: 4, \n        ease: \"power2.out\" \n      });\n    },\n\n    initCloud2Animation() {\n      const cloud2Img = this.$refs.cloud2Img;\n      if (!cloud2Img) return;\n      \n      gsap.set(cloud2Img, { y: '100%', opacity: 1 });\n      gsap.to(cloud2Img, { \n        y: '0%', \n        opacity: 1, \n        duration: 3, \n        ease: \"power2.out\" \n      });\n    },\n\n    initServicesSliderScroll() {\n      this.$nextTick(() => {\n        const slider = this.$refs.servicesSlider;\n        if (!slider) return;\n\n        const container = slider.parentElement;\n        const cardWidth = 320;\n        const gap = 24;\n        const containerPadding = 40;\n        const availableWidth = container.offsetWidth - containerPadding;\n        const cardsPerView = Math.floor(availableWidth / (cardWidth + gap));\n        const totalCards = slider.children.length;\n        const maxScroll = Math.max(0, (totalCards - cardsPerView) * (cardWidth + gap));\n        \n        if (maxScroll <= 0) return;\n\n        gsap.set(slider, { x: 0 });\n        gsap.to(slider, { \n          x: -maxScroll, \n          ease: 'none',\n          scrollTrigger: { \n            trigger: '#services', \n            start: 'top top', \n            end: `+=${maxScroll}`, \n            scrub: 1.2, \n            pin: true, \n            anticipatePin: 1 \n          }\n        });\n      });\n    },\n\n    // 工具方法\n    scrollToSection(sectionId) {\n      const element = document.getElementById(sectionId);\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }\n    },\n\n    submitForm() {\n      alert('感謝您的訊息！我們會盡快回覆您。');\n      this.form = { name: '', email: '', message: '' };\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n// 變數定義\n$body-font: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n$primary-bg: #181818;\n$white: #fff;\n$black: #111;\n$gray-light: #f5f5f5;\n$gray-medium: #333;\n$gray-dark: #232526;\n\n// 基礎樣式\nbody {\n  background: $primary-bg;\n  color: $white;\n  font-family: $body-font;\n  line-height: 1.6;\n  margin: 0 !important;\n}\n\nh1 {\n  font-size: 8vw;\n  font-family: 'Syncopate', sans-serif;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 30px 20px 120px;\n  color: $white;\n}\n\n// 區塊樣式\nsection {\n  background: transparent;\n  color: $white;\n}\n\n.about {\n  background: $white;\n  color: $black;\n\n  .section-title,\n  .about-text,\n  .about-stats,\n  .stat-item,\n  .stat-item h3 {\n    color: $black;\n  }\n}\n\n.services {\n  background: #ecebe7;\n  color: $white;\n}\n\n.portfolio {\n  background: $gray-dark;\n  color: $white;\n}\n\n.contact {\n  background: $primary-bg;\n  color: $white;\n}\n\n.team {\n  background: $gray-dark;\n  color: $white;\n}\n\n.schedule {\n  background: $primary-bg;\n  color: $white;\n}\n\n.schedule-table {\n  background: $white;\n  color: $black;\n\n  th, td {\n    color: $black;\n  }\n\n  th {\n    background: $gray-light;\n    color: $black;\n    border-bottom: 2px solid $gray-medium;\n  }\n\n  tr:not(:last-child) td {\n    border-bottom: 1px solid #eee;\n  }\n\n  tr:hover td {\n    background: #f0f0f0;\n    color: $black;\n  }\n}\n\n// 卡片樣式\n.stat-item {\n  background: $primary-bg;\n  color: $white;\n  box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n}\n\n.service-card {\n  background: $gray-dark;\n  color: $white;\n  box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n}\n\n.contact-form {\n  background: $gray-dark;\n  color: $white;\n  box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n}\n\n.team-content {\n  position: relative;\n  padding: 5em 2em 2em 2em; \n  backdrop-filter: blur(10px);\n}\n\n.team-list {\n  background: transparent;\n  color: $white;\n}\n\n.team-item {\n  background: $black;\n  color: #bbb;\n  border-left: 4px solid $white;\n  font-size: 1rem;\n}\n\n.team-role {\n  font-weight: 700;\n  color: $black;\n  margin-right: 8px;\n}\n\n.footer-bar {\n  background: $black;\n  color: $white;\n}\n\n// 標題樣式\n.section-title {\n  text-align: center;\n  font-size: 2.5rem;\n  margin-bottom: 40px;\n  color: $white;\n\n  @media (max-width: 768px) {\n    font-size: 2rem;\n  }\n}\n\n// 滾動條樣式\n::-webkit-scrollbar {\n  background: $primary-bg;\n  width: 8px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: $gray-medium;\n  border-radius: 4px;\n}\n\n// 動畫相關樣式\n.char { \n  display: inline-block; \n  transform-origin: center; \n}\n\n.word { \n  display: inline-block; \n  margin-right: 0.2em; \n}\n\n.hero-title, \n.hero-subtitle, \n.split { \n  white-space: nowrap; \n  overflow: hidden; \n}\n\n.split { \n  font-size: 3.5rem; \n  font-weight: bold; \n  margin-bottom: 20px; \n  color: $white; \n}\n\n@media (max-width: 768px) {\n  .hero-title, \n  .hero-subtitle, \n  .split { \n    white-space: normal; \n  }\n  .split { \n    font-size: 2.5rem; \n  }\n}\n\n// 全域角落按鈕樣式\n.global-corner-btns {\n  position: fixed;\n  inset: 0;\n  pointer-events: none;\n  z-index: 1000;\n  --btn: 5em;\n\n  .corner-btn {\n    position: absolute;\n    width: var(--btn);\n    height: var(--btn);\n    border-radius: 50%;\n    background: $black;\n    color: $white;\n    font-weight: bold;\n    border: none;\n    box-shadow: 0 4px 20px rgba(255, 255, 255, 0.3);\n    cursor: pointer;\n    font-size: 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: transform 0.9s cubic-bezier(.2,.8,.2,1), opacity 0.5s ease;\n    pointer-events: auto;\n\n    span {\n      display: block;\n      max-width: 90%;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n\n  // 初始狀態：所有 target 按鈕疊在 MENU（右下角）\n  .target {\n    bottom: 24px; \n    right: 24px;\n    transform: translate(0, 0) scale(0);\n    opacity: 0;\n  }\n\n  // 展開狀態：從 MENU 飛向角落\n  &.expanded .target { \n    opacity: 1; \n    transform: scale(1); \n  }\n  \n  &.expanded .target.top-left { \n    transform: translate(calc(-100vw + var(--btn) + 48px), calc(-100vh + var(--btn) + 48px)) scale(1); \n  }\n  \n  &.expanded .target.top-right { \n    transform: translate(0, calc(-100vh + var(--btn) + 48px)) scale(1); \n  }\n  \n  &.expanded .target.bottom-left { \n    transform: translate(calc(-100vw + var(--btn) + 48px), 0) scale(1); \n  }\n\n  // MENU 按鈕\n  .launcher { \n    bottom: 24px; \n    right: 24px; \n  }\n  \n  &.expanded .launcher { \n    opacity: 0; \n    pointer-events: none; \n    transition: opacity 0.3s ease; \n  }\n\n  // 英文長字處理\n  &.en .top-left span {\n    font-size: 0.72em;\n    max-width: 100%;\n    white-space: nowrap;\n    overflow: visible;\n    text-overflow: clip;\n    letter-spacing: 0.5px;\n  }\n}\n\n// 響應式設計\n@media (max-width: 768px) {\n  .global-corner-btns {\n    --btn: 80px;\n\n    .corner-btn {\n      font-size: 15px;\n      padding: 0 6px;\n    }\n\n    // 手機版直接顯示四顆按鈕就位\n    .target,\n    &.expanded .target { \n      transform: none; \n      opacity: 1; \n    }\n    \n    .top-left { \n      bottom: 32px; \n      left: 290px; \n      right: auto;\n    }\n    \n    .top-right { \n      bottom: 32px; \n      left: 110px; \n      right: auto;\n    }\n    \n    .bottom-left { \n      bottom: 32px; \n      left: 200px; \n      right: auto;\n    }\n    \n    .bottom-right { \n      bottom: 32px; \n      left: 290px; \n      right: auto;\n    }\n    \n    .launcher { \n      display: none; \n    }\n  }\n\n  .schedule-table th, \n  .schedule-table td {\n    padding: 12px 8px;\n    font-size: 0.95rem;\n  }\n\n  .service-card,\n  .contact-form {\n    padding: 30px 20px;\n  }\n}\n\n@media (min-width: 2560px) {\n  .global-corner-btns {\n    --btn: 250px;\n\n    .corner-btn {\n      font-size: 3em;\n    }\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}