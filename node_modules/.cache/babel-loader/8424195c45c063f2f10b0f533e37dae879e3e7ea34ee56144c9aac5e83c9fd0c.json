{"ast":null,"code":"/*global navigator*/\n'use strict';\n\nconst {\n  REGEX_BACKSLASH,\n  REGEX_REMOVE_BACKSLASH,\n  REGEX_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_GLOBAL\n} = require('./constants');\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\nexports.isWindows = () => {\n  if (typeof navigator !== 'undefined' && navigator.platform) {\n    const platform = navigator.platform.toLowerCase();\n    return platform === 'win32' || platform === 'windows';\n  }\n  if (typeof process !== 'undefined' && process.platform) {\n    return process.platform === 'win32';\n  }\n  return false;\n};\nexports.removeBackslashes = str => {\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n    return match === '\\\\' ? '' : match;\n  });\n};\nexports.escapeLast = (input, char, lastIdx) => {\n  const idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n};\nexports.removePrefix = (input, state = {}) => {\n  let output = input;\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n  return output;\n};\nexports.wrapOutput = (input, state = {}, options = {}) => {\n  const prepend = options.contains ? '' : '^';\n  const append = options.contains ? '' : '$';\n  let output = `${prepend}(?:${input})${append}`;\n  if (state.negated === true) {\n    output = `(?:^(?!${output}).*$)`;\n  }\n  return output;\n};\nexports.basename = (path, {\n  windows\n} = {}) => {\n  const segs = path.split(windows ? /[\\\\/]/ : '/');\n  const last = segs[segs.length - 1];\n  if (last === '') {\n    return segs[segs.length - 2];\n  }\n  return last;\n};","map":{"version":3,"names":["REGEX_BACKSLASH","REGEX_REMOVE_BACKSLASH","REGEX_SPECIAL_CHARS","REGEX_SPECIAL_CHARS_GLOBAL","require","exports","isObject","val","Array","isArray","hasRegexChars","str","test","isRegexChar","length","escapeRegex","replace","toPosixSlashes","isWindows","navigator","platform","toLowerCase","process","removeBackslashes","match","escapeLast","input","char","lastIdx","idx","lastIndexOf","slice","removePrefix","state","output","startsWith","prefix","wrapOutput","options","prepend","contains","append","negated","basename","path","windows","segs","split","last"],"sources":["/Users/linhankuan/fvl2025/node_modules/@rollup/pluginutils/node_modules/picomatch/lib/utils.js"],"sourcesContent":["/*global navigator*/\n'use strict';\n\nconst {\n  REGEX_BACKSLASH,\n  REGEX_REMOVE_BACKSLASH,\n  REGEX_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_GLOBAL\n} = require('./constants');\n\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\n\nexports.isWindows = () => {\n  if (typeof navigator !== 'undefined' && navigator.platform) {\n    const platform = navigator.platform.toLowerCase();\n    return platform === 'win32' || platform === 'windows';\n  }\n\n  if (typeof process !== 'undefined' && process.platform) {\n    return process.platform === 'win32';\n  }\n\n  return false;\n};\n\nexports.removeBackslashes = str => {\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n    return match === '\\\\' ? '' : match;\n  });\n};\n\nexports.escapeLast = (input, char, lastIdx) => {\n  const idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n};\n\nexports.removePrefix = (input, state = {}) => {\n  let output = input;\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n  return output;\n};\n\nexports.wrapOutput = (input, state = {}, options = {}) => {\n  const prepend = options.contains ? '' : '^';\n  const append = options.contains ? '' : '$';\n\n  let output = `${prepend}(?:${input})${append}`;\n  if (state.negated === true) {\n    output = `(?:^(?!${output}).*$)`;\n  }\n  return output;\n};\n\nexports.basename = (path, { windows } = {}) => {\n  const segs = path.split(windows ? /[\\\\/]/ : '/');\n  const last = segs[segs.length - 1];\n\n  if (last === '') {\n    return segs[segs.length - 2];\n  }\n\n  return last;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}