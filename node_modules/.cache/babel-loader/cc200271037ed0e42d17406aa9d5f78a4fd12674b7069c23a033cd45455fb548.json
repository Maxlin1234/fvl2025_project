{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*!\n * Physics2DPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\n\nlet gsap,\n  _coreInitted,\n  _getUnit,\n  _getStyleSaver,\n  _reverting,\n  _DEG2RAD = Math.PI / 180,\n  _getGSAP = () => gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap,\n  _round = value => Math.round(value * 10000) / 10000,\n  _bonusValidated = 1,\n  //<name>Physics2DPlugin</name>\n  _initCore = core => {\n    gsap = core || _getGSAP();\n    if (!_coreInitted) {\n      _getUnit = gsap.utils.getUnit;\n      _getStyleSaver = gsap.core.getStyleSaver;\n      _reverting = gsap.core.reverting || function () {};\n      _coreInitted = 1;\n    }\n  };\nclass PhysicsProp {\n  constructor(target, p, velocity, acceleration, stepsPerTimeUnit) {\n    let cache = target._gsap,\n      curVal = cache.get(target, p);\n    this.p = p;\n    this.set = cache.set(target, p); //setter\n    this.s = this.val = parseFloat(curVal);\n    this.u = _getUnit(curVal) || 0;\n    this.vel = velocity || 0;\n    this.v = this.vel / stepsPerTimeUnit;\n    if (acceleration || acceleration === 0) {\n      this.acc = acceleration;\n      this.a = this.acc / (stepsPerTimeUnit * stepsPerTimeUnit);\n    } else {\n      this.acc = this.a = 0;\n    }\n  }\n}\nexport const Physics2DPlugin = {\n  version: \"3.13.0\",\n  name: \"physics2D\",\n  register: _initCore,\n  init(target, value, tween) {\n    _coreInitted || _initCore();\n    let data = this,\n      angle = +value.angle || 0,\n      velocity = +value.velocity || 0,\n      acceleration = +value.acceleration || 0,\n      xProp = value.xProp || \"x\",\n      yProp = value.yProp || \"y\",\n      aAngle = value.accelerationAngle || value.accelerationAngle === 0 ? +value.accelerationAngle : angle;\n    data.styles = _getStyleSaver && _getStyleSaver(target, value.xProp && value.xProp !== \"x\" ? value.xProp + \",\" + value.yProp : \"transform\");\n    data.target = target;\n    data.tween = tween;\n    data.step = 0;\n    data.sps = 30; //steps per second\n    if (value.gravity) {\n      acceleration = +value.gravity;\n      aAngle = 90;\n    }\n    angle *= _DEG2RAD;\n    aAngle *= _DEG2RAD;\n    data.fr = 1 - (+value.friction || 0);\n    data._props.push(xProp, yProp);\n    data.xp = new PhysicsProp(target, xProp, Math.cos(angle) * velocity, Math.cos(aAngle) * acceleration, data.sps);\n    data.yp = new PhysicsProp(target, yProp, Math.sin(angle) * velocity, Math.sin(aAngle) * acceleration, data.sps);\n    data.skipX = data.skipY = 0;\n  },\n  render(ratio, data) {\n    let {\n        xp,\n        yp,\n        tween,\n        target,\n        step,\n        sps,\n        fr,\n        skipX,\n        skipY\n      } = data,\n      time = tween._from ? tween._dur - tween._time : tween._time,\n      x,\n      y,\n      tt,\n      steps,\n      remainder,\n      i;\n    if (tween._time || !_reverting()) {\n      if (fr === 1) {\n        tt = time * time * 0.5;\n        x = xp.s + xp.vel * time + xp.acc * tt;\n        y = yp.s + yp.vel * time + yp.acc * tt;\n      } else {\n        time *= sps;\n        steps = i = (time | 0) - step;\n        /*\n        Note: rounding errors build up if we walk the calculations backward which we used to do like this to maximize performance:\n        \ti = -i;\n        \twhile (i--) {\n        \t\txp.val -= xp.v;\n        \t\typ.val -= yp.v;\n        \t\txp.v /= fr;\n        \t\typ.v /= fr;\n        \t\txp.v -= xp.a;\n        \t\typ.v -= yp.a;\n        \t}\n        but now for the sake of accuracy (to ensure rewinding always goes back to EXACTLY the same spot), we force the calculations to go forward every time. So if the tween is going backward, we just start from the beginning and iterate. This is only necessary with friction.\n         */\n        if (i < 0) {\n          xp.v = xp.vel / sps;\n          yp.v = yp.vel / sps;\n          xp.val = xp.s;\n          yp.val = yp.s;\n          data.step = 0;\n          steps = i = time | 0;\n        }\n        remainder = time % 1 * fr;\n        while (i--) {\n          xp.v += xp.a;\n          yp.v += yp.a;\n          xp.v *= fr;\n          yp.v *= fr;\n          xp.val += xp.v;\n          yp.val += yp.v;\n        }\n        x = xp.val + xp.v * remainder;\n        y = yp.val + yp.v * remainder;\n        data.step += steps;\n      }\n      skipX || xp.set(target, xp.p, _round(x) + xp.u);\n      skipY || yp.set(target, yp.p, _round(y) + yp.u);\n    } else {\n      data.styles.revert();\n    }\n  },\n  kill(property) {\n    if (this.xp.p === property) {\n      this.skipX = 1;\n    }\n    if (this.yp.p === property) {\n      this.skipY = 1;\n    }\n  }\n};\n_getGSAP() && gsap.registerPlugin(Physics2DPlugin);\nexport { Physics2DPlugin as default };","map":{"version":3,"names":["gsap","_coreInitted","_getUnit","_getStyleSaver","_reverting","_DEG2RAD","Math","PI","_getGSAP","window","registerPlugin","_round","value","round","_bonusValidated","_initCore","core","utils","getUnit","getStyleSaver","reverting","PhysicsProp","constructor","target","p","velocity","acceleration","stepsPerTimeUnit","cache","_gsap","curVal","get","set","s","val","parseFloat","u","vel","v","acc","a","Physics2DPlugin","version","name","register","init","tween","data","angle","xProp","yProp","aAngle","accelerationAngle","styles","step","sps","gravity","fr","friction","_props","push","xp","cos","yp","sin","skipX","skipY","render","ratio","time","_from","_dur","_time","x","y","tt","steps","remainder","i","revert","kill","property","default"],"sources":["/Users/linhankuan/Documents/GitHub/fvl2025_project/node_modules/gsap/src/Physics2DPlugin.js"],"sourcesContent":["/*!\n * Physics2DPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\n\nlet gsap, _coreInitted, _getUnit, _getStyleSaver, _reverting,\n\t_DEG2RAD = Math.PI / 180,\n\t_getGSAP = () => gsap || (typeof(window) !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap),\n\t_round = value => Math.round(value * 10000) / 10000,\n\t_bonusValidated = 1, //<name>Physics2DPlugin</name>\n\t_initCore = core => {\n\t\tgsap = core || _getGSAP();\n\t\tif (!_coreInitted) {\n\t\t\t_getUnit = gsap.utils.getUnit;\n\t\t\t_getStyleSaver = gsap.core.getStyleSaver;\n\t\t\t_reverting = gsap.core.reverting || function() {};\n\t\t\t_coreInitted = 1;\n\t\t}\n\t};\n\nclass PhysicsProp {\n\n\tconstructor(target, p, velocity, acceleration, stepsPerTimeUnit) {\n\t\tlet cache = target._gsap,\n\t\t\tcurVal = cache.get(target, p);\n\t\tthis.p = p;\n\t\tthis.set = cache.set(target, p); //setter\n\t\tthis.s = this.val = parseFloat(curVal);\n\t\tthis.u = _getUnit(curVal) || 0;\n\t\tthis.vel = velocity || 0;\n\t\tthis.v = this.vel / stepsPerTimeUnit;\n\t\tif (acceleration || acceleration === 0) {\n\t\t\tthis.acc = acceleration;\n\t\t\tthis.a = this.acc / (stepsPerTimeUnit * stepsPerTimeUnit);\n\t\t} else {\n\t\t\tthis.acc = this.a = 0;\n\t\t}\n\t}\n\n}\n\n\nexport const Physics2DPlugin = {\n\tversion:\"3.13.0\",\n\tname:\"physics2D\",\n\tregister: _initCore,\n\tinit(target, value, tween) {\n\t\t_coreInitted || _initCore();\n\t\tlet data = this,\n\t\t\tangle = +value.angle || 0,\n\t\t\tvelocity = +value.velocity || 0,\n\t\t\tacceleration = +value.acceleration || 0,\n\t\t\txProp = value.xProp || \"x\",\n\t\t\tyProp = value.yProp || \"y\",\n\t\t\taAngle = (value.accelerationAngle || value.accelerationAngle === 0) ? +value.accelerationAngle : angle;\n\t\tdata.styles = _getStyleSaver && _getStyleSaver(target, value.xProp && value.xProp !== \"x\" ? value.xProp + \",\" + value.yProp : \"transform\");\n\t\tdata.target = target;\n\t\tdata.tween = tween;\n\t\tdata.step = 0;\n\t\tdata.sps = 30; //steps per second\n\t\tif (value.gravity) {\n\t\t\tacceleration = +value.gravity;\n\t\t\taAngle = 90;\n\t\t}\n\t\tangle *= _DEG2RAD;\n\t\taAngle *= _DEG2RAD;\n\t\tdata.fr = 1 - (+value.friction || 0);\n\t\tdata._props.push(xProp, yProp);\n\n\t\tdata.xp = new PhysicsProp(target, xProp, Math.cos(angle) * velocity, Math.cos(aAngle) * acceleration, data.sps);\n\t\tdata.yp = new PhysicsProp(target, yProp, Math.sin(angle) * velocity, Math.sin(aAngle) * acceleration, data.sps);\n\t\tdata.skipX = data.skipY = 0;\n\t},\n\trender(ratio, data) {\n\t\tlet { xp, yp, tween, target, step, sps, fr, skipX, skipY } = data,\n\t\t\ttime = tween._from ? tween._dur - tween._time : tween._time,\n\t\t\tx, y, tt, steps, remainder, i;\n\t\tif (tween._time || !_reverting()) {\n\t\t\tif (fr === 1) {\n\t\t\t\ttt = time * time * 0.5;\n\t\t\t\tx = xp.s + xp.vel * time + xp.acc * tt;\n\t\t\t\ty = yp.s + yp.vel * time + yp.acc * tt;\n\t\t\t} else {\n\t\t\t\ttime *= sps;\n\t\t\t\tsteps = i = (time | 0) - step;\n\t\t\t\t/*\n\t\t\t\tNote: rounding errors build up if we walk the calculations backward which we used to do like this to maximize performance:\n\t\t\t\t\ti = -i;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\txp.val -= xp.v;\n\t\t\t\t\t\typ.val -= yp.v;\n\t\t\t\t\t\txp.v /= fr;\n\t\t\t\t\t\typ.v /= fr;\n\t\t\t\t\t\txp.v -= xp.a;\n\t\t\t\t\t\typ.v -= yp.a;\n\t\t\t\t\t}\n\t\t\t\tbut now for the sake of accuracy (to ensure rewinding always goes back to EXACTLY the same spot), we force the calculations to go forward every time. So if the tween is going backward, we just start from the beginning and iterate. This is only necessary with friction.\n\t\t\t\t */\n\t\t\t\tif (i < 0) {\n\t\t\t\t\txp.v = xp.vel / sps;\n\t\t\t\t\typ.v = yp.vel / sps;\n\t\t\t\t\txp.val = xp.s;\n\t\t\t\t\typ.val = yp.s;\n\t\t\t\t\tdata.step = 0;\n\t\t\t\t\tsteps = i = time | 0;\n\t\t\t\t}\n\t\t\t\tremainder = (time % 1) * fr;\n\t\t\t\twhile (i--) {\n\t\t\t\t\txp.v += xp.a;\n\t\t\t\t\typ.v += yp.a;\n\t\t\t\t\txp.v *= fr;\n\t\t\t\t\typ.v *= fr;\n\t\t\t\t\txp.val += xp.v;\n\t\t\t\t\typ.val += yp.v;\n\t\t\t\t}\n\t\t\t\tx = xp.val + xp.v * remainder;\n\t\t\t\ty = yp.val + yp.v * remainder;\n\t\t\t\tdata.step += steps;\n\t\t\t}\n\t\t\tskipX || xp.set(target, xp.p, _round(x) + xp.u);\n\t\t\tskipY || yp.set(target, yp.p, _round(y) + yp.u);\n\t\t} else {\n\t\t\tdata.styles.revert();\n\t\t}\n\t},\n\tkill(property) {\n\t\tif (this.xp.p === property) {\n\t\t\tthis.skipX = 1;\n\t\t}\n\t\tif (this.yp.p === property) {\n\t\t\tthis.skipY = 1;\n\t\t}\n\t}\n};\n\n\n_getGSAP() && gsap.registerPlugin(Physics2DPlugin);\n\nexport { Physics2DPlugin as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}