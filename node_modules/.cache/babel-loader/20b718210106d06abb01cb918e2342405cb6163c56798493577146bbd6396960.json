{"ast":null,"code":"import * as THREE from 'three';\n// import { Color } from 'three.js';\n// import vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = document.getElementById('imageContainer');\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true\n    }); // 透明背景\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    container.appendChild(renderer.domElement);\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const geometry = new THREE.PlaneGeometry(2, 2); // width, height\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00,\n      side: THREE.DoubleSide\n    });\n    // const plane = new THREE.Mesh(\n    //   new THREE.PlaneGeometry(2, 2),\n    // new THREE.ShaderMaterial({\n    //   transparent: true,\n    // })\n    const plane = new THREE.Mesh(geometry, material);\n    // );\n    scene.add(plane);\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // Resize handling\n    window.addEventListener('resize', () => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","container","document","getElementById","renderer","WebGLRenderer","alpha","setSize","clientWidth","clientHeight","appendChild","domElement","scene","Scene","camera","PerspectiveCamera","position","z","geometry","PlaneGeometry","material","MeshBasicMaterial","color","side","DoubleSide","plane","Mesh","add","animate","requestAnimationFrame","render","window","addEventListener","width","height","aspect","updateProjectionMatrix"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n    <img id=\"myImage\" src=\"../assets/2025banner.jpg\">\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n// import { Color } from 'three.js';\n// import vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const container = document.getElementById('imageContainer');\n\n    const renderer = new THREE.WebGLRenderer({ alpha: true }); // 透明背景\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    container.appendChild(renderer.domElement);\n\n    const scene = new THREE.Scene();\n\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      container.clientWidth / container.clientHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 5;\n    const geometry = new THREE.PlaneGeometry(2, 2); // width, height\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00, side: THREE.DoubleSide });\n    // const plane = new THREE.Mesh(\n    //   new THREE.PlaneGeometry(2, 2),\n      // new THREE.ShaderMaterial({\n      //   transparent: true,\n      // })\n      const plane = new THREE.Mesh(geometry, material);\n    // );\n    scene.add(plane);\n\n\n\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    // Resize handling\n    window.addEventListener('resize', () => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n}\n</script>\n\n<style>\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  filter: saturate(0);\n  transition: all ease 0.5s;\n}\n\n#imageContainer:hover {\n  filter: saturate(100%);\n}\n\n#imageContainer > * {\n  position: absolute;\n  inset: 0;\n  width: 100% !important;\n  height: 100% !important;\n  object-fit: cover;\n}\n\n#myImage {\n  z-index: 1;\n}\n\ncanvas {\n  z-index: 2;\n  pointer-events: none; /* 讓滑鼠事件穿透 canvas */\n}\n\n</style>"],"mappings":"AAOA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B;AACA;AACA;;AAEA,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,OAAOA,CAAA,EAAG;IACR,MAAMC,SAAQ,GAAIC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC;IAE3D,MAAMC,QAAO,GAAI,IAAIN,KAAK,CAACO,aAAa,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,EAAE;IAC3DF,QAAQ,CAACG,OAAO,CAACN,SAAS,CAACO,WAAW,EAAEP,SAAS,CAACQ,YAAY,CAAC;IAC/DR,SAAS,CAACS,WAAW,CAACN,QAAQ,CAACO,UAAU,CAAC;IAE1C,MAAMC,KAAI,GAAI,IAAId,KAAK,CAACe,KAAK,CAAC,CAAC;IAE/B,MAAMC,MAAK,GAAI,IAAIhB,KAAK,CAACiB,iBAAiB,CACxC,EAAE,EACFd,SAAS,CAACO,WAAU,GAAIP,SAAS,CAACQ,YAAY,EAC9C,GAAG,EACH,IACF,CAAC;IACDK,MAAM,CAACE,QAAQ,CAACC,CAAA,GAAI,CAAC;IACrB,MAAMC,QAAO,GAAI,IAAIpB,KAAK,CAACqB,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAChD,MAAMC,QAAO,GAAI,IAAItB,KAAK,CAACuB,iBAAiB,CAAC;MAAEC,KAAK,EAAE,QAAQ;MAAEC,IAAI,EAAEzB,KAAK,CAAC0B;IAAW,CAAC,CAAC;IACzF;IACA;IACE;IACA;IACA;IACA,MAAMC,KAAI,GAAI,IAAI3B,KAAK,CAAC4B,IAAI,CAACR,QAAQ,EAAEE,QAAQ,CAAC;IAClD;IACAR,KAAK,CAACe,GAAG,CAACF,KAAK,CAAC;IAIhB,SAASG,OAAOA,CAAA,EAAG;MACjBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BxB,QAAQ,CAAC0B,MAAM,CAAClB,KAAK,EAAEE,MAAM,CAAC;IAChC;IAEAc,OAAO,CAAC,CAAC;;IAET;IACAG,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtC,MAAMC,KAAI,GAAIhC,SAAS,CAACO,WAAW;MACnC,MAAM0B,MAAK,GAAIjC,SAAS,CAACQ,YAAY;MACrCL,QAAQ,CAACG,OAAO,CAAC0B,KAAK,EAAEC,MAAM,CAAC;MAC/BpB,MAAM,CAACqB,MAAK,GAAIF,KAAI,GAAIC,MAAM;MAC9BpB,MAAM,CAACsB,sBAAsB,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}