{"ast":null,"code":"import * as THREE from 'three';\n// import { Color } from 'three.js';\n// import vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n    const renderer = new THREE.WebGLRenderer({\n      alpha: false\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    document.body.appendChild(renderer.domElement);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.inset = '0';\n    renderer.domElement.style.zIndex = '2';\n    // window.appendChild(renderer.domElement);\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    // 計算滿版平面尺寸\n    const fov = camera.fov * (Math.PI / 180);\n    const height = 2 * Math.tan(fov / 2) * camera.position.z;\n    const width = height * camera.aspect;\n    const texture = new THREE.TextureLoader().load(require('@/assets/2025banner.jpg'));\n    texture.encoding = THREE.sRGBEncoding;\n    texture.minFilter = THREE.LinearFilter;\n    texture.magFilter = THREE.LinearFilter;\n    texture.anisotropy = renderer.capabilities.getMaxAnisotropy(); // 提升銳利度\n    texture.needsUpdate = true;\n    const geometry = new THREE.PlaneGeometry(width, height);\n    const material = new THREE.MeshBasicMaterial({\n      map: texture\n    });\n    const plane = new THREE.Mesh(geometry, material);\n    scene.add(plane);\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // Resize handling\n    window.addEventListener('resize', () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    });\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","renderer","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","outputEncoding","sRGBEncoding","document","body","appendChild","domElement","style","position","inset","zIndex","scene","Scene","camera","PerspectiveCamera","z","fov","Math","PI","height","tan","width","aspect","texture","TextureLoader","load","require","encoding","minFilter","LinearFilter","magFilter","anisotropy","capabilities","getMaxAnisotropy","needsUpdate","geometry","PlaneGeometry","material","MeshBasicMaterial","map","plane","Mesh","add","animate","requestAnimationFrame","render","addEventListener","updateProjectionMatrix"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n    <img id=\"myImage\" src=\"../assets/2025banner.jpg\">\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n// import { Color } from 'three.js';\n// import vertexShader from '../shader/vertexShader.glsl';\n// import fragmentShader from '../shader/fragmentShader.glsl';\n\nexport default {\n  name: 'Ban-ner',\n  mounted() {\n\n  const renderer = new THREE.WebGLRenderer({ alpha: false});\n  renderer.setPixelRatio(window.devicePixelRatio);\n\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.outputEncoding = THREE.sRGBEncoding; \n  document.body.appendChild(renderer.domElement);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.domElement.style.position = 'absolute';\n  renderer.domElement.style.inset = '0';\n  renderer.domElement.style.zIndex = '2';\n  // window.appendChild(renderer.domElement);\n\n  const scene = new THREE.Scene();\n\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n);\ncamera.position.z = 5;\n\n// 計算滿版平面尺寸\nconst fov = camera.fov * (Math.PI / 180);\nconst height = 2 * Math.tan(fov / 2) * camera.position.z;\nconst width = height * camera.aspect;\nconst texture = new THREE.TextureLoader().load(require('@/assets/2025banner.jpg'));\ntexture.encoding = THREE.sRGBEncoding; \ntexture.minFilter = THREE.LinearFilter;\ntexture.magFilter = THREE.LinearFilter;\ntexture.anisotropy = renderer.capabilities.getMaxAnisotropy(); // 提升銳利度\ntexture.needsUpdate = true;\nconst geometry = new THREE.PlaneGeometry(width, height);\nconst material = new THREE.MeshBasicMaterial({ map:texture });\nconst plane = new THREE.Mesh(geometry, material);\nscene.add(plane);\n\n\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n  }\n\n  animate();\n\n  // Resize handling\n  window.addEventListener('resize', () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  });\n}\n\n}\n</script>\n\n<style>\n#imageContainer {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  filter: saturate(0);\n  transition: all ease 0.5s;\n}\n\n#imageContainer:hover {\n  filter: saturate(100%);\n}\n\n#imageContainer > * {\n  position: absolute;\n  inset: 0;\n  width: 100% !important;\n  height: 100% !important;\n  object-fit: cover;\n}\n\n#myImage {\n  z-index: 1;\n}\n\ncanvas {\n  z-index: 2;\n  pointer-events: none; /* 讓滑鼠事件穿透 canvas */\n}\n\n</style>"],"mappings":"AAOA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B;AACA;AACA;;AAEA,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,OAAOA,CAAA,EAAG;IAEV,MAAMC,QAAO,GAAI,IAAIH,KAAK,CAACI,aAAa,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzDF,QAAQ,CAACG,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAE/CL,QAAQ,CAACM,OAAO,CAACF,MAAM,CAACG,UAAU,EAAEH,MAAM,CAACI,WAAW,CAAC;IACvDR,QAAQ,CAACS,cAAa,GAAIZ,KAAK,CAACa,YAAY;IAC5CC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACb,QAAQ,CAACc,UAAU,CAAC;IAC9Cd,QAAQ,CAACG,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAC/CL,QAAQ,CAACc,UAAU,CAACC,KAAK,CAACC,QAAO,GAAI,UAAU;IAC/ChB,QAAQ,CAACc,UAAU,CAACC,KAAK,CAACE,KAAI,GAAI,GAAG;IACrCjB,QAAQ,CAACc,UAAU,CAACC,KAAK,CAACG,MAAK,GAAI,GAAG;IACtC;;IAEA,MAAMC,KAAI,GAAI,IAAItB,KAAK,CAACuB,KAAK,CAAC,CAAC;IAEjC,MAAMC,MAAK,GAAI,IAAIxB,KAAK,CAACyB,iBAAiB,CACxC,EAAE,EACFlB,MAAM,CAACG,UAAS,GAAIH,MAAM,CAACI,WAAW,EACtC,GAAG,EACH,IACF,CAAC;IACDa,MAAM,CAACL,QAAQ,CAACO,CAAA,GAAI,CAAC;;IAErB;IACA,MAAMC,GAAE,GAAIH,MAAM,CAACG,GAAE,IAAKC,IAAI,CAACC,EAAC,GAAI,GAAG,CAAC;IACxC,MAAMC,MAAK,GAAI,IAAIF,IAAI,CAACG,GAAG,CAACJ,GAAE,GAAI,CAAC,IAAIH,MAAM,CAACL,QAAQ,CAACO,CAAC;IACxD,MAAMM,KAAI,GAAIF,MAAK,GAAIN,MAAM,CAACS,MAAM;IACpC,MAAMC,OAAM,GAAI,IAAIlC,KAAK,CAACmC,aAAa,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAAC,yBAAyB,CAAC,CAAC;IAClFH,OAAO,CAACI,QAAO,GAAItC,KAAK,CAACa,YAAY;IACrCqB,OAAO,CAACK,SAAQ,GAAIvC,KAAK,CAACwC,YAAY;IACtCN,OAAO,CAACO,SAAQ,GAAIzC,KAAK,CAACwC,YAAY;IACtCN,OAAO,CAACQ,UAAS,GAAIvC,QAAQ,CAACwC,YAAY,CAACC,gBAAgB,CAAC,CAAC,EAAE;IAC/DV,OAAO,CAACW,WAAU,GAAI,IAAI;IAC1B,MAAMC,QAAO,GAAI,IAAI9C,KAAK,CAAC+C,aAAa,CAACf,KAAK,EAAEF,MAAM,CAAC;IACvD,MAAMkB,QAAO,GAAI,IAAIhD,KAAK,CAACiD,iBAAiB,CAAC;MAAEC,GAAG,EAAChB;IAAQ,CAAC,CAAC;IAC7D,MAAMiB,KAAI,GAAI,IAAInD,KAAK,CAACoD,IAAI,CAACN,QAAQ,EAAEE,QAAQ,CAAC;IAChD1B,KAAK,CAAC+B,GAAG,CAACF,KAAK,CAAC;IAGd,SAASG,OAAOA,CAAA,EAAG;MACjBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BnD,QAAQ,CAACqD,MAAM,CAAClC,KAAK,EAAEE,MAAM,CAAC;IAChC;IAEA8B,OAAO,CAAC,CAAC;;IAET;IACA/C,MAAM,CAACkD,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtC,MAAMzB,KAAI,GAAIzB,MAAM,CAACG,UAAU;MAC/B,MAAMoB,MAAK,GAAIvB,MAAM,CAACI,WAAW;MACjCR,QAAQ,CAACM,OAAO,CAACuB,KAAK,EAAEF,MAAM,CAAC;MAC/BN,MAAM,CAACS,MAAK,GAAID,KAAI,GAAIF,MAAM;MAC9BN,MAAM,CAACkC,sBAAsB,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}