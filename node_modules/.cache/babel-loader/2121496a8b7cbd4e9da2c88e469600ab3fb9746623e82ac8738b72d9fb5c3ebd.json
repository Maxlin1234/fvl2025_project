{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isSeq, isPair, isMap } from '../../nodes/identity.js';\nimport { createPair, Pair } from '../../nodes/Pair.js';\nimport { Scalar } from '../../nodes/Scalar.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\nfunction resolvePairs(seq, onError) {\n  if (isSeq(seq)) {\n    for (let i = 0; i < seq.items.length; ++i) {\n      let item = seq.items[i];\n      if (isPair(item)) continue;else if (isMap(item)) {\n        if (item.items.length > 1) onError('Each pair must have its own sequence indicator');\n        const pair = item.items[0] || new Pair(new Scalar(null));\n        if (item.commentBefore) pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}\\n${pair.key.commentBefore}` : item.commentBefore;\n        if (item.comment) {\n          const cn = pair.value ?? pair.key;\n          cn.comment = cn.comment ? `${item.comment}\\n${cn.comment}` : item.comment;\n        }\n        item = pair;\n      }\n      seq.items[i] = isPair(item) ? item : new Pair(item);\n    }\n  } else onError('Expected a sequence for this tag');\n  return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n  const {\n    replacer\n  } = ctx;\n  const pairs = new YAMLSeq(schema);\n  pairs.tag = 'tag:yaml.org,2002:pairs';\n  let i = 0;\n  if (iterable && Symbol.iterator in Object(iterable)) for (let it of iterable) {\n    if (typeof replacer === 'function') it = replacer.call(iterable, String(i++), it);\n    let key, value;\n    if (Array.isArray(it)) {\n      if (it.length === 2) {\n        key = it[0];\n        value = it[1];\n      } else throw new TypeError(`Expected [key, value] tuple: ${it}`);\n    } else if (it && it instanceof Object) {\n      const keys = Object.keys(it);\n      if (keys.length === 1) {\n        key = keys[0];\n        value = it[key];\n      } else {\n        throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);\n      }\n    } else {\n      key = it;\n    }\n    pairs.items.push(createPair(key, value, ctx));\n  }\n  return pairs;\n}\nconst pairs = {\n  collection: 'seq',\n  default: false,\n  tag: 'tag:yaml.org,2002:pairs',\n  resolve: resolvePairs,\n  createNode: createPairs\n};\nexport { createPairs, pairs, resolvePairs };","map":{"version":3,"names":["isSeq","isPair","isMap","createPair","Pair","Scalar","YAMLSeq","resolvePairs","seq","onError","i","items","length","item","pair","commentBefore","key","comment","cn","value","createPairs","schema","iterable","ctx","replacer","pairs","tag","Symbol","iterator","Object","it","call","String","Array","isArray","TypeError","keys","push","collection","default","resolve","createNode"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/schema/yaml-1.1/pairs.js"],"sourcesContent":["import { isSeq, isPair, isMap } from '../../nodes/identity.js';\nimport { createPair, Pair } from '../../nodes/Pair.js';\nimport { Scalar } from '../../nodes/Scalar.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\n\nfunction resolvePairs(seq, onError) {\n    if (isSeq(seq)) {\n        for (let i = 0; i < seq.items.length; ++i) {\n            let item = seq.items[i];\n            if (isPair(item))\n                continue;\n            else if (isMap(item)) {\n                if (item.items.length > 1)\n                    onError('Each pair must have its own sequence indicator');\n                const pair = item.items[0] || new Pair(new Scalar(null));\n                if (item.commentBefore)\n                    pair.key.commentBefore = pair.key.commentBefore\n                        ? `${item.commentBefore}\\n${pair.key.commentBefore}`\n                        : item.commentBefore;\n                if (item.comment) {\n                    const cn = pair.value ?? pair.key;\n                    cn.comment = cn.comment\n                        ? `${item.comment}\\n${cn.comment}`\n                        : item.comment;\n                }\n                item = pair;\n            }\n            seq.items[i] = isPair(item) ? item : new Pair(item);\n        }\n    }\n    else\n        onError('Expected a sequence for this tag');\n    return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n    const { replacer } = ctx;\n    const pairs = new YAMLSeq(schema);\n    pairs.tag = 'tag:yaml.org,2002:pairs';\n    let i = 0;\n    if (iterable && Symbol.iterator in Object(iterable))\n        for (let it of iterable) {\n            if (typeof replacer === 'function')\n                it = replacer.call(iterable, String(i++), it);\n            let key, value;\n            if (Array.isArray(it)) {\n                if (it.length === 2) {\n                    key = it[0];\n                    value = it[1];\n                }\n                else\n                    throw new TypeError(`Expected [key, value] tuple: ${it}`);\n            }\n            else if (it && it instanceof Object) {\n                const keys = Object.keys(it);\n                if (keys.length === 1) {\n                    key = keys[0];\n                    value = it[key];\n                }\n                else {\n                    throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);\n                }\n            }\n            else {\n                key = it;\n            }\n            pairs.items.push(createPair(key, value, ctx));\n        }\n    return pairs;\n}\nconst pairs = {\n    collection: 'seq',\n    default: false,\n    tag: 'tag:yaml.org,2002:pairs',\n    resolve: resolvePairs,\n    createNode: createPairs\n};\n\nexport { createPairs, pairs, resolvePairs };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}