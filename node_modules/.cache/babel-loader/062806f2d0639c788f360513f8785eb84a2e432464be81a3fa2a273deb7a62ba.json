{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { map } from './common/map.js';\nimport { nullTag } from './common/null.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { boolTag } from './core/bool.js';\nimport { floatNaN, floatExp, float } from './core/float.js';\nimport { intOct, intHex, int } from './core/int.js';\nimport { schema } from './core/schema.js';\nimport { schema as schema$1 } from './json/schema.js';\nimport { binary } from './yaml-1.1/binary.js';\nimport { merge } from './yaml-1.1/merge.js';\nimport { omap } from './yaml-1.1/omap.js';\nimport { pairs } from './yaml-1.1/pairs.js';\nimport { schema as schema$2 } from './yaml-1.1/schema.js';\nimport { set } from './yaml-1.1/set.js';\nimport { timestamp, intTime, floatTime } from './yaml-1.1/timestamp.js';\nconst schemas = new Map([['core', schema], ['failsafe', [map, seq, string]], ['json', schema$1], ['yaml11', schema$2], ['yaml-1.1', schema$2]]);\nconst tagsByName = {\n  binary,\n  bool: boolTag,\n  float,\n  floatExp,\n  floatNaN,\n  floatTime,\n  int,\n  intHex,\n  intOct,\n  intTime,\n  map,\n  merge,\n  null: nullTag,\n  omap,\n  pairs,\n  seq,\n  set,\n  timestamp\n};\nconst coreKnownTags = {\n  'tag:yaml.org,2002:binary': binary,\n  'tag:yaml.org,2002:merge': merge,\n  'tag:yaml.org,2002:omap': omap,\n  'tag:yaml.org,2002:pairs': pairs,\n  'tag:yaml.org,2002:set': set,\n  'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName, addMergeTag) {\n  const schemaTags = schemas.get(schemaName);\n  if (schemaTags && !customTags) {\n    return addMergeTag && !schemaTags.includes(merge) ? schemaTags.concat(merge) : schemaTags.slice();\n  }\n  let tags = schemaTags;\n  if (!tags) {\n    if (Array.isArray(customTags)) tags = [];else {\n      const keys = Array.from(schemas.keys()).filter(key => key !== 'yaml11').map(key => JSON.stringify(key)).join(', ');\n      throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\n    }\n  }\n  if (Array.isArray(customTags)) {\n    for (const tag of customTags) tags = tags.concat(tag);\n  } else if (typeof customTags === 'function') {\n    tags = customTags(tags.slice());\n  }\n  if (addMergeTag) tags = tags.concat(merge);\n  return tags.reduce((tags, tag) => {\n    const tagObj = typeof tag === 'string' ? tagsByName[tag] : tag;\n    if (!tagObj) {\n      const tagName = JSON.stringify(tag);\n      const keys = Object.keys(tagsByName).map(key => JSON.stringify(key)).join(', ');\n      throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);\n    }\n    if (!tags.includes(tagObj)) tags.push(tagObj);\n    return tags;\n  }, []);\n}\nexport { coreKnownTags, getTags };","map":{"version":3,"names":["map","nullTag","seq","string","boolTag","floatNaN","floatExp","float","intOct","intHex","int","schema","schema$1","binary","merge","omap","pairs","schema$2","set","timestamp","intTime","floatTime","schemas","Map","tagsByName","bool","null","coreKnownTags","getTags","customTags","schemaName","addMergeTag","schemaTags","get","includes","concat","slice","tags","Array","isArray","keys","from","filter","key","JSON","stringify","join","Error","tag","reduce","tagObj","tagName","Object","push"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/schema/tags.js"],"sourcesContent":["import { map } from './common/map.js';\nimport { nullTag } from './common/null.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { boolTag } from './core/bool.js';\nimport { floatNaN, floatExp, float } from './core/float.js';\nimport { intOct, intHex, int } from './core/int.js';\nimport { schema } from './core/schema.js';\nimport { schema as schema$1 } from './json/schema.js';\nimport { binary } from './yaml-1.1/binary.js';\nimport { merge } from './yaml-1.1/merge.js';\nimport { omap } from './yaml-1.1/omap.js';\nimport { pairs } from './yaml-1.1/pairs.js';\nimport { schema as schema$2 } from './yaml-1.1/schema.js';\nimport { set } from './yaml-1.1/set.js';\nimport { timestamp, intTime, floatTime } from './yaml-1.1/timestamp.js';\n\nconst schemas = new Map([\n    ['core', schema],\n    ['failsafe', [map, seq, string]],\n    ['json', schema$1],\n    ['yaml11', schema$2],\n    ['yaml-1.1', schema$2]\n]);\nconst tagsByName = {\n    binary,\n    bool: boolTag,\n    float,\n    floatExp,\n    floatNaN,\n    floatTime,\n    int,\n    intHex,\n    intOct,\n    intTime,\n    map,\n    merge,\n    null: nullTag,\n    omap,\n    pairs,\n    seq,\n    set,\n    timestamp\n};\nconst coreKnownTags = {\n    'tag:yaml.org,2002:binary': binary,\n    'tag:yaml.org,2002:merge': merge,\n    'tag:yaml.org,2002:omap': omap,\n    'tag:yaml.org,2002:pairs': pairs,\n    'tag:yaml.org,2002:set': set,\n    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName, addMergeTag) {\n    const schemaTags = schemas.get(schemaName);\n    if (schemaTags && !customTags) {\n        return addMergeTag && !schemaTags.includes(merge)\n            ? schemaTags.concat(merge)\n            : schemaTags.slice();\n    }\n    let tags = schemaTags;\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n        else {\n            const keys = Array.from(schemas.keys())\n                .filter(key => key !== 'yaml11')\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\n        }\n    }\n    if (Array.isArray(customTags)) {\n        for (const tag of customTags)\n            tags = tags.concat(tag);\n    }\n    else if (typeof customTags === 'function') {\n        tags = customTags(tags.slice());\n    }\n    if (addMergeTag)\n        tags = tags.concat(merge);\n    return tags.reduce((tags, tag) => {\n        const tagObj = typeof tag === 'string' ? tagsByName[tag] : tag;\n        if (!tagObj) {\n            const tagName = JSON.stringify(tag);\n            const keys = Object.keys(tagsByName)\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);\n        }\n        if (!tags.includes(tagObj))\n            tags.push(tagObj);\n        return tags;\n    }, []);\n}\n\nexport { coreKnownTags, getTags };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}