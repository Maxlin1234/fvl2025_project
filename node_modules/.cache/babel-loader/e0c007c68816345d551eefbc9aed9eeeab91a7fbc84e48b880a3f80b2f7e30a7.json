{"ast":null,"code":"import * as THREE from 'three';\nexport default {\n  name: 'BannerPt',\n  mounted() {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      preserveDrawingBuffer: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setClearColor(0x000000, 0); // 第二個參數 0 表示完全透明\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    // 使用 ref 掛載 canvas\n    // this.$refs.threeContainer.appendChild(renderer.domElement);\n    document.getElementById(\"container\").appendChild(renderer.domElement);\n    document.getElementById(\"container\").addEventListener(\"pointermove\", OnPointerMove);\n\n    // const geometry = new THREE.SphereGeometry(1, 100);\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n    // const material = new THREE.MeshPhongMaterial({ color: '#fffffff' });\n    const material = new THREE.PointsMaterial({\n      size: 2,\n      color: 0xff00ff\n    });\n    const particles = new THREE.Points(geometry, material);\n    scene.add(particles);\n    let spherePoints = new THREE.Points(geometry, material);\n    // const points = new THREE.Points(geometry, material);\n    spherePoints.position.set(45, 0, 0);\n    scene.add(spherePoints);\n    const ambientLight = new THREE.AmbientLight('#fffff');\n    scene.add(ambientLight);\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n    animate();\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","alpha","preserveDrawingBuffer","setPixelRatio","devicePixelRatio","setClearColor","setSize","document","getElementById","appendChild","domElement","addEventListener","OnPointerMove","geometry","BufferGeometry","vertices","material","PointsMaterial","size","color","particles","Points","add","spherePoints","set","ambientLight","AmbientLight","animate","requestAnimationFrame","render"],"sources":["/Users/linhankuan/fvl2025/src/components/BannerParticles.vue"],"sourcesContent":["<template>\n  <div class=\"particles\" ref=\"threeContainer\" id=\"container\">\n    <p>Hello world</p>\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'BannerPt',\n  mounted() {\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      10\n    );\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ alpha: true,preserveDrawingBuffer :true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setClearColor(0x000000, 0); // 第二個參數 0 表示完全透明\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    // 使用 ref 掛載 canvas\n    // this.$refs.threeContainer.appendChild(renderer.domElement);\n    document.getElementById(\"container\").appendChild(renderer.domElement);\n\n    document.getElementById(\"container\").addEventListener(\"pointermove\",OnPointerMove);\n      \n\n\n\n\n\n    // const geometry = new THREE.SphereGeometry(1, 100);\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n    // const material = new THREE.MeshPhongMaterial({ color: '#fffffff' });\n    const material = new THREE.PointsMaterial({\n      size:2,\n      color: 0xff00ff,\n    })\n\n    const particles = new THREE.Points(geometry,material);\n    scene.add(particles);\n\n\n\n    let spherePoints = new THREE.Points(geometry,material)\n    // const points = new THREE.Points(geometry, material);\n    spherePoints.position.set(45,0,0)\n    scene.add(spherePoints);\n\n    const ambientLight = new THREE.AmbientLight('#fffff');\n    scene.add(ambientLight);\n\n\n\n\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n\n    }\n    animate();\n  }\n};\n</script>\n"],"mappings":"AAOA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAE9B,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,OAAOA,CAAA,EAAG;IAER,MAAMC,KAAI,GAAI,IAAIH,KAAK,CAACI,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAK,GAAI,IAAIL,KAAK,CAACM,iBAAiB,CAExC,EAAE,EACFC,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,EACF,CAAC;IACDJ,MAAM,CAACK,QAAQ,CAACC,CAAA,GAAI,CAAC;IAErB,MAAMC,QAAO,GAAI,IAAIZ,KAAK,CAACa,aAAa,CAAC;MAAEC,KAAK,EAAE,IAAI;MAACC,qBAAoB,EAAG;IAAK,CAAC,CAAC;IACrFH,QAAQ,CAACI,aAAa,CAACT,MAAM,CAACU,gBAAgB,CAAC;IAC/CL,QAAQ,CAACM,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;IACrCN,QAAQ,CAACO,OAAO,CAACZ,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvD;IACA;IACAW,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,WAAW,CAACV,QAAQ,CAACW,UAAU,CAAC;IAErEH,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACG,gBAAgB,CAAC,aAAa,EAACC,aAAa,CAAC;;IAOlF;IACA,MAAMC,QAAO,GAAI,IAAI1B,KAAK,CAAC2B,cAAc,CAAC,CAAC;IAC3C,MAAMC,QAAO,GAAI,EAAE;IACnB;IACA,MAAMC,QAAO,GAAI,IAAI7B,KAAK,CAAC8B,cAAc,CAAC;MACxCC,IAAI,EAAC,CAAC;MACNC,KAAK,EAAE;IACT,CAAC;IAED,MAAMC,SAAQ,GAAI,IAAIjC,KAAK,CAACkC,MAAM,CAACR,QAAQ,EAACG,QAAQ,CAAC;IACrD1B,KAAK,CAACgC,GAAG,CAACF,SAAS,CAAC;IAIpB,IAAIG,YAAW,GAAI,IAAIpC,KAAK,CAACkC,MAAM,CAACR,QAAQ,EAACG,QAAQ;IACrD;IACAO,YAAY,CAAC1B,QAAQ,CAAC2B,GAAG,CAAC,EAAE,EAAC,CAAC,EAAC,CAAC;IAChClC,KAAK,CAACgC,GAAG,CAACC,YAAY,CAAC;IAEvB,MAAME,YAAW,GAAI,IAAItC,KAAK,CAACuC,YAAY,CAAC,QAAQ,CAAC;IACrDpC,KAAK,CAACgC,GAAG,CAACG,YAAY,CAAC;IAKvB,SAASE,OAAOA,CAAA,EAAG;MACjBC,qBAAqB,CAACD,OAAO,CAAC;MAC9B5B,QAAQ,CAAC8B,MAAM,CAACvC,KAAK,EAAEE,MAAM,CAAC;IAEhC;IACAmC,OAAO,CAAC,CAAC;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}