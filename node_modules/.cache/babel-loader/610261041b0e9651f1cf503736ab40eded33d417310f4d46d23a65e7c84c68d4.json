{"ast":null,"code":"import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\nconst floatNaN = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,\n  resolve: str => str.slice(-3).toLowerCase() === 'nan' ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,\n  stringify: stringifyNumber\n};\nconst floatExp = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'EXP',\n  test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n  resolve: str => parseFloat(str),\n  stringify(node) {\n    const num = Number(node.value);\n    return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n  }\n};\nconst float = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n  resolve(str) {\n    const node = new Scalar(parseFloat(str));\n    const dot = str.indexOf('.');\n    if (dot !== -1 && str[str.length - 1] === '0') node.minFractionDigits = str.length - dot - 1;\n    return node;\n  },\n  stringify: stringifyNumber\n};\nexport { float, floatExp, floatNaN };","map":{"version":3,"names":["Scalar","stringifyNumber","floatNaN","identify","value","default","tag","test","resolve","str","slice","toLowerCase","NaN","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","stringify","floatExp","format","parseFloat","node","num","isFinite","toExponential","float","dot","indexOf","length","minFractionDigits"],"sources":["/Users/linhankuan/fvl2025/node_modules/yaml/browser/dist/schema/core/float.js"],"sourcesContent":["import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,\n    resolve: str => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n    resolve: str => parseFloat(str),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,eAAe,QAAQ,oCAAoC;AAEpE,MAAMC,QAAQ,GAAG;EACbC,QAAQ,EAAEC,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BC,IAAI,EAAE,gDAAgD;EACtDC,OAAO,EAAEC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,KAAK,KAAK,GAC/CC,GAAG,GACHH,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GACVI,MAAM,CAACC,iBAAiB,GACxBD,MAAM,CAACE,iBAAiB;EAClCC,SAAS,EAAEf;AACf,CAAC;AACD,MAAMgB,QAAQ,GAAG;EACbd,QAAQ,EAAEC,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BY,MAAM,EAAE,KAAK;EACbX,IAAI,EAAE,wDAAwD;EAC9DC,OAAO,EAAEC,GAAG,IAAIU,UAAU,CAACV,GAAG,CAAC;EAC/BO,SAASA,CAACI,IAAI,EAAE;IACZ,MAAMC,GAAG,GAAGR,MAAM,CAACO,IAAI,CAAChB,KAAK,CAAC;IAC9B,OAAOkB,QAAQ,CAACD,GAAG,CAAC,GAAGA,GAAG,CAACE,aAAa,CAAC,CAAC,GAAGtB,eAAe,CAACmB,IAAI,CAAC;EACtE;AACJ,CAAC;AACD,MAAMI,KAAK,GAAG;EACVrB,QAAQ,EAAEC,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BC,IAAI,EAAE,oCAAoC;EAC1CC,OAAOA,CAACC,GAAG,EAAE;IACT,MAAMW,IAAI,GAAG,IAAIpB,MAAM,CAACmB,UAAU,CAACV,GAAG,CAAC,CAAC;IACxC,MAAMgB,GAAG,GAAGhB,GAAG,CAACiB,OAAO,CAAC,GAAG,CAAC;IAC5B,IAAID,GAAG,KAAK,CAAC,CAAC,IAAIhB,GAAG,CAACA,GAAG,CAACkB,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EACzCP,IAAI,CAACQ,iBAAiB,GAAGnB,GAAG,CAACkB,MAAM,GAAGF,GAAG,GAAG,CAAC;IACjD,OAAOL,IAAI;EACf,CAAC;EACDJ,SAAS,EAAEf;AACf,CAAC;AAED,SAASuB,KAAK,EAAEP,QAAQ,EAAEf,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}