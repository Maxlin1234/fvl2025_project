{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nexport default {\n  name: 'BannerPt',\n  mounted() {\n    // === 基本場景設置 ===\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n    camera.position.z = 10;\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      preserveDrawingBuffer: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setClearColor(0x000000, 0); // 完全透明背景\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.$refs.threeContainer.appendChild(renderer.domElement);\n\n    // === 建立粒子幾何體與材質 ===\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n    const particleCount = 500;\n    for (let i = 0; i < particleCount; i++) {\n      const x = THREE.MathUtils.randFloatSpread(20);\n      const y = THREE.MathUtils.randFloatSpread(20);\n      const z = THREE.MathUtils.randFloatSpread(20);\n      vertices.push(x, y, z);\n    }\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    const material = new THREE.PointsMaterial({\n      size: 0.2,\n      color: 0xff00ff\n    });\n    const particles = new THREE.Points(geometry, material);\n    scene.add(particles);\n\n    // === 另一個粒子點（可選）===\n    const singleGeometry = new THREE.BufferGeometry();\n    singleGeometry.setAttribute('position', new THREE.Float32BufferAttribute([45, 0, 0], 30));\n    const spherePoint = new THREE.Points(singleGeometry, material);\n    scene.add(spherePoint);\n\n    // === 光源 ===\n    const ambientLight = new THREE.AmbientLight(0xffffff); // 改成正確顏色\n    scene.add(ambientLight);\n\n    // === 動畫迴圈 ===\n    function animate() {\n      requestAnimationFrame(animate);\n      particles.rotation.y += 0.001; // 添加點旋轉讓它動起來\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // === 窗口調整 ===\n    window.addEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  }\n};","map":{"version":3,"names":["THREE","name","mounted","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","alpha","preserveDrawingBuffer","setPixelRatio","devicePixelRatio","setClearColor","setSize","$refs","threeContainer","appendChild","domElement","geometry","BufferGeometry","vertices","particleCount","i","x","MathUtils","randFloatSpread","y","push","setAttribute","Float32BufferAttribute","material","PointsMaterial","size","color","particles","Points","add","singleGeometry","spherePoint","ambientLight","AmbientLight","animate","requestAnimationFrame","rotation","render","addEventListener","aspect","updateProjectionMatrix"],"sources":["/Users/linhankuan/fvl2025/src/components/BannerParticles.vue"],"sourcesContent":["<template>\n  <div class=\"particles\" ref=\"threeContainer\" id=\"container\">\n    <p>Hello world</p>\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default {\n  name: 'BannerPt',\n  mounted() {\n    // === 基本場景設置 ===\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100\n    );\n    camera.position.z = 10;\n\n    const renderer = new THREE.WebGLRenderer({ alpha: true, preserveDrawingBuffer: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setClearColor(0x000000, 0); // 完全透明背景\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.$refs.threeContainer.appendChild(renderer.domElement);\n\n    // === 建立粒子幾何體與材質 ===\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n\n    const particleCount = 500;\n    for (let i = 0; i < particleCount; i++) {\n      const x = THREE.MathUtils.randFloatSpread(20);\n      const y = THREE.MathUtils.randFloatSpread(20);\n      const z = THREE.MathUtils.randFloatSpread(20);\n      vertices.push(x, y, z);\n    }\n\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n    const material = new THREE.PointsMaterial({\n      size: 0.2,\n      color: 0xff00ff\n    });\n\n    const particles = new THREE.Points(geometry, material);\n    scene.add(particles);\n\n    // === 另一個粒子點（可選）===\n    const singleGeometry = new THREE.BufferGeometry();\n    singleGeometry.setAttribute(\n      'position',\n      new THREE.Float32BufferAttribute([45, 0, 0], 30)\n    );\n    const spherePoint = new THREE.Points(singleGeometry, material);\n    scene.add(spherePoint);\n\n    // === 光源 ===\n    const ambientLight = new THREE.AmbientLight(0xffffff); // 改成正確顏色\n    scene.add(ambientLight);\n\n    // === 動畫迴圈 ===\n    function animate() {\n      requestAnimationFrame(animate);\n      particles.rotation.y += 0.001; // 添加點旋轉讓它動起來\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    // === 窗口調整 ===\n    window.addEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}