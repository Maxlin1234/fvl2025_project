{"ast":null,"code":"import * as THREE from 'three';\n// variables\nconst imageContainer = document.getElementById(\"imageContainer\");\nconst imageElement = document.getElementById(\"myImage\");\nlet easeFactor = 0.02;\nlet scene, camera, renderer, planeMesh;\nlet mousePosition = {\n  x: 0.5,\n  y: 0.5\n};\nlet targetMousePosition = {\n  x: 0.5,\n  y: 0.5\n};\nlet mouseStopTimeout;\nlet aberrationIntensity = 0.0;\nlet lastPosition = {\n  x: 0.5,\n  y: 0.5\n};\nlet prevPosition = {\n  x: 0.5,\n  y: 0.5\n};\n\n// shaders\nconst vertexShader = `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\nconst fragmentShader = `\n    varying vec2 vUv;\n    uniform sampler2D u_texture;    \n    uniform vec2 u_mouse;\n    uniform vec2 u_prevMouse;\n    uniform float u_aberrationIntensity;\n\n    void main() {\n        vec2 gridUV = floor(vUv * vec2(20.0, 20.0)) / vec2(20.0, 20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0/20.0, 1.0/20.0);\n        \n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        \n        vec2 pixelToMouseDirection = centerOfPixel - u_mouse;\n        float pixelDistanceToMouse = length(pixelToMouseDirection);\n        float strength = smoothstep(0.3, 0.0, pixelDistanceToMouse);\n \n        vec2 uvOffset = strength * - mouseDirection * 0.2;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 colorR = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n        vec4 colorG = texture2D(u_texture, uv);\n        vec4 colorB = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(colorR.r, colorG.g, colorB.b, 1.0);\n    }\n`;\nfunction initializeScene(texture) {\n  //   scene creation\n  scene = new THREE.Scene();\n\n  // camera setup\n  camera = new THREE.PerspectiveCamera(80, imageElement.offsetWidth / imageElement.offsetHeight, 0.01, 10);\n  camera.position.z = 1;\n\n  //   uniforms\n  let shaderUniforms = {\n    u_mouse: {\n      type: \"v2\",\n      value: new THREE.Vector2()\n    },\n    u_prevMouse: {\n      type: \"v2\",\n      value: new THREE.Vector2()\n    },\n    u_aberrationIntensity: {\n      type: \"f\",\n      value: 0.0\n    },\n    u_texture: {\n      type: \"t\",\n      value: texture\n    }\n  };\n\n  //   creating a plane mesh with materials\n  planeMesh = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), new THREE.ShaderMaterial({\n    uniforms: shaderUniforms,\n    vertexShader,\n    fragmentShader\n  }));\n\n  //   add mesh to scene\n  scene.add(planeMesh);\n\n  //   render\n  renderer = new THREE.WebGLRenderer();\n  renderer.setSize(imageElement.offsetWidth, imageElement.offsetHeight);\n\n  //   create a canvas\n  imageContainer.appendChild(renderer.domElement);\n}\n\n// use the existing image from html in the canvas\ninitializeScene(new THREE.TextureLoader().load(imageElement.src));\nanimateScene();\nfunction animateScene() {\n  requestAnimationFrame(animateScene);\n  mousePosition.x += (targetMousePosition.x - mousePosition.x) * easeFactor;\n  mousePosition.y += (targetMousePosition.y - mousePosition.y) * easeFactor;\n  planeMesh.material.uniforms.u_mouse.value.set(mousePosition.x, 1.0 - mousePosition.y);\n  planeMesh.material.uniforms.u_prevMouse.value.set(prevPosition.x, 1.0 - prevPosition.y);\n  aberrationIntensity = Math.max(0.0, aberrationIntensity - 0.05);\n  planeMesh.material.uniforms.u_aberrationIntensity.value = aberrationIntensity;\n  renderer.render(scene, camera);\n}\n\n// event listeners\nimageContainer.addEventListener(\"mousemove\", handleMouseMove);\nimageContainer.addEventListener(\"mouseenter\", handleMouseEnter);\nimageContainer.addEventListener(\"mouseleave\", handleMouseLeave);\nfunction handleMouseMove(event) {\n  easeFactor = 0.02;\n  let rect = imageContainer.getBoundingClientRect();\n  prevPosition = {\n    ...targetMousePosition\n  };\n  targetMousePosition.x = (event.clientX - rect.left) / rect.width;\n  targetMousePosition.y = (event.clientY - rect.top) / rect.height;\n  aberrationIntensity = 1;\n}\nfunction handleMouseEnter(event) {\n  easeFactor = 0.02;\n  let rect = imageContainer.getBoundingClientRect();\n  mousePosition.x = targetMousePosition.x = (event.clientX - rect.left) / rect.width;\n  mousePosition.y = targetMousePosition.y = (event.clientY - rect.top) / rect.height;\n}\nfunction handleMouseLeave() {\n  easeFactor = 0.05;\n  targetMousePosition = {\n    ...prevPosition\n  };\n}","map":{"version":3,"names":["THREE","imageContainer","document","getElementById","imageElement","easeFactor","scene","camera","renderer","planeMesh","mousePosition","x","y","targetMousePosition","mouseStopTimeout","aberrationIntensity","lastPosition","prevPosition","vertexShader","fragmentShader","initializeScene","texture","Scene","PerspectiveCamera","offsetWidth","offsetHeight","position","z","shaderUniforms","u_mouse","type","value","Vector2","u_prevMouse","u_aberrationIntensity","u_texture","Mesh","PlaneGeometry","ShaderMaterial","uniforms","add","WebGLRenderer","setSize","appendChild","domElement","TextureLoader","load","src","animateScene","requestAnimationFrame","material","set","Math","max","render","addEventListener","handleMouseMove","handleMouseEnter","handleMouseLeave","event","rect","getBoundingClientRect","clientX","left","width","clientY","top","height"],"sources":["/Users/linhankuan/fvl2025/src/components/Banner.vue"],"sourcesContent":["<template>\n  <div id=\"imageContainer\">\n    <img id=\"myImage\" src=\"../assets/2025banner.jpg\" />\n\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n// variables\nconst imageContainer = document.getElementById(\"imageContainer\");\nconst imageElement = document.getElementById(\"myImage\");\n\nlet easeFactor = 0.02;\nlet scene, camera, renderer, planeMesh;\nlet mousePosition = { x: 0.5, y: 0.5 };\nlet targetMousePosition = { x: 0.5, y: 0.5 };\nlet mouseStopTimeout;\nlet aberrationIntensity = 0.0;\nlet lastPosition = { x: 0.5, y: 0.5 };\nlet prevPosition = { x: 0.5, y: 0.5 };\n\n// shaders\nconst vertexShader = `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n\nconst fragmentShader = `\n    varying vec2 vUv;\n    uniform sampler2D u_texture;    \n    uniform vec2 u_mouse;\n    uniform vec2 u_prevMouse;\n    uniform float u_aberrationIntensity;\n\n    void main() {\n        vec2 gridUV = floor(vUv * vec2(20.0, 20.0)) / vec2(20.0, 20.0);\n        vec2 centerOfPixel = gridUV + vec2(1.0/20.0, 1.0/20.0);\n        \n        vec2 mouseDirection = u_mouse - u_prevMouse;\n        \n        vec2 pixelToMouseDirection = centerOfPixel - u_mouse;\n        float pixelDistanceToMouse = length(pixelToMouseDirection);\n        float strength = smoothstep(0.3, 0.0, pixelDistanceToMouse);\n \n        vec2 uvOffset = strength * - mouseDirection * 0.2;\n        vec2 uv = vUv - uvOffset;\n\n        vec4 colorR = texture2D(u_texture, uv + vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n        vec4 colorG = texture2D(u_texture, uv);\n        vec4 colorB = texture2D(u_texture, uv - vec2(strength * u_aberrationIntensity * 0.01, 0.0));\n\n        gl_FragColor = vec4(colorR.r, colorG.g, colorB.b, 1.0);\n    }\n`;\n\nfunction initializeScene(texture) {\n  //   scene creation\n  scene = new THREE.Scene();\n\n  // camera setup\n  camera = new THREE.PerspectiveCamera(\n    80,\n    imageElement.offsetWidth / imageElement.offsetHeight,\n    0.01,\n    10\n  );\n  camera.position.z = 1;\n\n  //   uniforms\n  let shaderUniforms = {\n    u_mouse: { type: \"v2\", value: new THREE.Vector2() },\n    u_prevMouse: { type: \"v2\", value: new THREE.Vector2() },\n    u_aberrationIntensity: { type: \"f\", value: 0.0 },\n    u_texture: { type: \"t\", value: texture }\n  };\n\n  //   creating a plane mesh with materials\n  planeMesh = new THREE.Mesh(\n    new THREE.PlaneGeometry(2, 2),\n    new THREE.ShaderMaterial({\n      uniforms: shaderUniforms,\n      vertexShader,\n      fragmentShader\n    })\n  );\n\n  //   add mesh to scene\n  scene.add(planeMesh);\n\n  //   render\n  renderer = new THREE.WebGLRenderer();\n  renderer.setSize(imageElement.offsetWidth, imageElement.offsetHeight);\n\n  //   create a canvas\n  imageContainer.appendChild(renderer.domElement);\n}\n\n// use the existing image from html in the canvas\ninitializeScene(new THREE.TextureLoader().load(imageElement.src));\n\nanimateScene();\n\nfunction animateScene() {\n  requestAnimationFrame(animateScene);\n\n  mousePosition.x += (targetMousePosition.x - mousePosition.x) * easeFactor;\n  mousePosition.y += (targetMousePosition.y - mousePosition.y) * easeFactor;\n\n  planeMesh.material.uniforms.u_mouse.value.set(\n    mousePosition.x,\n    1.0 - mousePosition.y\n  );\n\n  planeMesh.material.uniforms.u_prevMouse.value.set(\n    prevPosition.x,\n    1.0 - prevPosition.y\n  );\n\n  aberrationIntensity = Math.max(0.0, aberrationIntensity - 0.05);\n\n  planeMesh.material.uniforms.u_aberrationIntensity.value = aberrationIntensity;\n\n  renderer.render(scene, camera);\n}\n\n// event listeners\nimageContainer.addEventListener(\"mousemove\", handleMouseMove);\nimageContainer.addEventListener(\"mouseenter\", handleMouseEnter);\nimageContainer.addEventListener(\"mouseleave\", handleMouseLeave);\n\nfunction handleMouseMove(event) {\n  easeFactor = 0.02;\n  let rect = imageContainer.getBoundingClientRect();\n  prevPosition = { ...targetMousePosition };\n\n  targetMousePosition.x = (event.clientX - rect.left) / rect.width;\n  targetMousePosition.y = (event.clientY - rect.top) / rect.height;\n\n  aberrationIntensity = 1;\n}\n\nfunction handleMouseEnter(event) {\n  easeFactor = 0.02;\n  let rect = imageContainer.getBoundingClientRect();\n\n  mousePosition.x = targetMousePosition.x = (event.clientX - rect.left) / rect.width;\n  mousePosition.y = targetMousePosition.y = (event.clientY - rect.top) / rect.height;\n}\n\nfunction handleMouseLeave() {\n  easeFactor = 0.05;\n  targetMousePosition = { ...prevPosition };\n}\n\n</script>\n\n<style>\n\n#imageContainer {\n  position: relative;\n  padding: 0;\n  margin: 0;\n  width: 100vw !important;\n  height:100vh !important;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-width:100%;\n  max-height: 100%;\n}\n#myImage {\n  position: absolute;\n  min-width: 100%;\n  max-height: 100%;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  object-fit:cover; /* 保持比例 */\n  z-index: 1;\n}\n\ncanvas {\n  display: block;\n  z-index: 2;\n  pointer-events: none;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}